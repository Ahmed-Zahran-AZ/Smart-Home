
DOOR_TEST_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  000031fa  0000328e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000de  008000de  0000330c  2**0
                  ALLOC
  3 .stab         000029dc  00000000  00000000  0000330c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f4c  00000000  00000000  00005ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a7c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a928  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000abb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b383  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3f       	cpi	r26, 0xF1	; 241
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <main>
      8a:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 eb       	ldi	r26, 0xB3	; 179
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 eb       	ldi	r24, 0xB3	; 179
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_VidSetPinDirection>:
#include "DIO_Interface.h"



void DIO_VidSetPinDirection(u8 copy_u8port ,u8 copy_u8Pin, u8 copy_U8Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_U8Direction==1)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_VidSetPinDirection+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_VidSetPinDirection+0x100>
	{
		switch(copy_u8port)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_VidSetPinDirection+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_VidSetPinDirection+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_VidSetPinDirection+0x60>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_VidSetPinDirection+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_VidSetPinDirection+0xd8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: SET_BIT(DDRA,copy_u8Pin);break;
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_VidSetPinDirection+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_VidSetPinDirection+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 1: SET_BIT(DDRB,copy_u8Pin);break;
     bce:	a7 e3       	ldi	r26, 0x37	; 55
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e3       	ldi	r30, 0x37	; 55
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_VidSetPinDirection+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_VidSetPinDirection+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 2: SET_BIT(DDRC,copy_u8Pin);break;
     bf6:	a4 e3       	ldi	r26, 0x34	; 52
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e3       	ldi	r30, 0x34	; 52
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_VidSetPinDirection+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_VidSetPinDirection+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 3: SET_BIT(DDRD,copy_u8Pin);break;
     c1e:	a1 e3       	ldi	r26, 0x31	; 49
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e1 e3       	ldi	r30, 0x31	; 49
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_VidSetPinDirection+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_VidSetPinDirection+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(copy_U8Direction==0)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_VidSetPinDirection+0x108>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_VidSetPinDirection+0x172>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_VidSetPinDirection+0x130>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_VidSetPinDirection+0x148>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_VidSetPinDirection+0x19c>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_VidSetPinDirection+0x146>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_VidSetPinDirection+0x1c6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: CLR_BIT(DDRA,copy_u8Pin);break;
     c8e:	aa e3       	ldi	r26, 0x3A	; 58
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_VidSetPinDirection+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_VidSetPinDirection+0x162>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 1: CLR_BIT(DDRB,copy_u8Pin);break;
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_VidSetPinDirection+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_VidSetPinDirection+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 2: CLR_BIT(DDRC,copy_u8Pin);break;
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_VidSetPinDirection+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_VidSetPinDirection+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 3: CLR_BIT(DDRD,copy_u8Pin);break;
     d0c:	a1 e3       	ldi	r26, 0x31	; 49
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e1 e3       	ldi	r30, 0x31	; 49
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_VidSetPinDirection+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_VidSetPinDirection+0x1e0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
		}

	}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue(u8 copy_U8port ,u8 copy_U8Pin , u8 copy_U8Value)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_U8Value==1)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <DIO_VidSetPinValue+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <DIO_VidSetPinValue+0x100>
	{
		switch(copy_U8port)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	49 f1       	breq	.+82     	; 0xdce <DIO_VidSetPinValue+0x88>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <DIO_VidSetPinValue+0x4a>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <DIO_VidSetPinValue+0x60>
     d8e:	d2 c0       	rjmp	.+420    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
     d90:	2e 81       	ldd	r18, Y+6	; 0x06
     d92:	3f 81       	ldd	r19, Y+7	; 0x07
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	71 f1       	breq	.+92     	; 0xdf6 <DIO_VidSetPinValue+0xb0>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	e9 f1       	breq	.+122    	; 0xe1e <DIO_VidSetPinValue+0xd8>
     da4:	c7 c0       	rjmp	.+398    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		{
			case 0: SET_BIT(PORTA,copy_U8Pin);
     da6:	ab e3       	ldi	r26, 0x3B	; 59
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e3       	ldi	r30, 0x3B	; 59
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_VidSetPinValue+0x7e>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_VidSetPinValue+0x7a>
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	b3 c0       	rjmp	.+358    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 1: SET_BIT(PORTB,copy_U8Pin);
     dce:	a8 e3       	ldi	r26, 0x38	; 56
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e3       	ldi	r30, 0x38	; 56
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_VidSetPinValue+0xa6>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_VidSetPinValue+0xa2>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	9f c0       	rjmp	.+318    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 2: SET_BIT(PORTC,copy_U8Pin);
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_VidSetPinValue+0xce>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_VidSetPinValue+0xca>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	8b c0       	rjmp	.+278    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 3: SET_BIT(PORTD,copy_U8Pin);
     e1e:	a2 e3       	ldi	r26, 0x32	; 50
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e2 e3       	ldi	r30, 0x32	; 50
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_VidSetPinValue+0xf6>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_VidSetPinValue+0xf2>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	77 c0       	rjmp	.+238    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
		}
	}
	else if(copy_U8Value==0)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO_VidSetPinValue+0x108>
     e4c:	73 c0       	rjmp	.+230    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_U8port)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	59 f1       	breq	.+86     	; 0xeb8 <DIO_VidSetPinValue+0x172>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <DIO_VidSetPinValue+0x130>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f0       	breq	.+26     	; 0xe8e <DIO_VidSetPinValue+0x148>
     e74:	5f c0       	rjmp	.+190    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	89 f1       	breq	.+98     	; 0xee2 <DIO_VidSetPinValue+0x19c>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <DIO_VidSetPinValue+0x146>
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <DIO_VidSetPinValue+0x1c6>
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		{
			case 0: CLR_BIT(PORTA,copy_U8Pin);
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_VidSetPinValue+0x166>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_VidSetPinValue+0x162>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	3e c0       	rjmp	.+124    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 1: CLR_BIT(PORTB,copy_U8Pin);
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_VidSetPinValue+0x190>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_VidSetPinValue+0x18c>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	29 c0       	rjmp	.+82     	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 2: CLR_BIT(PORTC,copy_U8Pin);
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_VidSetPinValue+0x1ba>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_VidSetPinValue+0x1b6>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 3: CLR_BIT(PORTD,copy_U8Pin);
     f0c:	a2 e3       	ldi	r26, 0x32	; 50
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e2 e3       	ldi	r30, 0x32	; 50
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_VidSetPinValue+0x1e4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_VidSetPinValue+0x1e0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
				break;
		}

	}
}
     f34:	27 96       	adiw	r28, 0x07	; 7
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <DIO_U8GetPinValue>:



u8 DIO_U8GetPinValue(u8 copy_u8port ,u8 copy_U8Pin)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <DIO_U8GetPinValue+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_U8GetPinValue+0x8>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	6b 83       	std	Y+3, r22	; 0x03
	u8 returned_value=0;
     f58:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	4c 81       	ldd	r20, Y+4	; 0x04
     f66:	5d 81       	ldd	r21, Y+5	; 0x05
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	51 05       	cpc	r21, r1
     f6c:	41 f1       	breq	.+80     	; 0xfbe <DIO_U8GetPinValue+0x78>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	34 f4       	brge	.+12     	; 0xf84 <DIO_U8GetPinValue+0x3e>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	61 f0       	breq	.+24     	; 0xf9a <DIO_U8GetPinValue+0x54>
     f82:	52 c0       	rjmp	.+164    	; 0x1028 <DIO_U8GetPinValue+0xe2>
     f84:	4c 81       	ldd	r20, Y+4	; 0x04
     f86:	5d 81       	ldd	r21, Y+5	; 0x05
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	51 05       	cpc	r21, r1
     f8c:	51 f1       	breq	.+84     	; 0xfe2 <DIO_U8GetPinValue+0x9c>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <DIO_U8GetPinValue+0xc0>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <DIO_U8GetPinValue+0xe2>
	{
		case 0:returned_value= GET_BIT(PINA,copy_U8Pin);break;
     f9a:	e9 e3       	ldi	r30, 0x39	; 57
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_U8GetPinValue+0x6c>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_U8GetPinValue+0x68>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	35 c0       	rjmp	.+106    	; 0x1028 <DIO_U8GetPinValue+0xe2>
		case 1:returned_value= GET_BIT(PINB,copy_U8Pin);break;
     fbe:	e6 e3       	ldi	r30, 0x36	; 54
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_U8GetPinValue+0x90>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_U8GetPinValue+0x8c>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <DIO_U8GetPinValue+0xe2>
		case 2:returned_value= GET_BIT(PINC,copy_U8Pin);break;
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_U8GetPinValue+0xb4>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_U8GetPinValue+0xb0>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <DIO_U8GetPinValue+0xe2>
		case 3:returned_value= GET_BIT(PIND,copy_U8Pin);break;
    1006:	e0 e3       	ldi	r30, 0x30	; 48
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_U8GetPinValue+0xd8>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_U8GetPinValue+0xd4>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
	}
	return returned_value;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <DIO_VidSetPortValue>:


void DIO_VidSetPortValue(u8 copy_u8port ,u8 copy_U8Value)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_VidSetPortValue+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_VidSetPortValue+0x8>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	3c 83       	std	Y+4, r19	; 0x04
    1052:	2b 83       	std	Y+3, r18	; 0x03
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	91 05       	cpc	r25, r1
    105c:	d1 f0       	breq	.+52     	; 0x1092 <DIO_VidSetPortValue+0x58>
    105e:	2b 81       	ldd	r18, Y+3	; 0x03
    1060:	3c 81       	ldd	r19, Y+4	; 0x04
    1062:	22 30       	cpi	r18, 0x02	; 2
    1064:	31 05       	cpc	r19, r1
    1066:	2c f4       	brge	.+10     	; 0x1072 <DIO_VidSetPortValue+0x38>
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	61 f0       	breq	.+24     	; 0x1088 <DIO_VidSetPortValue+0x4e>
    1070:	1e c0       	rjmp	.+60     	; 0x10ae <DIO_VidSetPortValue+0x74>
    1072:	2b 81       	ldd	r18, Y+3	; 0x03
    1074:	3c 81       	ldd	r19, Y+4	; 0x04
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	81 f0       	breq	.+32     	; 0x109c <DIO_VidSetPortValue+0x62>
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	91 05       	cpc	r25, r1
    1084:	81 f0       	breq	.+32     	; 0x10a6 <DIO_VidSetPortValue+0x6c>
    1086:	13 c0       	rjmp	.+38     	; 0x10ae <DIO_VidSetPortValue+0x74>
	{
		case 0:PORTA=copy_U8Value;break;
    1088:	eb e3       	ldi	r30, 0x3B	; 59
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	80 83       	st	Z, r24
    1090:	0e c0       	rjmp	.+28     	; 0x10ae <DIO_VidSetPortValue+0x74>
		case 1:PORTB=copy_U8Value;break;
    1092:	e8 e3       	ldi	r30, 0x38	; 56
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	80 83       	st	Z, r24
    109a:	09 c0       	rjmp	.+18     	; 0x10ae <DIO_VidSetPortValue+0x74>
		case 2:PORTC=copy_U8Value;break;
    109c:	e5 e3       	ldi	r30, 0x35	; 53
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	80 83       	st	Z, r24
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <DIO_VidSetPortValue+0x74>
		case 3:PORTD=copy_U8Value;break;
    10a6:	e2 e3       	ldi	r30, 0x32	; 50
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	80 83       	st	Z, r24
	}
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 copy_u8port ,u8 copy_U8Direction)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <DIO_VidSetPortDirection+0x6>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <DIO_VidSetPortDirection+0x8>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3c 83       	std	Y+4, r19	; 0x04
    10d4:	2b 83       	std	Y+3, r18	; 0x03
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	d1 f0       	breq	.+52     	; 0x1114 <DIO_VidSetPortDirection+0x58>
    10e0:	2b 81       	ldd	r18, Y+3	; 0x03
    10e2:	3c 81       	ldd	r19, Y+4	; 0x04
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <DIO_VidSetPortDirection+0x38>
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	61 f0       	breq	.+24     	; 0x110a <DIO_VidSetPortDirection+0x4e>
    10f2:	1e c0       	rjmp	.+60     	; 0x1130 <DIO_VidSetPortDirection+0x74>
    10f4:	2b 81       	ldd	r18, Y+3	; 0x03
    10f6:	3c 81       	ldd	r19, Y+4	; 0x04
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	81 f0       	breq	.+32     	; 0x111e <DIO_VidSetPortDirection+0x62>
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	81 f0       	breq	.+32     	; 0x1128 <DIO_VidSetPortDirection+0x6c>
    1108:	13 c0       	rjmp	.+38     	; 0x1130 <DIO_VidSetPortDirection+0x74>
	{
		case 0:DDRA=copy_U8Direction;break;
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	80 83       	st	Z, r24
    1112:	0e c0       	rjmp	.+28     	; 0x1130 <DIO_VidSetPortDirection+0x74>
		case 1:DDRB=copy_U8Direction;break;
    1114:	e7 e3       	ldi	r30, 0x37	; 55
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	80 83       	st	Z, r24
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <DIO_VidSetPortDirection+0x74>
		case 2:DDRC=copy_U8Direction;break;
    111e:	e4 e3       	ldi	r30, 0x34	; 52
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	80 83       	st	Z, r24
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <DIO_VidSetPortDirection+0x74>
		case 3:DDRD=copy_U8Direction;break;
    1128:	e1 e3       	ldi	r30, 0x31	; 49
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	80 83       	st	Z, r24
	}
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <DIO_VidToggelPinValue>:

void DIO_VidToggelPinValue(u8 copy_u8port ,u8 copy_U8Pin)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <DIO_VidToggelPinValue+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <DIO_VidToggelPinValue+0x8>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8port)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	49 f1       	breq	.+82     	; 0x11b4 <DIO_VidToggelPinValue+0x76>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <DIO_VidToggelPinValue+0x38>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <DIO_VidToggelPinValue+0x4e>
    1174:	5a c0       	rjmp	.+180    	; 0x122a <DIO_VidToggelPinValue+0xec>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	71 f1       	breq	.+92     	; 0x11dc <DIO_VidToggelPinValue+0x9e>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	e9 f1       	breq	.+122    	; 0x1204 <DIO_VidToggelPinValue+0xc6>
    118a:	4f c0       	rjmp	.+158    	; 0x122a <DIO_VidToggelPinValue+0xec>
		{
			case 0: TOG_BIT(PORTA,copy_U8Pin);
    118c:	ab e3       	ldi	r26, 0x3B	; 59
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	eb e3       	ldi	r30, 0x3B	; 59
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_VidToggelPinValue+0x6c>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_VidToggelPinValue+0x68>
    11ae:	84 27       	eor	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	3b c0       	rjmp	.+118    	; 0x122a <DIO_VidToggelPinValue+0xec>
				break;
			case 1: TOG_BIT(PORTB,copy_U8Pin);
    11b4:	a8 e3       	ldi	r26, 0x38	; 56
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e8 e3       	ldi	r30, 0x38	; 56
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_VidToggelPinValue+0x94>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_VidToggelPinValue+0x90>
    11d6:	84 27       	eor	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	27 c0       	rjmp	.+78     	; 0x122a <DIO_VidToggelPinValue+0xec>
				break;
			case 2: TOG_BIT(PORTC,copy_U8Pin);
    11dc:	a5 e3       	ldi	r26, 0x35	; 53
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e5 e3       	ldi	r30, 0x35	; 53
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_VidToggelPinValue+0xbc>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_VidToggelPinValue+0xb8>
    11fe:	84 27       	eor	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	13 c0       	rjmp	.+38     	; 0x122a <DIO_VidToggelPinValue+0xec>
				break;
			case 3: TOG_BIT(PORTD,copy_U8Pin);
    1204:	a2 e3       	ldi	r26, 0x32	; 50
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e2 e3       	ldi	r30, 0x32	; 50
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_VidToggelPinValue+0xe4>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_VidToggelPinValue+0xe0>
    1226:	84 27       	eor	r24, r20
    1228:	8c 93       	st	X, r24
				break;
		}
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <SmartDoor>:
	u8 password[4] , Check_pass[4];
	u8 CHK_COUNT =0;
	u8 First_Number[4],Second_Number[4];

void SmartDoor(void)
{
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	c2 58       	subi	r28, 0x82	; 130
    1246:	d0 40       	sbci	r29, 0x00	; 0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61


	u8 Pass_Status;
	LCD_VidInit();
    1252:	0e 94 2f 13 	call	0x265e	; 0x265e <LCD_VidInit>
	KPD_VidInit();
    1256:	0e 94 82 10 	call	0x2104	; 0x2104 <KPD_VidInit>
	KPD_VALUE=KPD_CHEK;
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	80 93 c4 00 	sts	0x00C4, r24

	Pass_Status=EEPROM_U8ReadData(Check_Save_address);
    1260:	80 91 bb 00 	lds	r24, 0x00BB
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 07 10 	call	0x200e	; 0x200e <EEPROM_U8ReadData>
    126c:	fe 01       	movw	r30, r28
    126e:	ee 57       	subi	r30, 0x7E	; 126
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	80 83       	st	Z, r24
	/*check if first time to enter pass or not */
	if(0xff == Pass_Status)
    1274:	fe 01       	movw	r30, r28
    1276:	ee 57       	subi	r30, 0x7E	; 126
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	80 81       	ld	r24, Z
    127c:	8f 3f       	cpi	r24, 0xFF	; 255
    127e:	09 f0       	breq	.+2      	; 0x1282 <SmartDoor+0x4a>
    1280:	39 c4       	rjmp	.+2162   	; 0x1af4 <SmartDoor+0x8bc>
	{
	    /*Set password for first time */

		LCD_VidSendStringPos("Set ur PASS ",1,1);
    1282:	80 e6       	ldi	r24, 0x60	; 96
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <LCD_VidSendStringPos>
	    while(1)
	    {
	    	do{
	    		KPD_VALUE=KPD_U8PressedKey();
    1292:	0e 94 91 10 	call	0x2122	; 0x2122 <KPD_U8PressedKey>
    1296:	80 93 c4 00 	sts	0x00C4, r24
	    	}while(KPD_VALUE == KPD_CHEK );
    129a:	80 91 c4 00 	lds	r24, 0x00C4
    129e:	8f 3f       	cpi	r24, 0xFF	; 255
    12a0:	c1 f3       	breq	.-16     	; 0x1292 <SmartDoor+0x5a>
	    		KPD_COUNTER++;
    12a2:	80 91 df 00 	lds	r24, 0x00DF
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	80 93 df 00 	sts	0x00DF, r24
	    	if(KPD_VALUE == '&') break;
    12ac:	80 91 c4 00 	lds	r24, 0x00C4
    12b0:	86 32       	cpi	r24, 0x26	; 38
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <SmartDoor+0x7e>
    12b4:	e3 c0       	rjmp	.+454    	; 0x147c <SmartDoor+0x244>
	    	LCD_VidSendNumberPos(KPD_VALUE,2,KPD_COUNTER);
    12b6:	80 91 c4 00 	lds	r24, 0x00C4
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a0 e0       	ldi	r26, 0x00	; 0
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	20 91 df 00 	lds	r18, 0x00DF
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	42 e0       	ldi	r20, 0x02	; 2
    12cc:	0e 94 57 16 	call	0x2cae	; 0x2cae <LCD_VidSendNumberPos>
    12d0:	fe 01       	movw	r30, r28
    12d2:	e5 58       	subi	r30, 0x85	; 133
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	a8 ec       	ldi	r26, 0xC8	; 200
    12dc:	b2 e4       	ldi	r27, 0x42	; 66
    12de:	80 83       	st	Z, r24
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	a2 83       	std	Z+2, r26	; 0x02
    12e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e6:	8e 01       	movw	r16, r28
    12e8:	09 58       	subi	r16, 0x89	; 137
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	fe 01       	movw	r30, r28
    12ee:	e5 58       	subi	r30, 0x85	; 133
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	4a ef       	ldi	r20, 0xFA	; 250
    1300:	54 e4       	ldi	r21, 0x44	; 68
    1302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	f8 01       	movw	r30, r16
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	a2 83       	std	Z+2, r26	; 0x02
    1312:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1314:	fe 01       	movw	r30, r28
    1316:	e9 58       	subi	r30, 0x89	; 137
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	60 81       	ld	r22, Z
    131c:	71 81       	ldd	r23, Z+1	; 0x01
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	93 81       	ldd	r25, Z+3	; 0x03
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	5f e3       	ldi	r21, 0x3F	; 63
    132a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132e:	88 23       	and	r24, r24
    1330:	44 f4       	brge	.+16     	; 0x1342 <SmartDoor+0x10a>
		__ticks = 1;
    1332:	fe 01       	movw	r30, r28
    1334:	eb 58       	subi	r30, 0x8B	; 139
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	80 83       	st	Z, r24
    1340:	64 c0       	rjmp	.+200    	; 0x140a <SmartDoor+0x1d2>
	else if (__tmp > 65535)
    1342:	fe 01       	movw	r30, r28
    1344:	e9 58       	subi	r30, 0x89	; 137
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	60 81       	ld	r22, Z
    134a:	71 81       	ldd	r23, Z+1	; 0x01
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    135c:	18 16       	cp	r1, r24
    135e:	0c f0       	brlt	.+2      	; 0x1362 <SmartDoor+0x12a>
    1360:	43 c0       	rjmp	.+134    	; 0x13e8 <SmartDoor+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1362:	fe 01       	movw	r30, r28
    1364:	e5 58       	subi	r30, 0x85	; 133
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e2       	ldi	r20, 0x20	; 32
    1376:	51 e4       	ldi	r21, 0x41	; 65
    1378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	8e 01       	movw	r16, r28
    1382:	0b 58       	subi	r16, 0x8B	; 139
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	f8 01       	movw	r30, r16
    1394:	91 83       	std	Z+1, r25	; 0x01
    1396:	80 83       	st	Z, r24
    1398:	1f c0       	rjmp	.+62     	; 0x13d8 <SmartDoor+0x1a0>
    139a:	fe 01       	movw	r30, r28
    139c:	ed 58       	subi	r30, 0x8D	; 141
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	88 ec       	ldi	r24, 0xC8	; 200
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	91 83       	std	Z+1, r25	; 0x01
    13a6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a8:	fe 01       	movw	r30, r28
    13aa:	ed 58       	subi	r30, 0x8D	; 141
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <SmartDoor+0x17a>
    13b6:	fe 01       	movw	r30, r28
    13b8:	ed 58       	subi	r30, 0x8D	; 141
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c0:	de 01       	movw	r26, r28
    13c2:	ab 58       	subi	r26, 0x8B	; 139
    13c4:	bf 4f       	sbci	r27, 0xFF	; 255
    13c6:	fe 01       	movw	r30, r28
    13c8:	eb 58       	subi	r30, 0x8B	; 139
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	11 96       	adiw	r26, 0x01	; 1
    13d4:	9c 93       	st	X, r25
    13d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d8:	fe 01       	movw	r30, r28
    13da:	eb 58       	subi	r30, 0x8B	; 139
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	d1 f6       	brne	.-76     	; 0x139a <SmartDoor+0x162>
    13e6:	27 c0       	rjmp	.+78     	; 0x1436 <SmartDoor+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e8:	8e 01       	movw	r16, r28
    13ea:	0b 58       	subi	r16, 0x8B	; 139
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	fe 01       	movw	r30, r28
    13f0:	e9 58       	subi	r30, 0x89	; 137
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	f8 01       	movw	r30, r16
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	de 01       	movw	r26, r28
    140c:	af 58       	subi	r26, 0x8F	; 143
    140e:	bf 4f       	sbci	r27, 0xFF	; 255
    1410:	fe 01       	movw	r30, r28
    1412:	eb 58       	subi	r30, 0x8B	; 139
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	80 81       	ld	r24, Z
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	8d 93       	st	X+, r24
    141c:	9c 93       	st	X, r25
    141e:	fe 01       	movw	r30, r28
    1420:	ef 58       	subi	r30, 0x8F	; 143
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <SmartDoor+0x1f0>
    142c:	fe 01       	movw	r30, r28
    142e:	ef 58       	subi	r30, 0x8F	; 143
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
	    	_delay_ms(100);
	    	LCD_VidSendCharPos('*',2,KPD_COUNTER);
    1436:	90 91 df 00 	lds	r25, 0x00DF
    143a:	8a e2       	ldi	r24, 0x2A	; 42
    143c:	62 e0       	ldi	r22, 0x02	; 2
    143e:	49 2f       	mov	r20, r25
    1440:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_VidSendCharPos>
	    	password[KPD_COUNTER]=KPD_VALUE;
    1444:	80 91 df 00 	lds	r24, 0x00DF
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	20 91 c4 00 	lds	r18, 0x00C4
    1450:	fc 01       	movw	r30, r24
    1452:	ef 51       	subi	r30, 0x1F	; 31
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	20 83       	st	Z, r18
	    	EEPROM_VidWriteData(address[KPD_COUNTER-1],KPD_VALUE);
    1458:	80 91 df 00 	lds	r24, 0x00DF
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	fc 01       	movw	r30, r24
    1468:	e4 54       	subi	r30, 0x44	; 68
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	20 91 c4 00 	lds	r18, 0x00C4
    1474:	62 2f       	mov	r22, r18
    1476:	0e 94 37 10 	call	0x206e	; 0x206e <EEPROM_VidWriteData>
    147a:	0b cf       	rjmp	.-490    	; 0x1292 <SmartDoor+0x5a>

	   }
	    EEPROM_VidWriteData(Check_Save_address,0x00);
    147c:	80 91 bb 00 	lds	r24, 0x00BB
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	0e 94 37 10 	call	0x206e	; 0x206e <EEPROM_VidWriteData>
	    LCD_VidCLR();
    148a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidCLR>
	    LCD_VidSendStringPos("Password saved",1,1);
    148e:	8d e6       	ldi	r24, 0x6D	; 109
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <LCD_VidSendStringPos>
	    EEPROM_VidWriteData(Check_Save_address,1);
    149e:	80 91 bb 00 	lds	r24, 0x00BB
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	61 e0       	ldi	r22, 0x01	; 1
    14a8:	0e 94 37 10 	call	0x206e	; 0x206e <EEPROM_VidWriteData>

	    /*CHECK PASSWORD*/
	    LCD_VidCLR();
    14ac:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidCLR>
    14b0:	fe 01       	movw	r30, r28
    14b2:	e3 59       	subi	r30, 0x93	; 147
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a8 e4       	ldi	r26, 0x48	; 72
    14bc:	b3 e4       	ldi	r27, 0x43	; 67
    14be:	80 83       	st	Z, r24
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	a2 83       	std	Z+2, r26	; 0x02
    14c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c6:	8e 01       	movw	r16, r28
    14c8:	07 59       	subi	r16, 0x97	; 151
    14ca:	1f 4f       	sbci	r17, 0xFF	; 255
    14cc:	fe 01       	movw	r30, r28
    14ce:	e3 59       	subi	r30, 0x93	; 147
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	60 81       	ld	r22, Z
    14d4:	71 81       	ldd	r23, Z+1	; 0x01
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	4a ef       	ldi	r20, 0xFA	; 250
    14e0:	54 e4       	ldi	r21, 0x44	; 68
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	f8 01       	movw	r30, r16
    14ec:	80 83       	st	Z, r24
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	a2 83       	std	Z+2, r26	; 0x02
    14f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14f4:	fe 01       	movw	r30, r28
    14f6:	e7 59       	subi	r30, 0x97	; 151
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	44 f4       	brge	.+16     	; 0x1522 <SmartDoor+0x2ea>
		__ticks = 1;
    1512:	fe 01       	movw	r30, r28
    1514:	e9 59       	subi	r30, 0x99	; 153
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	80 83       	st	Z, r24
    1520:	64 c0       	rjmp	.+200    	; 0x15ea <SmartDoor+0x3b2>
	else if (__tmp > 65535)
    1522:	fe 01       	movw	r30, r28
    1524:	e7 59       	subi	r30, 0x97	; 151
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	60 81       	ld	r22, Z
    152a:	71 81       	ldd	r23, Z+1	; 0x01
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	3f ef       	ldi	r19, 0xFF	; 255
    1534:	4f e7       	ldi	r20, 0x7F	; 127
    1536:	57 e4       	ldi	r21, 0x47	; 71
    1538:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    153c:	18 16       	cp	r1, r24
    153e:	0c f0       	brlt	.+2      	; 0x1542 <SmartDoor+0x30a>
    1540:	43 c0       	rjmp	.+134    	; 0x15c8 <SmartDoor+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1542:	fe 01       	movw	r30, r28
    1544:	e3 59       	subi	r30, 0x93	; 147
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e2       	ldi	r20, 0x20	; 32
    1556:	51 e4       	ldi	r21, 0x41	; 65
    1558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	8e 01       	movw	r16, r28
    1562:	09 59       	subi	r16, 0x99	; 153
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	bc 01       	movw	r22, r24
    1568:	cd 01       	movw	r24, r26
    156a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	f8 01       	movw	r30, r16
    1574:	91 83       	std	Z+1, r25	; 0x01
    1576:	80 83       	st	Z, r24
    1578:	1f c0       	rjmp	.+62     	; 0x15b8 <SmartDoor+0x380>
    157a:	fe 01       	movw	r30, r28
    157c:	eb 59       	subi	r30, 0x9B	; 155
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	88 ec       	ldi	r24, 0xC8	; 200
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	80 83       	st	Z, r24
    1588:	fe 01       	movw	r30, r28
    158a:	eb 59       	subi	r30, 0x9B	; 155
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	80 81       	ld	r24, Z
    1590:	91 81       	ldd	r25, Z+1	; 0x01
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <SmartDoor+0x35a>
    1596:	fe 01       	movw	r30, r28
    1598:	eb 59       	subi	r30, 0x9B	; 155
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	de 01       	movw	r26, r28
    15a2:	a9 59       	subi	r26, 0x99	; 153
    15a4:	bf 4f       	sbci	r27, 0xFF	; 255
    15a6:	fe 01       	movw	r30, r28
    15a8:	e9 59       	subi	r30, 0x99	; 153
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	11 96       	adiw	r26, 0x01	; 1
    15b4:	9c 93       	st	X, r25
    15b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	fe 01       	movw	r30, r28
    15ba:	e9 59       	subi	r30, 0x99	; 153
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	80 81       	ld	r24, Z
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	d1 f6       	brne	.-76     	; 0x157a <SmartDoor+0x342>
    15c6:	27 c0       	rjmp	.+78     	; 0x1616 <SmartDoor+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c8:	8e 01       	movw	r16, r28
    15ca:	09 59       	subi	r16, 0x99	; 153
    15cc:	1f 4f       	sbci	r17, 0xFF	; 255
    15ce:	fe 01       	movw	r30, r28
    15d0:	e7 59       	subi	r30, 0x97	; 151
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	82 81       	ldd	r24, Z+2	; 0x02
    15da:	93 81       	ldd	r25, Z+3	; 0x03
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	f8 01       	movw	r30, r16
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	80 83       	st	Z, r24
    15ea:	de 01       	movw	r26, r28
    15ec:	ad 59       	subi	r26, 0x9D	; 157
    15ee:	bf 4f       	sbci	r27, 0xFF	; 255
    15f0:	fe 01       	movw	r30, r28
    15f2:	e9 59       	subi	r30, 0x99	; 153
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	8d 93       	st	X+, r24
    15fc:	9c 93       	st	X, r25
    15fe:	fe 01       	movw	r30, r28
    1600:	ed 59       	subi	r30, 0x9D	; 157
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <SmartDoor+0x3d0>
    160c:	fe 01       	movw	r30, r28
    160e:	ed 59       	subi	r30, 0x9D	; 157
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
	    _delay_ms(200);
	    LCD_VidSendStringPos("Check ur PASS ",1,1);
    1616:	8c e7       	ldi	r24, 0x7C	; 124
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <LCD_VidSendStringPos>
	    KPD_VALUE=KPD_CHEK;
    1626:	8f ef       	ldi	r24, 0xFF	; 255
    1628:	80 93 c4 00 	sts	0x00C4, r24
    162c:	e3 c0       	rjmp	.+454    	; 0x17f4 <SmartDoor+0x5bc>
	    while(KPD_VALUE != '&')
	    	{
	    		do{
	    		    KPD_VALUE=KPD_U8PressedKey();
    162e:	0e 94 91 10 	call	0x2122	; 0x2122 <KPD_U8PressedKey>
    1632:	80 93 c4 00 	sts	0x00C4, r24
	    		   }while(KPD_VALUE == KPD_CHEK );
    1636:	80 91 c4 00 	lds	r24, 0x00C4
    163a:	8f 3f       	cpi	r24, 0xFF	; 255
    163c:	c1 f3       	breq	.-16     	; 0x162e <SmartDoor+0x3f6>
	    		    CHK_COUNT++;
    163e:	80 91 e0 00 	lds	r24, 0x00E0
    1642:	8f 5f       	subi	r24, 0xFF	; 255
    1644:	80 93 e0 00 	sts	0x00E0, r24
	    		    if(KPD_VALUE == '&') break;
    1648:	80 91 c4 00 	lds	r24, 0x00C4
    164c:	86 32       	cpi	r24, 0x26	; 38
    164e:	09 f4       	brne	.+2      	; 0x1652 <SmartDoor+0x41a>
    1650:	d6 c0       	rjmp	.+428    	; 0x17fe <SmartDoor+0x5c6>
	    		    LCD_VidSendNumberPos(KPD_VALUE,2,CHK_COUNT);
    1652:	80 91 c4 00 	lds	r24, 0x00C4
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	20 91 e0 00 	lds	r18, 0x00E0
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	42 e0       	ldi	r20, 0x02	; 2
    1668:	0e 94 57 16 	call	0x2cae	; 0x2cae <LCD_VidSendNumberPos>
    166c:	fe 01       	movw	r30, r28
    166e:	e1 5a       	subi	r30, 0xA1	; 161
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a8 ec       	ldi	r26, 0xC8	; 200
    1678:	b2 e4       	ldi	r27, 0x42	; 66
    167a:	80 83       	st	Z, r24
    167c:	91 83       	std	Z+1, r25	; 0x01
    167e:	a2 83       	std	Z+2, r26	; 0x02
    1680:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1682:	8e 01       	movw	r16, r28
    1684:	05 5a       	subi	r16, 0xA5	; 165
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	fe 01       	movw	r30, r28
    168a:	e1 5a       	subi	r30, 0xA1	; 161
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	4a ef       	ldi	r20, 0xFA	; 250
    169c:	54 e4       	ldi	r21, 0x44	; 68
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	f8 01       	movw	r30, r16
    16a8:	80 83       	st	Z, r24
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	a2 83       	std	Z+2, r26	; 0x02
    16ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16b0:	fe 01       	movw	r30, r28
    16b2:	e5 5a       	subi	r30, 0xA5	; 165
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	44 f4       	brge	.+16     	; 0x16de <SmartDoor+0x4a6>
		__ticks = 1;
    16ce:	fe 01       	movw	r30, r28
    16d0:	e7 5a       	subi	r30, 0xA7	; 167
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	80 83       	st	Z, r24
    16dc:	64 c0       	rjmp	.+200    	; 0x17a6 <SmartDoor+0x56e>
	else if (__tmp > 65535)
    16de:	fe 01       	movw	r30, r28
    16e0:	e5 5a       	subi	r30, 0xA5	; 165
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	3f ef       	ldi	r19, 0xFF	; 255
    16f0:	4f e7       	ldi	r20, 0x7F	; 127
    16f2:	57 e4       	ldi	r21, 0x47	; 71
    16f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f8:	18 16       	cp	r1, r24
    16fa:	0c f0       	brlt	.+2      	; 0x16fe <SmartDoor+0x4c6>
    16fc:	43 c0       	rjmp	.+134    	; 0x1784 <SmartDoor+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	fe 01       	movw	r30, r28
    1700:	e1 5a       	subi	r30, 0xA1	; 161
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	60 81       	ld	r22, Z
    1706:	71 81       	ldd	r23, Z+1	; 0x01
    1708:	82 81       	ldd	r24, Z+2	; 0x02
    170a:	93 81       	ldd	r25, Z+3	; 0x03
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e2       	ldi	r20, 0x20	; 32
    1712:	51 e4       	ldi	r21, 0x41	; 65
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	8e 01       	movw	r16, r28
    171e:	07 5a       	subi	r16, 0xA7	; 167
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	bc 01       	movw	r22, r24
    1724:	cd 01       	movw	r24, r26
    1726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	f8 01       	movw	r30, r16
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
    1734:	1f c0       	rjmp	.+62     	; 0x1774 <SmartDoor+0x53c>
    1736:	fe 01       	movw	r30, r28
    1738:	e9 5a       	subi	r30, 0xA9	; 169
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	88 ec       	ldi	r24, 0xC8	; 200
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
    1744:	fe 01       	movw	r30, r28
    1746:	e9 5a       	subi	r30, 0xA9	; 169
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <SmartDoor+0x516>
    1752:	fe 01       	movw	r30, r28
    1754:	e9 5a       	subi	r30, 0xA9	; 169
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175c:	de 01       	movw	r26, r28
    175e:	a7 5a       	subi	r26, 0xA7	; 167
    1760:	bf 4f       	sbci	r27, 0xFF	; 255
    1762:	fe 01       	movw	r30, r28
    1764:	e7 5a       	subi	r30, 0xA7	; 167
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	11 96       	adiw	r26, 0x01	; 1
    1770:	9c 93       	st	X, r25
    1772:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1774:	fe 01       	movw	r30, r28
    1776:	e7 5a       	subi	r30, 0xA7	; 167
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	d1 f6       	brne	.-76     	; 0x1736 <SmartDoor+0x4fe>
    1782:	27 c0       	rjmp	.+78     	; 0x17d2 <SmartDoor+0x59a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1784:	8e 01       	movw	r16, r28
    1786:	07 5a       	subi	r16, 0xA7	; 167
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	fe 01       	movw	r30, r28
    178c:	e5 5a       	subi	r30, 0xA5	; 165
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	93 81       	ldd	r25, Z+3	; 0x03
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	f8 01       	movw	r30, r16
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	80 83       	st	Z, r24
    17a6:	de 01       	movw	r26, r28
    17a8:	ab 5a       	subi	r26, 0xAB	; 171
    17aa:	bf 4f       	sbci	r27, 0xFF	; 255
    17ac:	fe 01       	movw	r30, r28
    17ae:	e7 5a       	subi	r30, 0xA7	; 167
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	8d 93       	st	X+, r24
    17b8:	9c 93       	st	X, r25
    17ba:	fe 01       	movw	r30, r28
    17bc:	eb 5a       	subi	r30, 0xAB	; 171
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	80 81       	ld	r24, Z
    17c2:	91 81       	ldd	r25, Z+1	; 0x01
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <SmartDoor+0x58c>
    17c8:	fe 01       	movw	r30, r28
    17ca:	eb 5a       	subi	r30, 0xAB	; 171
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
	    		    _delay_ms(100);
	    		    LCD_VidSendCharPos('*',2,CHK_COUNT);
    17d2:	90 91 e0 00 	lds	r25, 0x00E0
    17d6:	8a e2       	ldi	r24, 0x2A	; 42
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	49 2f       	mov	r20, r25
    17dc:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_VidSendCharPos>
	    		    Check_pass[CHK_COUNT]=KPD_VALUE;
    17e0:	80 91 e0 00 	lds	r24, 0x00E0
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	20 91 c4 00 	lds	r18, 0x00C4
    17ec:	fc 01       	movw	r30, r24
    17ee:	e3 51       	subi	r30, 0x13	; 19
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	20 83       	st	Z, r18
	    /*CHECK PASSWORD*/
	    LCD_VidCLR();
	    _delay_ms(200);
	    LCD_VidSendStringPos("Check ur PASS ",1,1);
	    KPD_VALUE=KPD_CHEK;
	    while(KPD_VALUE != '&')
    17f4:	80 91 c4 00 	lds	r24, 0x00C4
    17f8:	86 32       	cpi	r24, 0x26	; 38
    17fa:	09 f0       	breq	.+2      	; 0x17fe <SmartDoor+0x5c6>
    17fc:	18 cf       	rjmp	.-464    	; 0x162e <SmartDoor+0x3f6>
	    		    Check_pass[CHK_COUNT]=KPD_VALUE;

	    		    }

	    /*Check password is correct or not*/
	    if(Checking_Pass(password,Check_pass,KPD_COUNTER))
    17fe:	40 91 df 00 	lds	r20, 0x00DF
    1802:	81 ee       	ldi	r24, 0xE1	; 225
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	2d ee       	ldi	r18, 0xED	; 237
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	b9 01       	movw	r22, r18
    180c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <Checking_Pass>
    1810:	88 23       	and	r24, r24
    1812:	09 f4       	brne	.+2      	; 0x1816 <SmartDoor+0x5de>
    1814:	f0 c3       	rjmp	.+2016   	; 0x1ff6 <SmartDoor+0xdbe>
	    	{
	    		     /*starting words */

	    		    LCD_VidCLR();
    1816:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidCLR>
	    		    LCD_VidSendStringPos("Succesfullogin",1,1);
    181a:	8b e8       	ldi	r24, 0x8B	; 139
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <LCD_VidSendStringPos>
	    		    for(u8 k=0;k<4;k++)
    182a:	fe 01       	movw	r30, r28
    182c:	ef 57       	subi	r30, 0x7F	; 127
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	10 82       	st	Z, r1
    1832:	c7 c0       	rjmp	.+398    	; 0x19c2 <SmartDoor+0x78a>
	    		    {
	    		     LCD_VidSendCharPos('.',1,k+8);
    1834:	fe 01       	movw	r30, r28
    1836:	ef 57       	subi	r30, 0x7F	; 127
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	98 2f       	mov	r25, r24
    183e:	98 5f       	subi	r25, 0xF8	; 248
    1840:	8e e2       	ldi	r24, 0x2E	; 46
    1842:	61 e0       	ldi	r22, 0x01	; 1
    1844:	49 2f       	mov	r20, r25
    1846:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_VidSendCharPos>
    184a:	fe 01       	movw	r30, r28
    184c:	ef 5a       	subi	r30, 0xAF	; 175
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	aa ef       	ldi	r26, 0xFA	; 250
    1856:	b3 e4       	ldi	r27, 0x43	; 67
    1858:	80 83       	st	Z, r24
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	a2 83       	std	Z+2, r26	; 0x02
    185e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	8e 01       	movw	r16, r28
    1862:	03 5b       	subi	r16, 0xB3	; 179
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	fe 01       	movw	r30, r28
    1868:	ef 5a       	subi	r30, 0xAF	; 175
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	4a ef       	ldi	r20, 0xFA	; 250
    187a:	54 e4       	ldi	r21, 0x44	; 68
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	f8 01       	movw	r30, r16
    1886:	80 83       	st	Z, r24
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	a2 83       	std	Z+2, r26	; 0x02
    188c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    188e:	fe 01       	movw	r30, r28
    1890:	e3 5b       	subi	r30, 0xB3	; 179
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	60 81       	ld	r22, Z
    1896:	71 81       	ldd	r23, Z+1	; 0x01
    1898:	82 81       	ldd	r24, Z+2	; 0x02
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e8       	ldi	r20, 0x80	; 128
    18a2:	5f e3       	ldi	r21, 0x3F	; 63
    18a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a8:	88 23       	and	r24, r24
    18aa:	44 f4       	brge	.+16     	; 0x18bc <SmartDoor+0x684>
		__ticks = 1;
    18ac:	fe 01       	movw	r30, r28
    18ae:	e5 5b       	subi	r30, 0xB5	; 181
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	64 c0       	rjmp	.+200    	; 0x1984 <SmartDoor+0x74c>
	else if (__tmp > 65535)
    18bc:	fe 01       	movw	r30, r28
    18be:	e3 5b       	subi	r30, 0xB3	; 179
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	0c f0       	brlt	.+2      	; 0x18dc <SmartDoor+0x6a4>
    18da:	43 c0       	rjmp	.+134    	; 0x1962 <SmartDoor+0x72a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18dc:	fe 01       	movw	r30, r28
    18de:	ef 5a       	subi	r30, 0xAF	; 175
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e2       	ldi	r20, 0x20	; 32
    18f0:	51 e4       	ldi	r21, 0x41	; 65
    18f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	8e 01       	movw	r16, r28
    18fc:	05 5b       	subi	r16, 0xB5	; 181
    18fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	f8 01       	movw	r30, r16
    190e:	91 83       	std	Z+1, r25	; 0x01
    1910:	80 83       	st	Z, r24
    1912:	1f c0       	rjmp	.+62     	; 0x1952 <SmartDoor+0x71a>
    1914:	fe 01       	movw	r30, r28
    1916:	e7 5b       	subi	r30, 0xB7	; 183
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	88 ec       	ldi	r24, 0xC8	; 200
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	80 83       	st	Z, r24
    1922:	fe 01       	movw	r30, r28
    1924:	e7 5b       	subi	r30, 0xB7	; 183
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <SmartDoor+0x6f4>
    1930:	fe 01       	movw	r30, r28
    1932:	e7 5b       	subi	r30, 0xB7	; 183
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193a:	de 01       	movw	r26, r28
    193c:	a5 5b       	subi	r26, 0xB5	; 181
    193e:	bf 4f       	sbci	r27, 0xFF	; 255
    1940:	fe 01       	movw	r30, r28
    1942:	e5 5b       	subi	r30, 0xB5	; 181
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	11 96       	adiw	r26, 0x01	; 1
    194e:	9c 93       	st	X, r25
    1950:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1952:	fe 01       	movw	r30, r28
    1954:	e5 5b       	subi	r30, 0xB5	; 181
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	80 81       	ld	r24, Z
    195a:	91 81       	ldd	r25, Z+1	; 0x01
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	d1 f6       	brne	.-76     	; 0x1914 <SmartDoor+0x6dc>
    1960:	27 c0       	rjmp	.+78     	; 0x19b0 <SmartDoor+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1962:	8e 01       	movw	r16, r28
    1964:	05 5b       	subi	r16, 0xB5	; 181
    1966:	1f 4f       	sbci	r17, 0xFF	; 255
    1968:	fe 01       	movw	r30, r28
    196a:	e3 5b       	subi	r30, 0xB3	; 179
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	f8 01       	movw	r30, r16
    1980:	91 83       	std	Z+1, r25	; 0x01
    1982:	80 83       	st	Z, r24
    1984:	de 01       	movw	r26, r28
    1986:	a9 5b       	subi	r26, 0xB9	; 185
    1988:	bf 4f       	sbci	r27, 0xFF	; 255
    198a:	fe 01       	movw	r30, r28
    198c:	e5 5b       	subi	r30, 0xB5	; 181
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 81       	ld	r24, Z
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	8d 93       	st	X+, r24
    1996:	9c 93       	st	X, r25
    1998:	fe 01       	movw	r30, r28
    199a:	e9 5b       	subi	r30, 0xB9	; 185
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 81       	ld	r24, Z
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <SmartDoor+0x76a>
    19a6:	fe 01       	movw	r30, r28
    19a8:	e9 5b       	subi	r30, 0xB9	; 185
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	80 83       	st	Z, r24
	    	{
	    		     /*starting words */

	    		    LCD_VidCLR();
	    		    LCD_VidSendStringPos("Succesfullogin",1,1);
	    		    for(u8 k=0;k<4;k++)
    19b0:	de 01       	movw	r26, r28
    19b2:	af 57       	subi	r26, 0x7F	; 127
    19b4:	bf 4f       	sbci	r27, 0xFF	; 255
    19b6:	fe 01       	movw	r30, r28
    19b8:	ef 57       	subi	r30, 0x7F	; 127
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	8f 5f       	subi	r24, 0xFF	; 255
    19c0:	8c 93       	st	X, r24
    19c2:	fe 01       	movw	r30, r28
    19c4:	ef 57       	subi	r30, 0x7F	; 127
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	84 30       	cpi	r24, 0x04	; 4
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <SmartDoor+0x798>
    19ce:	32 cf       	rjmp	.-412    	; 0x1834 <SmartDoor+0x5fc>
    19d0:	fe 01       	movw	r30, r28
    19d2:	ed 5b       	subi	r30, 0xBD	; 189
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a8 e4       	ldi	r26, 0x48	; 72
    19dc:	b3 e4       	ldi	r27, 0x43	; 67
    19de:	80 83       	st	Z, r24
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	a2 83       	std	Z+2, r26	; 0x02
    19e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	8e 01       	movw	r16, r28
    19e8:	01 5c       	subi	r16, 0xC1	; 193
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	fe 01       	movw	r30, r28
    19ee:	ed 5b       	subi	r30, 0xBD	; 189
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a ef       	ldi	r20, 0xFA	; 250
    1a00:	54 e4       	ldi	r21, 0x44	; 68
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	80 83       	st	Z, r24
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	a2 83       	std	Z+2, r26	; 0x02
    1a12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a14:	fe 01       	movw	r30, r28
    1a16:	ff 96       	adiw	r30, 0x3f	; 63
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	2c f4       	brge	.+10     	; 0x1a3a <SmartDoor+0x802>
		__ticks = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9e af       	std	Y+62, r25	; 0x3e
    1a36:	8d af       	std	Y+61, r24	; 0x3d
    1a38:	46 c0       	rjmp	.+140    	; 0x1ac6 <SmartDoor+0x88e>
	else if (__tmp > 65535)
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ff 96       	adiw	r30, 0x3f	; 63
    1a3e:	60 81       	ld	r22, Z
    1a40:	71 81       	ldd	r23, Z+1	; 0x01
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	64 f5       	brge	.+88     	; 0x1aae <SmartDoor+0x876>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	fe 01       	movw	r30, r28
    1a58:	ed 5b       	subi	r30, 0xBD	; 189
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	60 81       	ld	r22, Z
    1a5e:	71 81       	ldd	r23, Z+1	; 0x01
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e af       	std	Y+62, r25	; 0x3e
    1a82:	8d af       	std	Y+61, r24	; 0x3d
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <SmartDoor+0x86c>
    1a86:	88 ec       	ldi	r24, 0xC8	; 200
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9c af       	std	Y+60, r25	; 0x3c
    1a8c:	8b af       	std	Y+59, r24	; 0x3b
    1a8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a90:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <SmartDoor+0x85a>
    1a96:	9c af       	std	Y+60, r25	; 0x3c
    1a98:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	9e af       	std	Y+62, r25	; 0x3e
    1aa2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f7       	brne	.-38     	; 0x1a86 <SmartDoor+0x84e>
    1aac:	16 c0       	rjmp	.+44     	; 0x1ada <SmartDoor+0x8a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aae:	fe 01       	movw	r30, r28
    1ab0:	ff 96       	adiw	r30, 0x3f	; 63
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9e af       	std	Y+62, r25	; 0x3e
    1ac4:	8d af       	std	Y+61, r24	; 0x3d
    1ac6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ac8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aca:	9a af       	std	Y+58, r25	; 0x3a
    1acc:	89 af       	std	Y+57, r24	; 0x39
    1ace:	89 ad       	ldd	r24, Y+57	; 0x39
    1ad0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <SmartDoor+0x89a>
    1ad6:	9a af       	std	Y+58, r25	; 0x3a
    1ad8:	89 af       	std	Y+57, r24	; 0x39
	    		    {
	    		     LCD_VidSendCharPos('.',1,k+8);
	    		     _delay_ms(500);
	    		    }
	    		     _delay_ms(200);
	    		     LCD_VidCLR();
    1ada:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidCLR>
	    		     LCD_VidSendStringPos("Welcome..",1,1);
    1ade:	8a e9       	ldi	r24, 0x9A	; 154
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	61 e0       	ldi	r22, 0x01	; 1
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	41 e0       	ldi	r20, 0x01	; 1
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <LCD_VidSendStringPos>


	    		     /*Motor will open the Door*/
	    		     Motor();
    1aee:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <Motor>
    1af2:	81 c2       	rjmp	.+1282   	; 0x1ff6 <SmartDoor+0xdbe>

	}
	else
	{
		/*CHECK PASSWORD*/
			    LCD_VidCLR();
    1af4:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidCLR>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a8 e4       	ldi	r26, 0x48	; 72
    1afe:	b3 e4       	ldi	r27, 0x43	; 67
    1b00:	8d ab       	std	Y+53, r24	; 0x35
    1b02:	9e ab       	std	Y+54, r25	; 0x36
    1b04:	af ab       	std	Y+55, r26	; 0x37
    1b06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a ef       	ldi	r20, 0xFA	; 250
    1b16:	54 e4       	ldi	r21, 0x44	; 68
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	89 ab       	std	Y+49, r24	; 0x31
    1b22:	9a ab       	std	Y+50, r25	; 0x32
    1b24:	ab ab       	std	Y+51, r26	; 0x33
    1b26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b28:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e8       	ldi	r20, 0x80	; 128
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <SmartDoor+0x912>
		__ticks = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	98 ab       	std	Y+48, r25	; 0x30
    1b46:	8f a7       	std	Y+47, r24	; 0x2f
    1b48:	3f c0       	rjmp	.+126    	; 0x1bc8 <SmartDoor+0x990>
	else if (__tmp > 65535)
    1b4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b50:	9c a9       	ldd	r25, Y+52	; 0x34
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    1b56:	4f e7       	ldi	r20, 0x7F	; 127
    1b58:	57 e4       	ldi	r21, 0x47	; 71
    1b5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	4c f5       	brge	.+82     	; 0x1bb4 <SmartDoor+0x97c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	6d a9       	ldd	r22, Y+53	; 0x35
    1b64:	7e a9       	ldd	r23, Y+54	; 0x36
    1b66:	8f a9       	ldd	r24, Y+55	; 0x37
    1b68:	98 ad       	ldd	r25, Y+56	; 0x38
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	98 ab       	std	Y+48, r25	; 0x30
    1b88:	8f a7       	std	Y+47, r24	; 0x2f
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <SmartDoor+0x972>
    1b8c:	88 ec       	ldi	r24, 0xC8	; 200
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9e a7       	std	Y+46, r25	; 0x2e
    1b92:	8d a7       	std	Y+45, r24	; 0x2d
    1b94:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b96:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <SmartDoor+0x960>
    1b9c:	9e a7       	std	Y+46, r25	; 0x2e
    1b9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	98 ab       	std	Y+48, r25	; 0x30
    1ba8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bac:	98 a9       	ldd	r25, Y+48	; 0x30
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <SmartDoor+0x954>
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <SmartDoor+0x9a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bba:	9c a9       	ldd	r25, Y+52	; 0x34
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	98 ab       	std	Y+48, r25	; 0x30
    1bc6:	8f a7       	std	Y+47, r24	; 0x2f
    1bc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bca:	98 a9       	ldd	r25, Y+48	; 0x30
    1bcc:	9c a7       	std	Y+44, r25	; 0x2c
    1bce:	8b a7       	std	Y+43, r24	; 0x2b
    1bd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <SmartDoor+0x99c>
    1bd8:	9c a7       	std	Y+44, r25	; 0x2c
    1bda:	8b a7       	std	Y+43, r24	; 0x2b
			    _delay_ms(200);
			    LCD_VidSendStringPos("Enter ur PASS ",1,1);
    1bdc:	84 ea       	ldi	r24, 0xA4	; 164
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <LCD_VidSendStringPos>
			    KPD_VALUE=KPD_CHEK;
    1bec:	8f ef       	ldi	r24, 0xFF	; 255
    1bee:	80 93 c4 00 	sts	0x00C4, r24
    1bf2:	a2 c0       	rjmp	.+324    	; 0x1d38 <SmartDoor+0xb00>
			    while(KPD_VALUE != '&')
			    	{
			    		do{
			    		    KPD_VALUE=KPD_U8PressedKey();
    1bf4:	0e 94 91 10 	call	0x2122	; 0x2122 <KPD_U8PressedKey>
    1bf8:	80 93 c4 00 	sts	0x00C4, r24
			    		   }while(KPD_VALUE == KPD_CHEK );
    1bfc:	80 91 c4 00 	lds	r24, 0x00C4
    1c00:	8f 3f       	cpi	r24, 0xFF	; 255
    1c02:	c1 f3       	breq	.-16     	; 0x1bf4 <SmartDoor+0x9bc>
			    		    CHK_COUNT++;
    1c04:	80 91 e0 00 	lds	r24, 0x00E0
    1c08:	8f 5f       	subi	r24, 0xFF	; 255
    1c0a:	80 93 e0 00 	sts	0x00E0, r24
			    		    if(KPD_VALUE == '&') break;
    1c0e:	80 91 c4 00 	lds	r24, 0x00C4
    1c12:	86 32       	cpi	r24, 0x26	; 38
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <SmartDoor+0x9e0>
    1c16:	95 c0       	rjmp	.+298    	; 0x1d42 <SmartDoor+0xb0a>
			    		    LCD_VidSendNumberPos(KPD_VALUE,2,CHK_COUNT);
    1c18:	80 91 c4 00 	lds	r24, 0x00C4
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 e0       	ldi	r26, 0x00	; 0
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	20 91 e0 00 	lds	r18, 0x00E0
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	42 e0       	ldi	r20, 0x02	; 2
    1c2e:	0e 94 57 16 	call	0x2cae	; 0x2cae <LCD_VidSendNumberPos>
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a8 ec       	ldi	r26, 0xC8	; 200
    1c38:	b2 e4       	ldi	r27, 0x42	; 66
    1c3a:	8f a3       	std	Y+39, r24	; 0x27
    1c3c:	98 a7       	std	Y+40, r25	; 0x28
    1c3e:	a9 a7       	std	Y+41, r26	; 0x29
    1c40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c42:	6f a1       	ldd	r22, Y+39	; 0x27
    1c44:	78 a5       	ldd	r23, Y+40	; 0x28
    1c46:	89 a5       	ldd	r24, Y+41	; 0x29
    1c48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	4a ef       	ldi	r20, 0xFA	; 250
    1c50:	54 e4       	ldi	r21, 0x44	; 68
    1c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	8b a3       	std	Y+35, r24	; 0x23
    1c5c:	9c a3       	std	Y+36, r25	; 0x24
    1c5e:	ad a3       	std	Y+37, r26	; 0x25
    1c60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c62:	6b a1       	ldd	r22, Y+35	; 0x23
    1c64:	7c a1       	ldd	r23, Y+36	; 0x24
    1c66:	8d a1       	ldd	r24, Y+37	; 0x25
    1c68:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c76:	88 23       	and	r24, r24
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <SmartDoor+0xa4c>
		__ticks = 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9a a3       	std	Y+34, r25	; 0x22
    1c80:	89 a3       	std	Y+33, r24	; 0x21
    1c82:	3f c0       	rjmp	.+126    	; 0x1d02 <SmartDoor+0xaca>
	else if (__tmp > 65535)
    1c84:	6b a1       	ldd	r22, Y+35	; 0x23
    1c86:	7c a1       	ldd	r23, Y+36	; 0x24
    1c88:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	3f ef       	ldi	r19, 0xFF	; 255
    1c90:	4f e7       	ldi	r20, 0x7F	; 127
    1c92:	57 e4       	ldi	r21, 0x47	; 71
    1c94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c98:	18 16       	cp	r1, r24
    1c9a:	4c f5       	brge	.+82     	; 0x1cee <SmartDoor+0xab6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e2       	ldi	r20, 0x20	; 32
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9a a3       	std	Y+34, r25	; 0x22
    1cc2:	89 a3       	std	Y+33, r24	; 0x21
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <SmartDoor+0xaac>
    1cc6:	88 ec       	ldi	r24, 0xC8	; 200
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	98 a3       	std	Y+32, r25	; 0x20
    1ccc:	8f 8f       	std	Y+31, r24	; 0x1f
    1cce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd0:	98 a1       	ldd	r25, Y+32	; 0x20
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <SmartDoor+0xa9a>
    1cd6:	98 a3       	std	Y+32, r25	; 0x20
    1cd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cda:	89 a1       	ldd	r24, Y+33	; 0x21
    1cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	9a a3       	std	Y+34, r25	; 0x22
    1ce2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	69 f7       	brne	.-38     	; 0x1cc6 <SmartDoor+0xa8e>
    1cec:	14 c0       	rjmp	.+40     	; 0x1d16 <SmartDoor+0xade>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cee:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	9a a3       	std	Y+34, r25	; 0x22
    1d00:	89 a3       	std	Y+33, r24	; 0x21
    1d02:	89 a1       	ldd	r24, Y+33	; 0x21
    1d04:	9a a1       	ldd	r25, Y+34	; 0x22
    1d06:	9e 8f       	std	Y+30, r25	; 0x1e
    1d08:	8d 8f       	std	Y+29, r24	; 0x1d
    1d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <SmartDoor+0xad6>
    1d12:	9e 8f       	std	Y+30, r25	; 0x1e
    1d14:	8d 8f       	std	Y+29, r24	; 0x1d
			    		    _delay_ms(100);
			    		    LCD_VidSendCharPos('*',2,CHK_COUNT);
    1d16:	90 91 e0 00 	lds	r25, 0x00E0
    1d1a:	8a e2       	ldi	r24, 0x2A	; 42
    1d1c:	62 e0       	ldi	r22, 0x02	; 2
    1d1e:	49 2f       	mov	r20, r25
    1d20:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_VidSendCharPos>
			    		    Check_pass[CHK_COUNT]=KPD_VALUE;
    1d24:	80 91 e0 00 	lds	r24, 0x00E0
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	20 91 c4 00 	lds	r18, 0x00C4
    1d30:	fc 01       	movw	r30, r24
    1d32:	e3 51       	subi	r30, 0x13	; 19
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	20 83       	st	Z, r18
		/*CHECK PASSWORD*/
			    LCD_VidCLR();
			    _delay_ms(200);
			    LCD_VidSendStringPos("Enter ur PASS ",1,1);
			    KPD_VALUE=KPD_CHEK;
			    while(KPD_VALUE != '&')
    1d38:	80 91 c4 00 	lds	r24, 0x00C4
    1d3c:	86 32       	cpi	r24, 0x26	; 38
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <SmartDoor+0xb0a>
    1d40:	59 cf       	rjmp	.-334    	; 0x1bf4 <SmartDoor+0x9bc>
			    		    Check_pass[CHK_COUNT]=KPD_VALUE;

			       }

			    /*Check password is correct or not*/
			    u8 x=0;
    1d42:	fe 01       	movw	r30, r28
    1d44:	e0 58       	subi	r30, 0x80	; 128
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	10 82       	st	Z, r1
    1d4a:	4c c1       	rjmp	.+664    	; 0x1fe4 <SmartDoor+0xdac>
			    for(x;x<4;x++)
			    {
			    if(Check_pass[x]==EEPROM_U8ReadData(address[x]))
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e0 58       	subi	r30, 0x80	; 128
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e3 51       	subi	r30, 0x13	; 19
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	10 81       	ld	r17, Z
    1d60:	fe 01       	movw	r30, r28
    1d62:	e0 58       	subi	r30, 0x80	; 128
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	fc 01       	movw	r30, r24
    1d72:	e4 54       	subi	r30, 0x44	; 68
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	0e 94 07 10 	call	0x200e	; 0x200e <EEPROM_U8ReadData>
    1d7e:	18 17       	cp	r17, r24
    1d80:	49 f4       	brne	.+18     	; 0x1d94 <SmartDoor+0xb5c>
			    {
			    	x++;
    1d82:	de 01       	movw	r26, r28
    1d84:	a0 58       	subi	r26, 0x80	; 128
    1d86:	bf 4f       	sbci	r27, 0xFF	; 255
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e0 58       	subi	r30, 0x80	; 128
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	8c 93       	st	X, r24
			    }

			    if(x==4)
    1d94:	fe 01       	movw	r30, r28
    1d96:	e0 58       	subi	r30, 0x80	; 128
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	84 30       	cpi	r24, 0x04	; 4
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <SmartDoor+0xb6a>
    1da0:	18 c1       	rjmp	.+560    	; 0x1fd2 <SmartDoor+0xd9a>
			    {
			    	LCD_VidCLR();
    1da2:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidCLR>
			        LCD_VidSendStringPos("Succesfullogin",1,1);
    1da6:	8b e8       	ldi	r24, 0x8B	; 139
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <LCD_VidSendStringPos>
			        for(u8 k=0;k<4;k++)
    1db6:	fe 01       	movw	r30, r28
    1db8:	e1 58       	subi	r30, 0x81	; 129
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	10 82       	st	Z, r1
    1dbe:	86 c0       	rjmp	.+268    	; 0x1ecc <SmartDoor+0xc94>
			    	{
			    	 LCD_VidSendCharPos('.',1,k+8);
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e1 58       	subi	r30, 0x81	; 129
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	98 2f       	mov	r25, r24
    1dca:	98 5f       	subi	r25, 0xF8	; 248
    1dcc:	8e e2       	ldi	r24, 0x2E	; 46
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	49 2f       	mov	r20, r25
    1dd2:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_VidSendCharPos>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	aa ef       	ldi	r26, 0xFA	; 250
    1ddc:	b3 e4       	ldi	r27, 0x43	; 67
    1dde:	89 8f       	std	Y+25, r24	; 0x19
    1de0:	9a 8f       	std	Y+26, r25	; 0x1a
    1de2:	ab 8f       	std	Y+27, r26	; 0x1b
    1de4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	69 8d       	ldd	r22, Y+25	; 0x19
    1de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4a ef       	ldi	r20, 0xFA	; 250
    1df4:	54 e4       	ldi	r21, 0x44	; 68
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	8d 8b       	std	Y+21, r24	; 0x15
    1e00:	9e 8b       	std	Y+22, r25	; 0x16
    1e02:	af 8b       	std	Y+23, r26	; 0x17
    1e04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e06:	6d 89       	ldd	r22, Y+21	; 0x15
    1e08:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <SmartDoor+0xbf0>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9c 8b       	std	Y+20, r25	; 0x14
    1e24:	8b 8b       	std	Y+19, r24	; 0x13
    1e26:	3f c0       	rjmp	.+126    	; 0x1ea6 <SmartDoor+0xc6e>
	else if (__tmp > 65535)
    1e28:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	3f ef       	ldi	r19, 0xFF	; 255
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	57 e4       	ldi	r21, 0x47	; 71
    1e38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3c:	18 16       	cp	r1, r24
    1e3e:	4c f5       	brge	.+82     	; 0x1e92 <SmartDoor+0xc5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e40:	69 8d       	ldd	r22, Y+25	; 0x19
    1e42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e2       	ldi	r20, 0x20	; 32
    1e4e:	51 e4       	ldi	r21, 0x41	; 65
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9c 8b       	std	Y+20, r25	; 0x14
    1e66:	8b 8b       	std	Y+19, r24	; 0x13
    1e68:	0f c0       	rjmp	.+30     	; 0x1e88 <SmartDoor+0xc50>
    1e6a:	88 ec       	ldi	r24, 0xC8	; 200
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9a 8b       	std	Y+18, r25	; 0x12
    1e70:	89 8b       	std	Y+17, r24	; 0x11
    1e72:	89 89       	ldd	r24, Y+17	; 0x11
    1e74:	9a 89       	ldd	r25, Y+18	; 0x12
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <SmartDoor+0xc3e>
    1e7a:	9a 8b       	std	Y+18, r25	; 0x12
    1e7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e80:	9c 89       	ldd	r25, Y+20	; 0x14
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	9c 8b       	std	Y+20, r25	; 0x14
    1e86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e88:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	69 f7       	brne	.-38     	; 0x1e6a <SmartDoor+0xc32>
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <SmartDoor+0xc82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9c 8b       	std	Y+20, r25	; 0x14
    1ea4:	8b 8b       	std	Y+19, r24	; 0x13
    1ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eaa:	98 8b       	std	Y+16, r25	; 0x10
    1eac:	8f 87       	std	Y+15, r24	; 0x0f
    1eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb0:	98 89       	ldd	r25, Y+16	; 0x10
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <SmartDoor+0xc7a>
    1eb6:	98 8b       	std	Y+16, r25	; 0x10
    1eb8:	8f 87       	std	Y+15, r24	; 0x0f

			    if(x==4)
			    {
			    	LCD_VidCLR();
			        LCD_VidSendStringPos("Succesfullogin",1,1);
			        for(u8 k=0;k<4;k++)
    1eba:	de 01       	movw	r26, r28
    1ebc:	a1 58       	subi	r26, 0x81	; 129
    1ebe:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e1 58       	subi	r30, 0x81	; 129
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8f 5f       	subi	r24, 0xFF	; 255
    1eca:	8c 93       	st	X, r24
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e1 58       	subi	r30, 0x81	; 129
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	80 81       	ld	r24, Z
    1ed4:	84 30       	cpi	r24, 0x04	; 4
    1ed6:	08 f4       	brcc	.+2      	; 0x1eda <SmartDoor+0xca2>
    1ed8:	73 cf       	rjmp	.-282    	; 0x1dc0 <SmartDoor+0xb88>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a8 e4       	ldi	r26, 0x48	; 72
    1ee0:	b3 e4       	ldi	r27, 0x43	; 67
    1ee2:	8b 87       	std	Y+11, r24	; 0x0b
    1ee4:	9c 87       	std	Y+12, r25	; 0x0c
    1ee6:	ad 87       	std	Y+13, r26	; 0x0d
    1ee8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4a ef       	ldi	r20, 0xFA	; 250
    1ef8:	54 e4       	ldi	r21, 0x44	; 68
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	8f 83       	std	Y+7, r24	; 0x07
    1f04:	98 87       	std	Y+8, r25	; 0x08
    1f06:	a9 87       	std	Y+9, r26	; 0x09
    1f08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0c:	78 85       	ldd	r23, Y+8	; 0x08
    1f0e:	89 85       	ldd	r24, Y+9	; 0x09
    1f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e8       	ldi	r20, 0x80	; 128
    1f18:	5f e3       	ldi	r21, 0x3F	; 63
    1f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1e:	88 23       	and	r24, r24
    1f20:	2c f4       	brge	.+10     	; 0x1f2c <SmartDoor+0xcf4>
		__ticks = 1;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	3f c0       	rjmp	.+126    	; 0x1faa <SmartDoor+0xd72>
	else if (__tmp > 65535)
    1f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2e:	78 85       	ldd	r23, Y+8	; 0x08
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	3f ef       	ldi	r19, 0xFF	; 255
    1f38:	4f e7       	ldi	r20, 0x7F	; 127
    1f3a:	57 e4       	ldi	r21, 0x47	; 71
    1f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	4c f5       	brge	.+82     	; 0x1f96 <SmartDoor+0xd5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e2       	ldi	r20, 0x20	; 32
    1f52:	51 e4       	ldi	r21, 0x41	; 65
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <SmartDoor+0xd54>
    1f6e:	88 ec       	ldi	r24, 0xC8	; 200
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9c 83       	std	Y+4, r25	; 0x04
    1f74:	8b 83       	std	Y+3, r24	; 0x03
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <SmartDoor+0xd42>
    1f7e:	9c 83       	std	Y+4, r25	; 0x04
    1f80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	69 f7       	brne	.-38     	; 0x1f6e <SmartDoor+0xd36>
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <SmartDoor+0xd86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <SmartDoor+0xd7e>
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
			    	{
			    	 LCD_VidSendCharPos('.',1,k+8);
			         _delay_ms(500);
			        }
			    	_delay_ms(200);
			    	LCD_VidCLR();
    1fbe:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_VidCLR>
			        LCD_VidSendStringPos("Welcome..",1,1);
    1fc2:	8a e9       	ldi	r24, 0x9A	; 154
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <LCD_VidSendStringPos>

			       }

			    /*Check password is correct or not*/
			    u8 x=0;
			    for(x;x<4;x++)
    1fd2:	de 01       	movw	r26, r28
    1fd4:	a0 58       	subi	r26, 0x80	; 128
    1fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e0 58       	subi	r30, 0x80	; 128
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	8f 5f       	subi	r24, 0xFF	; 255
    1fe2:	8c 93       	st	X, r24
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e0 58       	subi	r30, 0x80	; 128
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	84 30       	cpi	r24, 0x04	; 4
    1fee:	08 f4       	brcc	.+2      	; 0x1ff2 <SmartDoor+0xdba>
    1ff0:	ad ce       	rjmp	.-678    	; 0x1d4c <SmartDoor+0xb14>
			    }

			    }

			     /*Motor will open the Door*/
			    Motor();
    1ff2:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <Motor>





}
    1ff6:	ce 57       	subi	r28, 0x7E	; 126
    1ff8:	df 4f       	sbci	r29, 0xFF	; 255
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <EEPROM_U8ReadData>:



u8 EEPROM_U8ReadData(u16 Copy_u16address)

{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <EEPROM_U8ReadData+0x6>
    2014:	0f 92       	push	r0
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	9b 83       	std	Y+3, r25	; 0x03
    201c:	8a 83       	std	Y+2, r24	; 0x02

	u8 Data=0;
    201e:	19 82       	std	Y+1, r1	; 0x01

	while(GET_BIT(EECR,EEWE));
    2020:	ec e3       	ldi	r30, 0x3C	; 60
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	86 95       	lsr	r24
    2028:	88 2f       	mov	r24, r24
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	81 70       	andi	r24, 0x01	; 1
    202e:	90 70       	andi	r25, 0x00	; 0
    2030:	88 23       	and	r24, r24
    2032:	b1 f7       	brne	.-20     	; 0x2020 <EEPROM_U8ReadData+0x12>

	/*Write new EEPROM address to EEAR (optional)*/
	EEARL=(u8) Copy_u16address;
    2034:	ee e3       	ldi	r30, 0x3E	; 62
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	80 83       	st	Z, r24
	EEARH=(u8)(Copy_u16address>>8);
    203c:	ef e3       	ldi	r30, 0x3F	; 63
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	9b 81       	ldd	r25, Y+3	; 0x03
    2044:	89 2f       	mov	r24, r25
    2046:	99 27       	eor	r25, r25
    2048:	80 83       	st	Z, r24

	/*start eeprom read operation*/
	SET_BIT(EECR,EERE);
    204a:	ac e3       	ldi	r26, 0x3C	; 60
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	ec e3       	ldi	r30, 0x3C	; 60
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	81 60       	ori	r24, 0x01	; 1
    2056:	8c 93       	st	X, r24

	Data = EEDR;
    2058:	ed e3       	ldi	r30, 0x3D	; 61
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	89 83       	std	Y+1, r24	; 0x01
	return Data;
    2060:	89 81       	ldd	r24, Y+1	; 0x01

}
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <EEPROM_VidWriteData>:

void EEPROM_VidWriteData(u16 Copy_u16address,u8 Copy_u8data)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	00 d0       	rcall	.+0      	; 0x2074 <EEPROM_VidWriteData+0x6>
    2074:	0f 92       	push	r0
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	6b 83       	std	Y+3, r22	; 0x03
	/*wait until EEWE Becomes 0*/
	while(GET_BIT(EECR,EEWE));
    2080:	ec e3       	ldi	r30, 0x3C	; 60
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	86 95       	lsr	r24
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	81 70       	andi	r24, 0x01	; 1
    208e:	90 70       	andi	r25, 0x00	; 0
    2090:	88 23       	and	r24, r24
    2092:	b1 f7       	brne	.-20     	; 0x2080 <EEPROM_VidWriteData+0x12>
   /*wait until that bit becomes 0*/
	while(GET_BIT(SPMCR,SPMEN));
    2094:	e7 e5       	ldi	r30, 0x57	; 87
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	81 70       	andi	r24, 0x01	; 1
    20a0:	90 70       	andi	r25, 0x00	; 0
    20a2:	88 23       	and	r24, r24
    20a4:	b9 f7       	brne	.-18     	; 0x2094 <EEPROM_VidWriteData+0x26>

	/*Write new EEPROM address to EEAR (optional)*/
	EEARL=(u8) Copy_u16address;
    20a6:	ee e3       	ldi	r30, 0x3E	; 62
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	80 83       	st	Z, r24
	EEARH=(u8)(Copy_u16address>>8);
    20ae:	ef e3       	ldi	r30, 0x3F	; 63
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	89 2f       	mov	r24, r25
    20b8:	99 27       	eor	r25, r25
    20ba:	80 83       	st	Z, r24
	/*Write new EEPROM address to EEDR (optional)*/
	EEDR=Copy_u8data;
    20bc:	ed e3       	ldi	r30, 0x3D	; 61
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	80 83       	st	Z, r24

	/* Write a logical one to the EEMWE bit while writing a zero to EEWE in EECR*/
	cli();
    20c4:	f8 94       	cli
	SET_BIT(EECR,EEMWE);
    20c6:	ac e3       	ldi	r26, 0x3C	; 60
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	ec e3       	ldi	r30, 0x3C	; 60
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	84 60       	ori	r24, 0x04	; 4
    20d2:	8c 93       	st	X, r24
	SET_BIT(EECR,EEWE);
    20d4:	ac e3       	ldi	r26, 0x3C	; 60
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	ec e3       	ldi	r30, 0x3C	; 60
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	82 60       	ori	r24, 0x02	; 2
    20e0:	8c 93       	st	X, r24

	//_delay_us(100);

	/*start eeprom write operation*/
	sei();
    20e2:	78 94       	sei



	/* Within four clock cycles after setting EEMWE, write a logical one to EEWE*/
	/*wait 4 cycles until reading finished*/
	while(GET_BIT(EECR,EEWE));
    20e4:	ec e3       	ldi	r30, 0x3C	; 60
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	86 95       	lsr	r24
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	81 70       	andi	r24, 0x01	; 1
    20f2:	90 70       	andi	r25, 0x00	; 0
    20f4:	88 23       	and	r24, r24
    20f6:	b1 f7       	brne	.-20     	; 0x20e4 <EEPROM_VidWriteData+0x76>



}
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <KPD_VidInit>:

u8 KPD_Au8_RowPins[4] = {KPD_R1_PIN , KPD_R2_PIN , KPD_R3_PIN , KPD_R4_PIN};
u8 KPD_Au8_ColPins[4] = {KPD_C1_PIN , KPD_C2_PIN , KPD_C3_PIN , KPD_C4_PIN};

void KPD_VidInit(void)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPortDirection(KPD_PORT,0x0f);
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	6f e0       	ldi	r22, 0x0F	; 15
    2110:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DIO_VidSetPortDirection>
	DIO_VidSetPortValue(KPD_PORT,0xff);
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	6f ef       	ldi	r22, 0xFF	; 255
    2118:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_VidSetPortValue>
}
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <KPD_U8PressedKey>:

u8 KPD_U8PressedKey(void)
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	63 97       	sbiw	r28, 0x13	; 19
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8CounterR,Local_U8CounterC,Local_U8Pressed,Local_U8Flag=0;
    2136:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_U8ReturnedKey=KPD_CHEK;
    2138:	8f ef       	ldi	r24, 0xFF	; 255
    213a:	8f 87       	std	Y+15, r24	; 0x0f

	for(Local_U8CounterR=0;Local_U8CounterR<4;Local_U8CounterR++)
    213c:	1b 8a       	std	Y+19, r1	; 0x13
    213e:	ce c0       	rjmp	.+412    	; 0x22dc <KPD_U8PressedKey+0x1ba>
	{
		DIO_VidSetPinValue(KPD_PORT,KPD_Au8_RowPins[Local_U8CounterR],DIO_LOW);
    2140:	8b 89       	ldd	r24, Y+19	; 0x13
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	fc 01       	movw	r30, r24
    2148:	eb 52       	subi	r30, 0x2B	; 43
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	90 81       	ld	r25, Z
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	69 2f       	mov	r22, r25
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		for(Local_U8CounterC=0;Local_U8CounterC<4;Local_U8CounterC++)
    2158:	1a 8a       	std	Y+18, r1	; 0x12
    215a:	aa c0       	rjmp	.+340    	; 0x22b0 <KPD_U8PressedKey+0x18e>
		{
			Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_Au8_ColPins[Local_U8CounterC]);
    215c:	8a 89       	ldd	r24, Y+18	; 0x12
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	fc 01       	movw	r30, r24
    2164:	e7 52       	subi	r30, 0x27	; 39
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	90 81       	ld	r25, Z
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	69 2f       	mov	r22, r25
    216e:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_U8GetPinValue>
    2172:	89 8b       	std	Y+17, r24	; 0x11
			if(Local_U8Pressed==DIO_LOW)
    2174:	89 89       	ldd	r24, Y+17	; 0x11
    2176:	88 23       	and	r24, r24
    2178:	09 f0       	breq	.+2      	; 0x217c <KPD_U8PressedKey+0x5a>
    217a:	97 c0       	rjmp	.+302    	; 0x22aa <KPD_U8PressedKey+0x188>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 ea       	ldi	r26, 0xA0	; 160
    2182:	b1 e4       	ldi	r27, 0x41	; 65
    2184:	8b 87       	std	Y+11, r24	; 0x0b
    2186:	9c 87       	std	Y+12, r25	; 0x0c
    2188:	ad 87       	std	Y+13, r26	; 0x0d
    218a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	6b 85       	ldd	r22, Y+11	; 0x0b
    218e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2190:	8d 85       	ldd	r24, Y+13	; 0x0d
    2192:	9e 85       	ldd	r25, Y+14	; 0x0e
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a ef       	ldi	r20, 0xFA	; 250
    219a:	54 e4       	ldi	r21, 0x44	; 68
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	8f 83       	std	Y+7, r24	; 0x07
    21a6:	98 87       	std	Y+8, r25	; 0x08
    21a8:	a9 87       	std	Y+9, r26	; 0x09
    21aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	2c f4       	brge	.+10     	; 0x21ce <KPD_U8PressedKey+0xac>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <KPD_U8PressedKey+0x12a>
	else if (__tmp > 65535)
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	4c f5       	brge	.+82     	; 0x2238 <KPD_U8PressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	0f c0       	rjmp	.+30     	; 0x222e <KPD_U8PressedKey+0x10c>
    2210:	88 ec       	ldi	r24, 0xC8	; 200
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <KPD_U8PressedKey+0xfa>
    2220:	9c 83       	std	Y+4, r25	; 0x04
    2222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	8d 81       	ldd	r24, Y+5	; 0x05
    2226:	9e 81       	ldd	r25, Y+6	; 0x06
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	9e 83       	std	Y+6, r25	; 0x06
    222c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	69 f7       	brne	.-38     	; 0x2210 <KPD_U8PressedKey+0xee>
    2236:	21 c0       	rjmp	.+66     	; 0x227a <KPD_U8PressedKey+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	6f 81       	ldd	r22, Y+7	; 0x07
    223a:	78 85       	ldd	r23, Y+8	; 0x08
    223c:	89 85       	ldd	r24, Y+9	; 0x09
    223e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <KPD_U8PressedKey+0x136>
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	0c c0       	rjmp	.+24     	; 0x227a <KPD_U8PressedKey+0x158>
			{
				_delay_ms(20);
				while(Local_U8Pressed==DIO_LOW)
				{
					Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_Au8_ColPins[Local_U8CounterC]);
    2262:	8a 89       	ldd	r24, Y+18	; 0x12
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	fc 01       	movw	r30, r24
    226a:	e7 52       	subi	r30, 0x27	; 39
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	90 81       	ld	r25, Z
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	69 2f       	mov	r22, r25
    2274:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_U8GetPinValue>
    2278:	89 8b       	std	Y+17, r24	; 0x11
		{
			Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_Au8_ColPins[Local_U8CounterC]);
			if(Local_U8Pressed==DIO_LOW)
			{
				_delay_ms(20);
				while(Local_U8Pressed==DIO_LOW)
    227a:	89 89       	ldd	r24, Y+17	; 0x11
    227c:	88 23       	and	r24, r24
    227e:	89 f3       	breq	.-30     	; 0x2262 <KPD_U8PressedKey+0x140>
				{
					Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_Au8_ColPins[Local_U8CounterC]);
				}
				Local_U8ReturnedKey=KPD_Au8Keys[Local_U8CounterR][Local_U8CounterC];
    2280:	8b 89       	ldd	r24, Y+19	; 0x13
    2282:	48 2f       	mov	r20, r24
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	8a 89       	ldd	r24, Y+18	; 0x12
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	ca 01       	movw	r24, r20
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	82 0f       	add	r24, r18
    2298:	93 1f       	adc	r25, r19
    229a:	fc 01       	movw	r30, r24
    229c:	eb 53       	subi	r30, 0x3B	; 59
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	8f 87       	std	Y+15, r24	; 0x0f
				Local_U8Flag=1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	88 8b       	std	Y+16, r24	; 0x10
    22a8:	07 c0       	rjmp	.+14     	; 0x22b8 <KPD_U8PressedKey+0x196>
	u8 Local_U8ReturnedKey=KPD_CHEK;

	for(Local_U8CounterR=0;Local_U8CounterR<4;Local_U8CounterR++)
	{
		DIO_VidSetPinValue(KPD_PORT,KPD_Au8_RowPins[Local_U8CounterR],DIO_LOW);
		for(Local_U8CounterC=0;Local_U8CounterC<4;Local_U8CounterC++)
    22aa:	8a 89       	ldd	r24, Y+18	; 0x12
    22ac:	8f 5f       	subi	r24, 0xFF	; 255
    22ae:	8a 8b       	std	Y+18, r24	; 0x12
    22b0:	8a 89       	ldd	r24, Y+18	; 0x12
    22b2:	84 30       	cpi	r24, 0x04	; 4
    22b4:	08 f4       	brcc	.+2      	; 0x22b8 <KPD_U8PressedKey+0x196>
    22b6:	52 cf       	rjmp	.-348    	; 0x215c <KPD_U8PressedKey+0x3a>
				Local_U8ReturnedKey=KPD_Au8Keys[Local_U8CounterR][Local_U8CounterC];
				Local_U8Flag=1;
				break;
			}
		}
		DIO_VidSetPinValue(KPD_PORT,KPD_Au8_RowPins[Local_U8CounterR],DIO_HIGH);
    22b8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	fc 01       	movw	r30, r24
    22c0:	eb 52       	subi	r30, 0x2B	; 43
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	90 81       	ld	r25, Z
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	69 2f       	mov	r22, r25
    22ca:	41 e0       	ldi	r20, 0x01	; 1
    22cc:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		if(Local_U8Flag==1)break;
    22d0:	88 89       	ldd	r24, Y+16	; 0x10
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	39 f0       	breq	.+14     	; 0x22e4 <KPD_U8PressedKey+0x1c2>
u8 KPD_U8PressedKey(void)
{
	u8 Local_U8CounterR,Local_U8CounterC,Local_U8Pressed,Local_U8Flag=0;
	u8 Local_U8ReturnedKey=KPD_CHEK;

	for(Local_U8CounterR=0;Local_U8CounterR<4;Local_U8CounterR++)
    22d6:	8b 89       	ldd	r24, Y+19	; 0x13
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	8b 8b       	std	Y+19, r24	; 0x13
    22dc:	8b 89       	ldd	r24, Y+19	; 0x13
    22de:	84 30       	cpi	r24, 0x04	; 4
    22e0:	08 f4       	brcc	.+2      	; 0x22e4 <KPD_U8PressedKey+0x1c2>
    22e2:	2e cf       	rjmp	.-420    	; 0x2140 <KPD_U8PressedKey+0x1e>
		}
		DIO_VidSetPinValue(KPD_PORT,KPD_Au8_RowPins[Local_U8CounterR],DIO_HIGH);
		if(Local_U8Flag==1)break;
	}

	return Local_U8ReturnedKey;
    22e4:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    22e6:	63 96       	adiw	r28, 0x13	; 19
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <Checking_Pass>:


u8 Checking_Pass(u8 Copy_U8arr1[],u8 Copy_U8arr2[],u8 CopyU8Number_Of_Digits)
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	28 97       	sbiw	r28, 0x08	; 8
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	9c 83       	std	Y+4, r25	; 0x04
    230e:	8b 83       	std	Y+3, r24	; 0x03
    2310:	7e 83       	std	Y+6, r23	; 0x06
    2312:	6d 83       	std	Y+5, r22	; 0x05
    2314:	4f 83       	std	Y+7, r20	; 0x07
	u8 x=0,Internal_Counter=0;
    2316:	1a 82       	std	Y+2, r1	; 0x02
    2318:	19 82       	std	Y+1, r1	; 0x01
    231a:	1a c0       	rjmp	.+52     	; 0x2350 <Checking_Pass+0x58>
	for(x;x<CopyU8Number_Of_Digits-1;x++)
	{
		if(Copy_U8arr1[x] == Copy_U8arr2[x])
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	fc 01       	movw	r30, r24
    2328:	e2 0f       	add	r30, r18
    232a:	f3 1f       	adc	r31, r19
    232c:	40 81       	ld	r20, Z
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	fc 01       	movw	r30, r24
    233a:	e2 0f       	add	r30, r18
    233c:	f3 1f       	adc	r31, r19
    233e:	80 81       	ld	r24, Z
    2340:	48 17       	cp	r20, r24
    2342:	19 f4       	brne	.+6      	; 0x234a <Checking_Pass+0x52>
		{
			Internal_Counter++;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	8f 5f       	subi	r24, 0xFF	; 255
    2348:	89 83       	std	Y+1, r24	; 0x01


u8 Checking_Pass(u8 Copy_U8arr1[],u8 Copy_U8arr2[],u8 CopyU8Number_Of_Digits)
{
	u8 x=0,Internal_Counter=0;
	for(x;x<CopyU8Number_Of_Digits-1;x++)
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	8a 83       	std	Y+2, r24	; 0x02
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	8f 81       	ldd	r24, Y+7	; 0x07
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	28 17       	cp	r18, r24
    2360:	39 07       	cpc	r19, r25
    2362:	e4 f2       	brlt	.-72     	; 0x231c <Checking_Pass+0x24>
		{
			Internal_Counter++;
		}

	}
	if(Internal_Counter == CopyU8Number_Of_Digits-1 )
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	8f 81       	ldd	r24, Y+7	; 0x07
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	28 17       	cp	r18, r24
    2374:	39 07       	cpc	r19, r25
    2376:	19 f4       	brne	.+6      	; 0x237e <Checking_Pass+0x86>
		return 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	88 87       	std	Y+8, r24	; 0x08
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <Checking_Pass+0x88>
	else
		return 0;
    237e:	18 86       	std	Y+8, r1	; 0x08
    2380:	88 85       	ldd	r24, Y+8	; 0x08
}
    2382:	28 96       	adiw	r28, 0x08	; 8
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <LCD_VidSendCMD>:
#include"DIO_Interface.h"
#include"LCD.h"


void LCD_VidSendCMD(u8 Copy_U8CMD)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	2f 97       	sbiw	r28, 0x0f	; 15
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPinValue(LCD_CMD_PORT,RS,0);
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	65 e0       	ldi	r22, 0x05	; 5
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,RW,0);
    23b4:	83 e0       	ldi	r24, 0x03	; 3
    23b6:	66 e0       	ldi	r22, 0x06	; 6
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8CMD);
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    23c2:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_VidSetPortValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,1);
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	67 e0       	ldi	r22, 0x07	; 7
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a0 e8       	ldi	r26, 0x80	; 128
    23d6:	bf e3       	ldi	r27, 0x3F	; 63
    23d8:	8b 87       	std	Y+11, r24	; 0x0b
    23da:	9c 87       	std	Y+12, r25	; 0x0c
    23dc:	ad 87       	std	Y+13, r26	; 0x0d
    23de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4a ef       	ldi	r20, 0xFA	; 250
    23ee:	54 e4       	ldi	r21, 0x44	; 68
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	8f 83       	std	Y+7, r24	; 0x07
    23fa:	98 87       	std	Y+8, r25	; 0x08
    23fc:	a9 87       	std	Y+9, r26	; 0x09
    23fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2400:	6f 81       	ldd	r22, Y+7	; 0x07
    2402:	78 85       	ldd	r23, Y+8	; 0x08
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	2c f4       	brge	.+10     	; 0x2422 <LCD_VidSendCMD+0x8e>
		__ticks = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
    2420:	3f c0       	rjmp	.+126    	; 0x24a0 <LCD_VidSendCMD+0x10c>
	else if (__tmp > 65535)
    2422:	6f 81       	ldd	r22, Y+7	; 0x07
    2424:	78 85       	ldd	r23, Y+8	; 0x08
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	4c f5       	brge	.+82     	; 0x248c <LCD_VidSendCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243a:	6b 85       	ldd	r22, Y+11	; 0x0b
    243c:	7c 85       	ldd	r23, Y+12	; 0x0c
    243e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2440:	9e 85       	ldd	r25, Y+14	; 0x0e
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e2       	ldi	r20, 0x20	; 32
    2448:	51 e4       	ldi	r21, 0x41	; 65
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <LCD_VidSendCMD+0xee>
    2464:	88 ec       	ldi	r24, 0xC8	; 200
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9c 83       	std	Y+4, r25	; 0x04
    246a:	8b 83       	std	Y+3, r24	; 0x03
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_VidSendCMD+0xdc>
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	9e 81       	ldd	r25, Y+6	; 0x06
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	69 f7       	brne	.-38     	; 0x2464 <LCD_VidSendCMD+0xd0>
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <LCD_VidSendCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	6f 81       	ldd	r22, Y+7	; 0x07
    248e:	78 85       	ldd	r23, Y+8	; 0x08
    2490:	89 85       	ldd	r24, Y+9	; 0x09
    2492:	9a 85       	ldd	r25, Y+10	; 0x0a
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9e 83       	std	Y+6, r25	; 0x06
    249e:	8d 83       	std	Y+5, r24	; 0x05
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	9e 81       	ldd	r25, Y+6	; 0x06
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	9a 81       	ldd	r25, Y+2	; 0x02
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <LCD_VidSendCMD+0x118>
    24b0:	9a 83       	std	Y+2, r25	; 0x02
    24b2:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(1);
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,0);
    24b4:	83 e0       	ldi	r24, 0x03	; 3
    24b6:	67 e0       	ldi	r22, 0x07	; 7
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
}
    24be:	2f 96       	adiw	r28, 0x0f	; 15
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <LCD_VidSendData>:



void LCD_VidSendData(u8 Copy_U8Data)
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	2f 97       	sbiw	r28, 0x0f	; 15
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPinValue(LCD_CMD_PORT,RS,1);
    24e6:	83 e0       	ldi	r24, 0x03	; 3
    24e8:	65 e0       	ldi	r22, 0x05	; 5
    24ea:	41 e0       	ldi	r20, 0x01	; 1
    24ec:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,RW,0);
    24f0:	83 e0       	ldi	r24, 0x03	; 3
    24f2:	66 e0       	ldi	r22, 0x06	; 6
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8Data);
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    24fe:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_VidSetPortValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,1);
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	67 e0       	ldi	r22, 0x07	; 7
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 e8       	ldi	r26, 0x80	; 128
    2512:	bf e3       	ldi	r27, 0x3F	; 63
    2514:	8b 87       	std	Y+11, r24	; 0x0b
    2516:	9c 87       	std	Y+12, r25	; 0x0c
    2518:	ad 87       	std	Y+13, r26	; 0x0d
    251a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251c:	6b 85       	ldd	r22, Y+11	; 0x0b
    251e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	9e 85       	ldd	r25, Y+14	; 0x0e
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a ef       	ldi	r20, 0xFA	; 250
    252a:	54 e4       	ldi	r21, 0x44	; 68
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8f 83       	std	Y+7, r24	; 0x07
    2536:	98 87       	std	Y+8, r25	; 0x08
    2538:	a9 87       	std	Y+9, r26	; 0x09
    253a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	2c f4       	brge	.+10     	; 0x255e <LCD_VidSendData+0x8e>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2572:	18 16       	cp	r1, r24
    2574:	4c f5       	brge	.+82     	; 0x25c8 <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2576:	6b 85       	ldd	r22, Y+11	; 0x0b
    2578:	7c 85       	ldd	r23, Y+12	; 0x0c
    257a:	8d 85       	ldd	r24, Y+13	; 0x0d
    257c:	9e 85       	ldd	r25, Y+14	; 0x0e
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	0f c0       	rjmp	.+30     	; 0x25be <LCD_VidSendData+0xee>
    25a0:	88 ec       	ldi	r24, 0xC8	; 200
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 83       	std	Y+4, r25	; 0x04
    25a6:	8b 83       	std	Y+3, r24	; 0x03
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LCD_VidSendData+0xdc>
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <LCD_VidSendData+0xd0>
    25c6:	14 c0       	rjmp	.+40     	; 0x25f0 <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ca:	78 85       	ldd	r23, Y+8	; 0x08
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	8d 81       	ldd	r24, Y+5	; 0x05
    25de:	9e 81       	ldd	r25, Y+6	; 0x06
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <LCD_VidSendData+0x118>
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(1);
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,0);
    25f0:	83 e0       	ldi	r24, 0x03	; 3
    25f2:	67 e0       	ldi	r22, 0x07	; 7
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
}
    25fa:	2f 96       	adiw	r28, 0x0f	; 15
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <LCD_VidSendString>:

}*/


void LCD_VidSendString(u8 *Copy_U8String)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	00 d0       	rcall	.+0      	; 0x2612 <LCD_VidSendString+0x6>
    2612:	0f 92       	push	r0
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	9b 83       	std	Y+3, r25	; 0x03
    261a:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter = 0 ;
    261c:	19 82       	std	Y+1, r1	; 0x01
    261e:	0e c0       	rjmp	.+28     	; 0x263c <LCD_VidSendString+0x30>
	while(Copy_U8String[counter] !='\0')
	{
		LCD_VidSendData(Copy_U8String[counter]);
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	28 2f       	mov	r18, r24
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	9b 81       	ldd	r25, Y+3	; 0x03
    262a:	fc 01       	movw	r30, r24
    262c:	e2 0f       	add	r30, r18
    262e:	f3 1f       	adc	r31, r19
    2630:	80 81       	ld	r24, Z
    2632:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCD_VidSendData>
		counter++;
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	8f 5f       	subi	r24, 0xFF	; 255
    263a:	89 83       	std	Y+1, r24	; 0x01


void LCD_VidSendString(u8 *Copy_U8String)
{
	u8 counter = 0 ;
	while(Copy_U8String[counter] !='\0')
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	9b 81       	ldd	r25, Y+3	; 0x03
    2646:	fc 01       	movw	r30, r24
    2648:	e2 0f       	add	r30, r18
    264a:	f3 1f       	adc	r31, r19
    264c:	80 81       	ld	r24, Z
    264e:	88 23       	and	r24, r24
    2650:	39 f7       	brne	.-50     	; 0x2620 <LCD_VidSendString+0x14>
	{
		LCD_VidSendData(Copy_U8String[counter]);
		counter++;
	}
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <LCD_VidInit>:




void LCD_VidInit(void)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	e8 97       	sbiw	r28, 0x38	; 56
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_DATA_PORT,0xff);
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	6f ef       	ldi	r22, 0xFF	; 255
    2676:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DIO_VidSetPortDirection>

	DIO_VidSetPinDirection(LCD_CMD_PORT,RS,DIO_OUTPUT);
    267a:	83 e0       	ldi	r24, 0x03	; 3
    267c:	65 e0       	ldi	r22, 0x05	; 5
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CMD_PORT,RW,DIO_OUTPUT);
    2684:	83 e0       	ldi	r24, 0x03	; 3
    2686:	66 e0       	ldi	r22, 0x06	; 6
    2688:	41 e0       	ldi	r20, 0x01	; 1
    268a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CMD_PORT,EN,DIO_OUTPUT);
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	67 e0       	ldi	r22, 0x07	; 7
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	ac e0       	ldi	r26, 0x0C	; 12
    269e:	b2 e4       	ldi	r27, 0x42	; 66
    26a0:	8d ab       	std	Y+53, r24	; 0x35
    26a2:	9e ab       	std	Y+54, r25	; 0x36
    26a4:	af ab       	std	Y+55, r26	; 0x37
    26a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a8:	6d a9       	ldd	r22, Y+53	; 0x35
    26aa:	7e a9       	ldd	r23, Y+54	; 0x36
    26ac:	8f a9       	ldd	r24, Y+55	; 0x37
    26ae:	98 ad       	ldd	r25, Y+56	; 0x38
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	4a ef       	ldi	r20, 0xFA	; 250
    26b6:	54 e4       	ldi	r21, 0x44	; 68
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	89 ab       	std	Y+49, r24	; 0x31
    26c2:	9a ab       	std	Y+50, r25	; 0x32
    26c4:	ab ab       	std	Y+51, r26	; 0x33
    26c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26c8:	69 a9       	ldd	r22, Y+49	; 0x31
    26ca:	7a a9       	ldd	r23, Y+50	; 0x32
    26cc:	8b a9       	ldd	r24, Y+51	; 0x33
    26ce:	9c a9       	ldd	r25, Y+52	; 0x34
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	5f e3       	ldi	r21, 0x3F	; 63
    26d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26dc:	88 23       	and	r24, r24
    26de:	2c f4       	brge	.+10     	; 0x26ea <LCD_VidInit+0x8c>
		__ticks = 1;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	98 ab       	std	Y+48, r25	; 0x30
    26e6:	8f a7       	std	Y+47, r24	; 0x2f
    26e8:	3f c0       	rjmp	.+126    	; 0x2768 <LCD_VidInit+0x10a>
	else if (__tmp > 65535)
    26ea:	69 a9       	ldd	r22, Y+49	; 0x31
    26ec:	7a a9       	ldd	r23, Y+50	; 0x32
    26ee:	8b a9       	ldd	r24, Y+51	; 0x33
    26f0:	9c a9       	ldd	r25, Y+52	; 0x34
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	3f ef       	ldi	r19, 0xFF	; 255
    26f6:	4f e7       	ldi	r20, 0x7F	; 127
    26f8:	57 e4       	ldi	r21, 0x47	; 71
    26fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26fe:	18 16       	cp	r1, r24
    2700:	4c f5       	brge	.+82     	; 0x2754 <LCD_VidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2702:	6d a9       	ldd	r22, Y+53	; 0x35
    2704:	7e a9       	ldd	r23, Y+54	; 0x36
    2706:	8f a9       	ldd	r24, Y+55	; 0x37
    2708:	98 ad       	ldd	r25, Y+56	; 0x38
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e2       	ldi	r20, 0x20	; 32
    2710:	51 e4       	ldi	r21, 0x41	; 65
    2712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	98 ab       	std	Y+48, r25	; 0x30
    2728:	8f a7       	std	Y+47, r24	; 0x2f
    272a:	0f c0       	rjmp	.+30     	; 0x274a <LCD_VidInit+0xec>
    272c:	88 ec       	ldi	r24, 0xC8	; 200
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9e a7       	std	Y+46, r25	; 0x2e
    2732:	8d a7       	std	Y+45, r24	; 0x2d
    2734:	8d a5       	ldd	r24, Y+45	; 0x2d
    2736:	9e a5       	ldd	r25, Y+46	; 0x2e
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <LCD_VidInit+0xda>
    273c:	9e a7       	std	Y+46, r25	; 0x2e
    273e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2740:	8f a5       	ldd	r24, Y+47	; 0x2f
    2742:	98 a9       	ldd	r25, Y+48	; 0x30
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	98 ab       	std	Y+48, r25	; 0x30
    2748:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274a:	8f a5       	ldd	r24, Y+47	; 0x2f
    274c:	98 a9       	ldd	r25, Y+48	; 0x30
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	69 f7       	brne	.-38     	; 0x272c <LCD_VidInit+0xce>
    2752:	14 c0       	rjmp	.+40     	; 0x277c <LCD_VidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2754:	69 a9       	ldd	r22, Y+49	; 0x31
    2756:	7a a9       	ldd	r23, Y+50	; 0x32
    2758:	8b a9       	ldd	r24, Y+51	; 0x33
    275a:	9c a9       	ldd	r25, Y+52	; 0x34
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	98 ab       	std	Y+48, r25	; 0x30
    2766:	8f a7       	std	Y+47, r24	; 0x2f
    2768:	8f a5       	ldd	r24, Y+47	; 0x2f
    276a:	98 a9       	ldd	r25, Y+48	; 0x30
    276c:	9c a7       	std	Y+44, r25	; 0x2c
    276e:	8b a7       	std	Y+43, r24	; 0x2b
    2770:	8b a5       	ldd	r24, Y+43	; 0x2b
    2772:	9c a5       	ldd	r25, Y+44	; 0x2c
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <LCD_VidInit+0x116>
    2778:	9c a7       	std	Y+44, r25	; 0x2c
    277a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);
	LCD_VidSendCMD(LCD_FUNC_SET);
    277c:	88 e3       	ldi	r24, 0x38	; 56
    277e:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_VidSendCMD>
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	a0 e8       	ldi	r26, 0x80	; 128
    2788:	bf e3       	ldi	r27, 0x3F	; 63
    278a:	8f a3       	std	Y+39, r24	; 0x27
    278c:	98 a7       	std	Y+40, r25	; 0x28
    278e:	a9 a7       	std	Y+41, r26	; 0x29
    2790:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2792:	6f a1       	ldd	r22, Y+39	; 0x27
    2794:	78 a5       	ldd	r23, Y+40	; 0x28
    2796:	89 a5       	ldd	r24, Y+41	; 0x29
    2798:	9a a5       	ldd	r25, Y+42	; 0x2a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4a ef       	ldi	r20, 0xFA	; 250
    27a0:	54 e4       	ldi	r21, 0x44	; 68
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	8b a3       	std	Y+35, r24	; 0x23
    27ac:	9c a3       	std	Y+36, r25	; 0x24
    27ae:	ad a3       	std	Y+37, r26	; 0x25
    27b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27b2:	6b a1       	ldd	r22, Y+35	; 0x23
    27b4:	7c a1       	ldd	r23, Y+36	; 0x24
    27b6:	8d a1       	ldd	r24, Y+37	; 0x25
    27b8:	9e a1       	ldd	r25, Y+38	; 0x26
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e8       	ldi	r20, 0x80	; 128
    27c0:	5f e3       	ldi	r21, 0x3F	; 63
    27c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c6:	88 23       	and	r24, r24
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <LCD_VidInit+0x176>
		__ticks = 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9a a3       	std	Y+34, r25	; 0x22
    27d0:	89 a3       	std	Y+33, r24	; 0x21
    27d2:	3f c0       	rjmp	.+126    	; 0x2852 <LCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    27d4:	6b a1       	ldd	r22, Y+35	; 0x23
    27d6:	7c a1       	ldd	r23, Y+36	; 0x24
    27d8:	8d a1       	ldd	r24, Y+37	; 0x25
    27da:	9e a1       	ldd	r25, Y+38	; 0x26
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	3f ef       	ldi	r19, 0xFF	; 255
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	57 e4       	ldi	r21, 0x47	; 71
    27e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e8:	18 16       	cp	r1, r24
    27ea:	4c f5       	brge	.+82     	; 0x283e <LCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ec:	6f a1       	ldd	r22, Y+39	; 0x27
    27ee:	78 a5       	ldd	r23, Y+40	; 0x28
    27f0:	89 a5       	ldd	r24, Y+41	; 0x29
    27f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e2       	ldi	r20, 0x20	; 32
    27fa:	51 e4       	ldi	r21, 0x41	; 65
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9a a3       	std	Y+34, r25	; 0x22
    2812:	89 a3       	std	Y+33, r24	; 0x21
    2814:	0f c0       	rjmp	.+30     	; 0x2834 <LCD_VidInit+0x1d6>
    2816:	88 ec       	ldi	r24, 0xC8	; 200
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	98 a3       	std	Y+32, r25	; 0x20
    281c:	8f 8f       	std	Y+31, r24	; 0x1f
    281e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2820:	98 a1       	ldd	r25, Y+32	; 0x20
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_VidInit+0x1c4>
    2826:	98 a3       	std	Y+32, r25	; 0x20
    2828:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282a:	89 a1       	ldd	r24, Y+33	; 0x21
    282c:	9a a1       	ldd	r25, Y+34	; 0x22
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	9a a3       	std	Y+34, r25	; 0x22
    2832:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2834:	89 a1       	ldd	r24, Y+33	; 0x21
    2836:	9a a1       	ldd	r25, Y+34	; 0x22
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	69 f7       	brne	.-38     	; 0x2816 <LCD_VidInit+0x1b8>
    283c:	14 c0       	rjmp	.+40     	; 0x2866 <LCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283e:	6b a1       	ldd	r22, Y+35	; 0x23
    2840:	7c a1       	ldd	r23, Y+36	; 0x24
    2842:	8d a1       	ldd	r24, Y+37	; 0x25
    2844:	9e a1       	ldd	r25, Y+38	; 0x26
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9a a3       	std	Y+34, r25	; 0x22
    2850:	89 a3       	std	Y+33, r24	; 0x21
    2852:	89 a1       	ldd	r24, Y+33	; 0x21
    2854:	9a a1       	ldd	r25, Y+34	; 0x22
    2856:	9e 8f       	std	Y+30, r25	; 0x1e
    2858:	8d 8f       	std	Y+29, r24	; 0x1d
    285a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    285c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_VidInit+0x200>
    2862:	9e 8f       	std	Y+30, r25	; 0x1e
    2864:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidSendCMD(LCD_ONOF);
    2866:	8f e0       	ldi	r24, 0x0F	; 15
    2868:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_VidSendCMD>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a0 e8       	ldi	r26, 0x80	; 128
    2872:	bf e3       	ldi	r27, 0x3F	; 63
    2874:	89 8f       	std	Y+25, r24	; 0x19
    2876:	9a 8f       	std	Y+26, r25	; 0x1a
    2878:	ab 8f       	std	Y+27, r26	; 0x1b
    287a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287c:	69 8d       	ldd	r22, Y+25	; 0x19
    287e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a ef       	ldi	r20, 0xFA	; 250
    288a:	54 e4       	ldi	r21, 0x44	; 68
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	8d 8b       	std	Y+21, r24	; 0x15
    2896:	9e 8b       	std	Y+22, r25	; 0x16
    2898:	af 8b       	std	Y+23, r26	; 0x17
    289a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    289c:	6d 89       	ldd	r22, Y+21	; 0x15
    289e:	7e 89       	ldd	r23, Y+22	; 0x16
    28a0:	8f 89       	ldd	r24, Y+23	; 0x17
    28a2:	98 8d       	ldd	r25, Y+24	; 0x18
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	2c f4       	brge	.+10     	; 0x28be <LCD_VidInit+0x260>
		__ticks = 1;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9c 8b       	std	Y+20, r25	; 0x14
    28ba:	8b 8b       	std	Y+19, r24	; 0x13
    28bc:	3f c0       	rjmp	.+126    	; 0x293c <LCD_VidInit+0x2de>
	else if (__tmp > 65535)
    28be:	6d 89       	ldd	r22, Y+21	; 0x15
    28c0:	7e 89       	ldd	r23, Y+22	; 0x16
    28c2:	8f 89       	ldd	r24, Y+23	; 0x17
    28c4:	98 8d       	ldd	r25, Y+24	; 0x18
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	4c f5       	brge	.+82     	; 0x2928 <LCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d6:	69 8d       	ldd	r22, Y+25	; 0x19
    28d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e2       	ldi	r20, 0x20	; 32
    28e4:	51 e4       	ldi	r21, 0x41	; 65
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	9c 8b       	std	Y+20, r25	; 0x14
    28fc:	8b 8b       	std	Y+19, r24	; 0x13
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <LCD_VidInit+0x2c0>
    2900:	88 ec       	ldi	r24, 0xC8	; 200
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	9a 8b       	std	Y+18, r25	; 0x12
    2906:	89 8b       	std	Y+17, r24	; 0x11
    2908:	89 89       	ldd	r24, Y+17	; 0x11
    290a:	9a 89       	ldd	r25, Y+18	; 0x12
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <LCD_VidInit+0x2ae>
    2910:	9a 8b       	std	Y+18, r25	; 0x12
    2912:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2914:	8b 89       	ldd	r24, Y+19	; 0x13
    2916:	9c 89       	ldd	r25, Y+20	; 0x14
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	9c 8b       	std	Y+20, r25	; 0x14
    291c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291e:	8b 89       	ldd	r24, Y+19	; 0x13
    2920:	9c 89       	ldd	r25, Y+20	; 0x14
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	69 f7       	brne	.-38     	; 0x2900 <LCD_VidInit+0x2a2>
    2926:	14 c0       	rjmp	.+40     	; 0x2950 <LCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	6d 89       	ldd	r22, Y+21	; 0x15
    292a:	7e 89       	ldd	r23, Y+22	; 0x16
    292c:	8f 89       	ldd	r24, Y+23	; 0x17
    292e:	98 8d       	ldd	r25, Y+24	; 0x18
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9c 8b       	std	Y+20, r25	; 0x14
    293a:	8b 8b       	std	Y+19, r24	; 0x13
    293c:	8b 89       	ldd	r24, Y+19	; 0x13
    293e:	9c 89       	ldd	r25, Y+20	; 0x14
    2940:	98 8b       	std	Y+16, r25	; 0x10
    2942:	8f 87       	std	Y+15, r24	; 0x0f
    2944:	8f 85       	ldd	r24, Y+15	; 0x0f
    2946:	98 89       	ldd	r25, Y+16	; 0x10
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <LCD_VidInit+0x2ea>
    294c:	98 8b       	std	Y+16, r25	; 0x10
    294e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidSendCMD(LCD_CLEAR);
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_VidSendCMD>
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	a0 e8       	ldi	r26, 0x80	; 128
    295c:	bf e3       	ldi	r27, 0x3F	; 63
    295e:	8b 87       	std	Y+11, r24	; 0x0b
    2960:	9c 87       	std	Y+12, r25	; 0x0c
    2962:	ad 87       	std	Y+13, r26	; 0x0d
    2964:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2966:	6b 85       	ldd	r22, Y+11	; 0x0b
    2968:	7c 85       	ldd	r23, Y+12	; 0x0c
    296a:	8d 85       	ldd	r24, Y+13	; 0x0d
    296c:	9e 85       	ldd	r25, Y+14	; 0x0e
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	4a ef       	ldi	r20, 0xFA	; 250
    2974:	54 e4       	ldi	r21, 0x44	; 68
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	8f 83       	std	Y+7, r24	; 0x07
    2980:	98 87       	std	Y+8, r25	; 0x08
    2982:	a9 87       	std	Y+9, r26	; 0x09
    2984:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2986:	6f 81       	ldd	r22, Y+7	; 0x07
    2988:	78 85       	ldd	r23, Y+8	; 0x08
    298a:	89 85       	ldd	r24, Y+9	; 0x09
    298c:	9a 85       	ldd	r25, Y+10	; 0x0a
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 e8       	ldi	r20, 0x80	; 128
    2994:	5f e3       	ldi	r21, 0x3F	; 63
    2996:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299a:	88 23       	and	r24, r24
    299c:	2c f4       	brge	.+10     	; 0x29a8 <LCD_VidInit+0x34a>
		__ticks = 1;
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
    29a6:	3f c0       	rjmp	.+126    	; 0x2a26 <LCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    29a8:	6f 81       	ldd	r22, Y+7	; 0x07
    29aa:	78 85       	ldd	r23, Y+8	; 0x08
    29ac:	89 85       	ldd	r24, Y+9	; 0x09
    29ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	3f ef       	ldi	r19, 0xFF	; 255
    29b4:	4f e7       	ldi	r20, 0x7F	; 127
    29b6:	57 e4       	ldi	r21, 0x47	; 71
    29b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29bc:	18 16       	cp	r1, r24
    29be:	4c f5       	brge	.+82     	; 0x2a12 <LCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e2       	ldi	r20, 0x20	; 32
    29ce:	51 e4       	ldi	r21, 0x41	; 65
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	bc 01       	movw	r22, r24
    29da:	cd 01       	movw	r24, r26
    29dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	8d 83       	std	Y+5, r24	; 0x05
    29e8:	0f c0       	rjmp	.+30     	; 0x2a08 <LCD_VidInit+0x3aa>
    29ea:	88 ec       	ldi	r24, 0xC8	; 200
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9c 83       	std	Y+4, r25	; 0x04
    29f0:	8b 83       	std	Y+3, r24	; 0x03
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	9c 81       	ldd	r25, Y+4	; 0x04
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <LCD_VidInit+0x398>
    29fa:	9c 83       	std	Y+4, r25	; 0x04
    29fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2a00:	9e 81       	ldd	r25, Y+6	; 0x06
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	9e 83       	std	Y+6, r25	; 0x06
    2a06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a08:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	69 f7       	brne	.-38     	; 0x29ea <LCD_VidInit+0x38c>
    2a10:	14 c0       	rjmp	.+40     	; 0x2a3a <LCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a12:	6f 81       	ldd	r22, Y+7	; 0x07
    2a14:	78 85       	ldd	r23, Y+8	; 0x08
    2a16:	89 85       	ldd	r24, Y+9	; 0x09
    2a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	8d 83       	std	Y+5, r24	; 0x05
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2a:	9a 83       	std	Y+2, r25	; 0x02
    2a2c:	89 83       	std	Y+1, r24	; 0x01
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	9a 81       	ldd	r25, Y+2	; 0x02
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <LCD_VidInit+0x3d4>
    2a36:	9a 83       	std	Y+2, r25	; 0x02
    2a38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2a3a:	e8 96       	adiw	r28, 0x38	; 56
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <LCD_VidCLR>:

void LCD_VidCLR(void)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	2e 97       	sbiw	r28, 0x0e	; 14
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61

	LCD_VidSendCMD(0x01);
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_VidSendCMD>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	a0 e0       	ldi	r26, 0x00	; 0
    2a6c:	b0 e4       	ldi	r27, 0x40	; 64
    2a6e:	8b 87       	std	Y+11, r24	; 0x0b
    2a70:	9c 87       	std	Y+12, r25	; 0x0c
    2a72:	ad 87       	std	Y+13, r26	; 0x0d
    2a74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	4a ef       	ldi	r20, 0xFA	; 250
    2a84:	54 e4       	ldi	r21, 0x44	; 68
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	8f 83       	std	Y+7, r24	; 0x07
    2a90:	98 87       	std	Y+8, r25	; 0x08
    2a92:	a9 87       	std	Y+9, r26	; 0x09
    2a94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a96:	6f 81       	ldd	r22, Y+7	; 0x07
    2a98:	78 85       	ldd	r23, Y+8	; 0x08
    2a9a:	89 85       	ldd	r24, Y+9	; 0x09
    2a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e8       	ldi	r20, 0x80	; 128
    2aa4:	5f e3       	ldi	r21, 0x3F	; 63
    2aa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aaa:	88 23       	and	r24, r24
    2aac:	2c f4       	brge	.+10     	; 0x2ab8 <LCD_VidCLR+0x6c>
		__ticks = 1;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9e 83       	std	Y+6, r25	; 0x06
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
    2ab6:	3f c0       	rjmp	.+126    	; 0x2b36 <LCD_VidCLR+0xea>
	else if (__tmp > 65535)
    2ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aba:	78 85       	ldd	r23, Y+8	; 0x08
    2abc:	89 85       	ldd	r24, Y+9	; 0x09
    2abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	3f ef       	ldi	r19, 0xFF	; 255
    2ac4:	4f e7       	ldi	r20, 0x7F	; 127
    2ac6:	57 e4       	ldi	r21, 0x47	; 71
    2ac8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2acc:	18 16       	cp	r1, r24
    2ace:	4c f5       	brge	.+82     	; 0x2b22 <LCD_VidCLR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e2       	ldi	r20, 0x20	; 32
    2ade:	51 e4       	ldi	r21, 0x41	; 65
    2ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	9e 83       	std	Y+6, r25	; 0x06
    2af6:	8d 83       	std	Y+5, r24	; 0x05
    2af8:	0f c0       	rjmp	.+30     	; 0x2b18 <LCD_VidCLR+0xcc>
    2afa:	88 ec       	ldi	r24, 0xC8	; 200
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	9c 83       	std	Y+4, r25	; 0x04
    2b00:	8b 83       	std	Y+3, r24	; 0x03
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	9c 81       	ldd	r25, Y+4	; 0x04
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <LCD_VidCLR+0xba>
    2b0a:	9c 83       	std	Y+4, r25	; 0x04
    2b0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	9e 81       	ldd	r25, Y+6	; 0x06
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b18:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	69 f7       	brne	.-38     	; 0x2afa <LCD_VidCLR+0xae>
    2b20:	14 c0       	rjmp	.+40     	; 0x2b4a <LCD_VidCLR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b22:	6f 81       	ldd	r22, Y+7	; 0x07
    2b24:	78 85       	ldd	r23, Y+8	; 0x08
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	9e 83       	std	Y+6, r25	; 0x06
    2b34:	8d 83       	std	Y+5, r24	; 0x05
    2b36:	8d 81       	ldd	r24, Y+5	; 0x05
    2b38:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	9a 81       	ldd	r25, Y+2	; 0x02
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <LCD_VidCLR+0xf6>
    2b46:	9a 83       	std	Y+2, r25	; 0x02
    2b48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2b4a:	2e 96       	adiw	r28, 0x0e	; 14
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <LCD_VidSendNumber>:



void LCD_VidSendNumber(u32 Copy_u32Number)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	2c 97       	sbiw	r28, 0x0c	; 12
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	69 87       	std	Y+9, r22	; 0x09
    2b72:	7a 87       	std	Y+10, r23	; 0x0a
    2b74:	8b 87       	std	Y+11, r24	; 0x0b
    2b76:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u32Counter=1 , Local_u32Digit=0;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a0 e0       	ldi	r26, 0x00	; 0
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    2b82:	9e 83       	std	Y+6, r25	; 0x06
    2b84:	af 83       	std	Y+7, r26	; 0x07
    2b86:	b8 87       	std	Y+8, r27	; 0x08
    2b88:	19 82       	std	Y+1, r1	; 0x01
    2b8a:	1a 82       	std	Y+2, r1	; 0x02
    2b8c:	1b 82       	std	Y+3, r1	; 0x03
    2b8e:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_u32Number == 0)
    2b90:	89 85       	ldd	r24, Y+9	; 0x09
    2b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b94:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b96:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	a1 05       	cpc	r26, r1
    2b9c:	b1 05       	cpc	r27, r1
    2b9e:	b1 f4       	brne	.+44     	; 0x2bcc <LCD_VidSendNumber+0x70>
		LCD_VidSendData('0');
    2ba0:	80 e3       	ldi	r24, 0x30	; 48
    2ba2:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCD_VidSendData>
    2ba6:	7a c0       	rjmp	.+244    	; 0x2c9c <LCD_VidSendNumber+0x140>
	else
	{
		while (Copy_u32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    2ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    2baa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bac:	af 81       	ldd	r26, Y+7	; 0x07
    2bae:	b8 85       	ldd	r27, Y+8	; 0x08
    2bb0:	2a e0       	ldi	r18, 0x0A	; 10
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 83 18 	call	0x3106	; 0x3106 <__mulsi3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	8d 83       	std	Y+5, r24	; 0x05
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	af 83       	std	Y+7, r26	; 0x07
    2bca:	b8 87       	std	Y+8, r27	; 0x08

	if (Copy_u32Number == 0)
		LCD_VidSendData('0');
	else
	{
		while (Copy_u32Number/Local_u32Counter != 0)
    2bcc:	89 85       	ldd	r24, Y+9	; 0x09
    2bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd0:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bd2:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bd4:	2d 81       	ldd	r18, Y+5	; 0x05
    2bd6:	3e 81       	ldd	r19, Y+6	; 0x06
    2bd8:	4f 81       	ldd	r20, Y+7	; 0x07
    2bda:	58 85       	ldd	r21, Y+8	; 0x08
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 a2 18 	call	0x3144	; 0x3144 <__udivmodsi4>
    2be4:	da 01       	movw	r26, r20
    2be6:	c9 01       	movw	r24, r18
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	a1 05       	cpc	r26, r1
    2bec:	b1 05       	cpc	r27, r1
    2bee:	e1 f6       	brne	.-72     	; 0x2ba8 <LCD_VidSendNumber+0x4c>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf4:	af 81       	ldd	r26, Y+7	; 0x07
    2bf6:	b8 85       	ldd	r27, Y+8	; 0x08
    2bf8:	2a e0       	ldi	r18, 0x0A	; 10
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	50 e0       	ldi	r21, 0x00	; 0
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	0e 94 a2 18 	call	0x3144	; 0x3144 <__udivmodsi4>
    2c08:	da 01       	movw	r26, r20
    2c0a:	c9 01       	movw	r24, r18
    2c0c:	8d 83       	std	Y+5, r24	; 0x05
    2c0e:	9e 83       	std	Y+6, r25	; 0x06
    2c10:	af 83       	std	Y+7, r26	; 0x07
    2c12:	b8 87       	std	Y+8, r27	; 0x08
    2c14:	3a c0       	rjmp	.+116    	; 0x2c8a <LCD_VidSendNumber+0x12e>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_u32Number/Local_u32Counter;
    2c16:	89 85       	ldd	r24, Y+9	; 0x09
    2c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1a:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c1c:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c1e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c20:	3e 81       	ldd	r19, Y+6	; 0x06
    2c22:	4f 81       	ldd	r20, Y+7	; 0x07
    2c24:	58 85       	ldd	r21, Y+8	; 0x08
    2c26:	bc 01       	movw	r22, r24
    2c28:	cd 01       	movw	r24, r26
    2c2a:	0e 94 a2 18 	call	0x3144	; 0x3144 <__udivmodsi4>
    2c2e:	da 01       	movw	r26, r20
    2c30:	c9 01       	movw	r24, r18
    2c32:	89 83       	std	Y+1, r24	; 0x01
    2c34:	9a 83       	std	Y+2, r25	; 0x02
    2c36:	ab 83       	std	Y+3, r26	; 0x03
    2c38:	bc 83       	std	Y+4, r27	; 0x04

			LCD_VidSendData(Local_u32Digit + '0');
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	80 5d       	subi	r24, 0xD0	; 208
    2c3e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCD_VidSendData>

			Copy_u32Number = Copy_u32Number%Local_u32Counter;
    2c42:	89 85       	ldd	r24, Y+9	; 0x09
    2c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c46:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c48:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c4a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c4c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c4e:	4f 81       	ldd	r20, Y+7	; 0x07
    2c50:	58 85       	ldd	r21, Y+8	; 0x08
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 a2 18 	call	0x3144	; 0x3144 <__udivmodsi4>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	89 87       	std	Y+9, r24	; 0x09
    2c60:	9a 87       	std	Y+10, r25	; 0x0a
    2c62:	ab 87       	std	Y+11, r26	; 0x0b
    2c64:	bc 87       	std	Y+12, r27	; 0x0c

			Local_u32Counter /= 10;
    2c66:	8d 81       	ldd	r24, Y+5	; 0x05
    2c68:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6a:	af 81       	ldd	r26, Y+7	; 0x07
    2c6c:	b8 85       	ldd	r27, Y+8	; 0x08
    2c6e:	2a e0       	ldi	r18, 0x0A	; 10
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	bc 01       	movw	r22, r24
    2c78:	cd 01       	movw	r24, r26
    2c7a:	0e 94 a2 18 	call	0x3144	; 0x3144 <__udivmodsi4>
    2c7e:	da 01       	movw	r26, r20
    2c80:	c9 01       	movw	r24, r18
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	9e 83       	std	Y+6, r25	; 0x06
    2c86:	af 83       	std	Y+7, r26	; 0x07
    2c88:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8e:	af 81       	ldd	r26, Y+7	; 0x07
    2c90:	b8 85       	ldd	r27, Y+8	; 0x08
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	a1 05       	cpc	r26, r1
    2c96:	b1 05       	cpc	r27, r1
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <LCD_VidSendNumber+0x140>
    2c9a:	bd cf       	rjmp	.-134    	; 0x2c16 <LCD_VidSendNumber+0xba>
			Copy_u32Number = Copy_u32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    2c9c:	2c 96       	adiw	r28, 0x0c	; 12
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <LCD_VidSendNumberPos>:

void LCD_VidSendNumberPos(u32 Copy_u32Number,u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <LCD_VidSendNumberPos+0x6>
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <LCD_VidSendNumberPos+0x8>
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <LCD_VidSendNumberPos+0xa>
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	69 83       	std	Y+1, r22	; 0x01
    2cbe:	7a 83       	std	Y+2, r23	; 0x02
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	4d 83       	std	Y+5, r20	; 0x05
    2cc6:	2e 83       	std	Y+6, r18	; 0x06
	LCD_VidSetCursorPos(Copy_U8Row,Copy_U8Coulmn);
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	6e 81       	ldd	r22, Y+6	; 0x06
    2ccc:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <LCD_VidSetCursorPos>
	LCD_VidSendNumber(Copy_u32Number);
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	ab 81       	ldd	r26, Y+3	; 0x03
    2cd6:	bc 81       	ldd	r27, Y+4	; 0x04
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <LCD_VidSendNumber>
}
    2ce0:	26 96       	adiw	r28, 0x06	; 6
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	08 95       	ret

00002cf2 <LCD_VidSetCursorPos>:


void LCD_VidSetCursorPos(u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <LCD_VidSetCursorPos+0x6>
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <LCD_VidSetCursorPos+0x8>
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	6a 83       	std	Y+2, r22	; 0x02
	Copy_U8Coulmn -- ;
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	81 50       	subi	r24, 0x01	; 1
    2d06:	8a 83       	std	Y+2, r24	; 0x02
	switch (Copy_U8Row)
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	3c 83       	std	Y+4, r19	; 0x04
    2d10:	2b 83       	std	Y+3, r18	; 0x03
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	9c 81       	ldd	r25, Y+4	; 0x04
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	91 05       	cpc	r25, r1
    2d1a:	31 f0       	breq	.+12     	; 0x2d28 <LCD_VidSetCursorPos+0x36>
    2d1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d1e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d20:	22 30       	cpi	r18, 0x02	; 2
    2d22:	31 05       	cpc	r19, r1
    2d24:	31 f0       	breq	.+12     	; 0x2d32 <LCD_VidSetCursorPos+0x40>
    2d26:	09 c0       	rjmp	.+18     	; 0x2d3a <LCD_VidSetCursorPos+0x48>
	{
	case ROW1 :LCD_VidSendCMD((0x80 + Copy_U8Coulmn)); break;
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	80 58       	subi	r24, 0x80	; 128
    2d2c:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_VidSendCMD>
    2d30:	04 c0       	rjmp	.+8      	; 0x2d3a <LCD_VidSetCursorPos+0x48>
	case ROW2 :LCD_VidSendCMD((0xc0 + Copy_U8Coulmn)); break;
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	80 54       	subi	r24, 0x40	; 64
    2d36:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_VidSendCMD>
	default : ;
	}


}
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <LCD_VidSendCharPos>:

void LCD_VidSendCharPos(u8 Copy_U8Char,u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <LCD_VidSendCharPos+0x6>
    2d4e:	0f 92       	push	r0
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	89 83       	std	Y+1, r24	; 0x01
    2d56:	6a 83       	std	Y+2, r22	; 0x02
    2d58:	4b 83       	std	Y+3, r20	; 0x03
	LCD_VidSetCursorPos(Copy_U8Row,Copy_U8Coulmn);
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	6b 81       	ldd	r22, Y+3	; 0x03
    2d5e:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <LCD_VidSetCursorPos>
	LCD_VidSendData(Copy_U8Char);
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	0e 94 68 12 	call	0x24d0	; 0x24d0 <LCD_VidSendData>
}
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <LCD_VidSendStringPos>:


void LCD_VidSendStringPos(u8 *Copy_U8String,u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <LCD_VidSendStringPos+0x6>
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <LCD_VidSendStringPos+0x8>
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	6b 83       	std	Y+3, r22	; 0x03
    2d86:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidSetCursorPos(Copy_U8Row,Copy_U8Coulmn);
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	6c 81       	ldd	r22, Y+4	; 0x04
    2d8c:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <LCD_VidSetCursorPos>
	LCD_VidSendString(Copy_U8String);
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_VidSendString>
}
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <main>:
#include "Internal_EEPROM.h"
#include "DTEST.h"


void main(void)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
   SmartDoor();
    2dae:	0e 94 1c 09 	call	0x1238	; 0x1238 <SmartDoor>
}
    2db2:	cf 91       	pop	r28
    2db4:	df 91       	pop	r29
    2db6:	08 95       	ret

00002db8 <Motor>:
#include "motor.h"



void Motor(void)
{
    2db8:	df 93       	push	r29
    2dba:	cf 93       	push	r28
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	ac 97       	sbiw	r28, 0x2c	; 44
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(PORT_B,0xff);
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	6f ef       	ldi	r22, 0xFF	; 255
    2dd0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DIO_VidSetPortDirection>
  u8 k =0,j=0;
    2dd4:	1c a6       	std	Y+44, r1	; 0x2c
    2dd6:	1b a6       	std	Y+43, r1	; 0x2b
    2dd8:	89 c0       	rjmp	.+274    	; 0x2eec <Motor+0x134>
	for(k;k<1;k++)
	{
		DIO_VidSetPinValue(PORT_B,PIN_0,1);
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_B,PIN_1,1);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	61 e0       	ldi	r22, 0x01	; 1
    2de8:	41 e0       	ldi	r20, 0x01	; 1
    2dea:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_B,PIN_2,0);
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	62 e0       	ldi	r22, 0x02	; 2
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_B,PIN_3,0);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	63 e0       	ldi	r22, 0x03	; 3
    2dfc:	40 e0       	ldi	r20, 0x00	; 0
    2dfe:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	a0 ea       	ldi	r26, 0xA0	; 160
    2e08:	b1 e4       	ldi	r27, 0x41	; 65
    2e0a:	8f a3       	std	Y+39, r24	; 0x27
    2e0c:	98 a7       	std	Y+40, r25	; 0x28
    2e0e:	a9 a7       	std	Y+41, r26	; 0x29
    2e10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e12:	6f a1       	ldd	r22, Y+39	; 0x27
    2e14:	78 a5       	ldd	r23, Y+40	; 0x28
    2e16:	89 a5       	ldd	r24, Y+41	; 0x29
    2e18:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	4a ef       	ldi	r20, 0xFA	; 250
    2e20:	54 e4       	ldi	r21, 0x44	; 68
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	8b a3       	std	Y+35, r24	; 0x23
    2e2c:	9c a3       	std	Y+36, r25	; 0x24
    2e2e:	ad a3       	std	Y+37, r26	; 0x25
    2e30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e32:	6b a1       	ldd	r22, Y+35	; 0x23
    2e34:	7c a1       	ldd	r23, Y+36	; 0x24
    2e36:	8d a1       	ldd	r24, Y+37	; 0x25
    2e38:	9e a1       	ldd	r25, Y+38	; 0x26
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e8       	ldi	r20, 0x80	; 128
    2e40:	5f e3       	ldi	r21, 0x3F	; 63
    2e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <Motor+0x9c>
		__ticks = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9a a3       	std	Y+34, r25	; 0x22
    2e50:	89 a3       	std	Y+33, r24	; 0x21
    2e52:	3f c0       	rjmp	.+126    	; 0x2ed2 <Motor+0x11a>
	else if (__tmp > 65535)
    2e54:	6b a1       	ldd	r22, Y+35	; 0x23
    2e56:	7c a1       	ldd	r23, Y+36	; 0x24
    2e58:	8d a1       	ldd	r24, Y+37	; 0x25
    2e5a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	4c f5       	brge	.+82     	; 0x2ebe <Motor+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e6e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e70:	89 a5       	ldd	r24, Y+41	; 0x29
    2e72:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e2       	ldi	r20, 0x20	; 32
    2e7a:	51 e4       	ldi	r21, 0x41	; 65
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9a a3       	std	Y+34, r25	; 0x22
    2e92:	89 a3       	std	Y+33, r24	; 0x21
    2e94:	0f c0       	rjmp	.+30     	; 0x2eb4 <Motor+0xfc>
    2e96:	88 ec       	ldi	r24, 0xC8	; 200
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	98 a3       	std	Y+32, r25	; 0x20
    2e9c:	8f 8f       	std	Y+31, r24	; 0x1f
    2e9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ea0:	98 a1       	ldd	r25, Y+32	; 0x20
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <Motor+0xea>
    2ea6:	98 a3       	std	Y+32, r25	; 0x20
    2ea8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eaa:	89 a1       	ldd	r24, Y+33	; 0x21
    2eac:	9a a1       	ldd	r25, Y+34	; 0x22
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	9a a3       	std	Y+34, r25	; 0x22
    2eb2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	89 a1       	ldd	r24, Y+33	; 0x21
    2eb6:	9a a1       	ldd	r25, Y+34	; 0x22
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	69 f7       	brne	.-38     	; 0x2e96 <Motor+0xde>
    2ebc:	14 c0       	rjmp	.+40     	; 0x2ee6 <Motor+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebe:	6b a1       	ldd	r22, Y+35	; 0x23
    2ec0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9a a3       	std	Y+34, r25	; 0x22
    2ed0:	89 a3       	std	Y+33, r24	; 0x21
    2ed2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ed8:	8d 8f       	std	Y+29, r24	; 0x1d
    2eda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2edc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <Motor+0x126>
    2ee2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ee4:	8d 8f       	std	Y+29, r24	; 0x1d

void Motor(void)
{
	DIO_VidSetPortDirection(PORT_B,0xff);
  u8 k =0,j=0;
	for(k;k<1;k++)
    2ee6:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ee8:	8f 5f       	subi	r24, 0xFF	; 255
    2eea:	8c a7       	std	Y+44, r24	; 0x2c
    2eec:	8c a5       	ldd	r24, Y+44	; 0x2c
    2eee:	88 23       	and	r24, r24
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <Motor+0x13c>
    2ef2:	73 cf       	rjmp	.-282    	; 0x2dda <Motor+0x22>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	aa ef       	ldi	r26, 0xFA	; 250
    2efa:	b4 e4       	ldi	r27, 0x44	; 68
    2efc:	89 8f       	std	Y+25, r24	; 0x19
    2efe:	9a 8f       	std	Y+26, r25	; 0x1a
    2f00:	ab 8f       	std	Y+27, r26	; 0x1b
    2f02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f04:	69 8d       	ldd	r22, Y+25	; 0x19
    2f06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4a ef       	ldi	r20, 0xFA	; 250
    2f12:	54 e4       	ldi	r21, 0x44	; 68
    2f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	8d 8b       	std	Y+21, r24	; 0x15
    2f1e:	9e 8b       	std	Y+22, r25	; 0x16
    2f20:	af 8b       	std	Y+23, r26	; 0x17
    2f22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f24:	6d 89       	ldd	r22, Y+21	; 0x15
    2f26:	7e 89       	ldd	r23, Y+22	; 0x16
    2f28:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e8       	ldi	r20, 0x80	; 128
    2f32:	5f e3       	ldi	r21, 0x3F	; 63
    2f34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f38:	88 23       	and	r24, r24
    2f3a:	2c f4       	brge	.+10     	; 0x2f46 <Motor+0x18e>
		__ticks = 1;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	9c 8b       	std	Y+20, r25	; 0x14
    2f42:	8b 8b       	std	Y+19, r24	; 0x13
    2f44:	3f c0       	rjmp	.+126    	; 0x2fc4 <Motor+0x20c>
	else if (__tmp > 65535)
    2f46:	6d 89       	ldd	r22, Y+21	; 0x15
    2f48:	7e 89       	ldd	r23, Y+22	; 0x16
    2f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	3f ef       	ldi	r19, 0xFF	; 255
    2f52:	4f e7       	ldi	r20, 0x7F	; 127
    2f54:	57 e4       	ldi	r21, 0x47	; 71
    2f56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f5a:	18 16       	cp	r1, r24
    2f5c:	4c f5       	brge	.+82     	; 0x2fb0 <Motor+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e2       	ldi	r20, 0x20	; 32
    2f6c:	51 e4       	ldi	r21, 0x41	; 65
    2f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9c 8b       	std	Y+20, r25	; 0x14
    2f84:	8b 8b       	std	Y+19, r24	; 0x13
    2f86:	0f c0       	rjmp	.+30     	; 0x2fa6 <Motor+0x1ee>
    2f88:	88 ec       	ldi	r24, 0xC8	; 200
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9a 8b       	std	Y+18, r25	; 0x12
    2f8e:	89 8b       	std	Y+17, r24	; 0x11
    2f90:	89 89       	ldd	r24, Y+17	; 0x11
    2f92:	9a 89       	ldd	r25, Y+18	; 0x12
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <Motor+0x1dc>
    2f98:	9a 8b       	std	Y+18, r25	; 0x12
    2f9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	9c 8b       	std	Y+20, r25	; 0x14
    2fa4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa8:	9c 89       	ldd	r25, Y+20	; 0x14
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	69 f7       	brne	.-38     	; 0x2f88 <Motor+0x1d0>
    2fae:	9e c0       	rjmp	.+316    	; 0x30ec <Motor+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	9c 8b       	std	Y+20, r25	; 0x14
    2fc2:	8b 8b       	std	Y+19, r24	; 0x13
    2fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc8:	98 8b       	std	Y+16, r25	; 0x10
    2fca:	8f 87       	std	Y+15, r24	; 0x0f
    2fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fce:	98 89       	ldd	r25, Y+16	; 0x10
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <Motor+0x218>
    2fd4:	98 8b       	std	Y+16, r25	; 0x10
    2fd6:	8f 87       	std	Y+15, r24	; 0x0f
    2fd8:	89 c0       	rjmp	.+274    	; 0x30ec <Motor+0x334>

	_delay_ms(2000);

    for(j;j<1;j++)
    	{
    	DIO_VidSetPinValue(PORT_B,PIN_0,1);
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	60 e0       	ldi	r22, 0x00	; 0
    2fde:	41 e0       	ldi	r20, 0x01	; 1
    2fe0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_B,PIN_1,0);
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	61 e0       	ldi	r22, 0x01	; 1
    2fe8:	40 e0       	ldi	r20, 0x00	; 0
    2fea:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_B,PIN_2,0);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	62 e0       	ldi	r22, 0x02	; 2
    2ff2:	40 e0       	ldi	r20, 0x00	; 0
    2ff4:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_B,PIN_3,1);
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	63 e0       	ldi	r22, 0x03	; 3
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	a0 ea       	ldi	r26, 0xA0	; 160
    3008:	b1 e4       	ldi	r27, 0x41	; 65
    300a:	8b 87       	std	Y+11, r24	; 0x0b
    300c:	9c 87       	std	Y+12, r25	; 0x0c
    300e:	ad 87       	std	Y+13, r26	; 0x0d
    3010:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3012:	6b 85       	ldd	r22, Y+11	; 0x0b
    3014:	7c 85       	ldd	r23, Y+12	; 0x0c
    3016:	8d 85       	ldd	r24, Y+13	; 0x0d
    3018:	9e 85       	ldd	r25, Y+14	; 0x0e
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	4a ef       	ldi	r20, 0xFA	; 250
    3020:	54 e4       	ldi	r21, 0x44	; 68
    3022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	8f 83       	std	Y+7, r24	; 0x07
    302c:	98 87       	std	Y+8, r25	; 0x08
    302e:	a9 87       	std	Y+9, r26	; 0x09
    3030:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3032:	6f 81       	ldd	r22, Y+7	; 0x07
    3034:	78 85       	ldd	r23, Y+8	; 0x08
    3036:	89 85       	ldd	r24, Y+9	; 0x09
    3038:	9a 85       	ldd	r25, Y+10	; 0x0a
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e8       	ldi	r20, 0x80	; 128
    3040:	5f e3       	ldi	r21, 0x3F	; 63
    3042:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3046:	88 23       	and	r24, r24
    3048:	2c f4       	brge	.+10     	; 0x3054 <Motor+0x29c>
		__ticks = 1;
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	9e 83       	std	Y+6, r25	; 0x06
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	3f c0       	rjmp	.+126    	; 0x30d2 <Motor+0x31a>
	else if (__tmp > 65535)
    3054:	6f 81       	ldd	r22, Y+7	; 0x07
    3056:	78 85       	ldd	r23, Y+8	; 0x08
    3058:	89 85       	ldd	r24, Y+9	; 0x09
    305a:	9a 85       	ldd	r25, Y+10	; 0x0a
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	3f ef       	ldi	r19, 0xFF	; 255
    3060:	4f e7       	ldi	r20, 0x7F	; 127
    3062:	57 e4       	ldi	r21, 0x47	; 71
    3064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3068:	18 16       	cp	r1, r24
    306a:	4c f5       	brge	.+82     	; 0x30be <Motor+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306c:	6b 85       	ldd	r22, Y+11	; 0x0b
    306e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3070:	8d 85       	ldd	r24, Y+13	; 0x0d
    3072:	9e 85       	ldd	r25, Y+14	; 0x0e
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e2       	ldi	r20, 0x20	; 32
    307a:	51 e4       	ldi	r21, 0x41	; 65
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	9e 83       	std	Y+6, r25	; 0x06
    3092:	8d 83       	std	Y+5, r24	; 0x05
    3094:	0f c0       	rjmp	.+30     	; 0x30b4 <Motor+0x2fc>
    3096:	88 ec       	ldi	r24, 0xC8	; 200
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	9c 83       	std	Y+4, r25	; 0x04
    309c:	8b 83       	std	Y+3, r24	; 0x03
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	9c 81       	ldd	r25, Y+4	; 0x04
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <Motor+0x2ea>
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30aa:	8d 81       	ldd	r24, Y+5	; 0x05
    30ac:	9e 81       	ldd	r25, Y+6	; 0x06
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	9e 83       	std	Y+6, r25	; 0x06
    30b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	9e 81       	ldd	r25, Y+6	; 0x06
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	69 f7       	brne	.-38     	; 0x3096 <Motor+0x2de>
    30bc:	14 c0       	rjmp	.+40     	; 0x30e6 <Motor+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30be:	6f 81       	ldd	r22, Y+7	; 0x07
    30c0:	78 85       	ldd	r23, Y+8	; 0x08
    30c2:	89 85       	ldd	r24, Y+9	; 0x09
    30c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9e 83       	std	Y+6, r25	; 0x06
    30d0:	8d 83       	std	Y+5, r24	; 0x05
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	9e 81       	ldd	r25, Y+6	; 0x06
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	89 83       	std	Y+1, r24	; 0x01
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	9a 81       	ldd	r25, Y+2	; 0x02
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <Motor+0x326>
    30e2:	9a 83       	std	Y+2, r25	; 0x02
    30e4:	89 83       	std	Y+1, r24	; 0x01

	}

	_delay_ms(2000);

    for(j;j<1;j++)
    30e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    30e8:	8f 5f       	subi	r24, 0xFF	; 255
    30ea:	8b a7       	std	Y+43, r24	; 0x2b
    30ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    30ee:	88 23       	and	r24, r24
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <Motor+0x33c>
    30f2:	73 cf       	rjmp	.-282    	; 0x2fda <Motor+0x222>

    	}



}
    30f4:	ac 96       	adiw	r28, 0x2c	; 44
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	08 95       	ret

00003106 <__mulsi3>:
    3106:	62 9f       	mul	r22, r18
    3108:	d0 01       	movw	r26, r0
    310a:	73 9f       	mul	r23, r19
    310c:	f0 01       	movw	r30, r0
    310e:	82 9f       	mul	r24, r18
    3110:	e0 0d       	add	r30, r0
    3112:	f1 1d       	adc	r31, r1
    3114:	64 9f       	mul	r22, r20
    3116:	e0 0d       	add	r30, r0
    3118:	f1 1d       	adc	r31, r1
    311a:	92 9f       	mul	r25, r18
    311c:	f0 0d       	add	r31, r0
    311e:	83 9f       	mul	r24, r19
    3120:	f0 0d       	add	r31, r0
    3122:	74 9f       	mul	r23, r20
    3124:	f0 0d       	add	r31, r0
    3126:	65 9f       	mul	r22, r21
    3128:	f0 0d       	add	r31, r0
    312a:	99 27       	eor	r25, r25
    312c:	72 9f       	mul	r23, r18
    312e:	b0 0d       	add	r27, r0
    3130:	e1 1d       	adc	r30, r1
    3132:	f9 1f       	adc	r31, r25
    3134:	63 9f       	mul	r22, r19
    3136:	b0 0d       	add	r27, r0
    3138:	e1 1d       	adc	r30, r1
    313a:	f9 1f       	adc	r31, r25
    313c:	bd 01       	movw	r22, r26
    313e:	cf 01       	movw	r24, r30
    3140:	11 24       	eor	r1, r1
    3142:	08 95       	ret

00003144 <__udivmodsi4>:
    3144:	a1 e2       	ldi	r26, 0x21	; 33
    3146:	1a 2e       	mov	r1, r26
    3148:	aa 1b       	sub	r26, r26
    314a:	bb 1b       	sub	r27, r27
    314c:	fd 01       	movw	r30, r26
    314e:	0d c0       	rjmp	.+26     	; 0x316a <__udivmodsi4_ep>

00003150 <__udivmodsi4_loop>:
    3150:	aa 1f       	adc	r26, r26
    3152:	bb 1f       	adc	r27, r27
    3154:	ee 1f       	adc	r30, r30
    3156:	ff 1f       	adc	r31, r31
    3158:	a2 17       	cp	r26, r18
    315a:	b3 07       	cpc	r27, r19
    315c:	e4 07       	cpc	r30, r20
    315e:	f5 07       	cpc	r31, r21
    3160:	20 f0       	brcs	.+8      	; 0x316a <__udivmodsi4_ep>
    3162:	a2 1b       	sub	r26, r18
    3164:	b3 0b       	sbc	r27, r19
    3166:	e4 0b       	sbc	r30, r20
    3168:	f5 0b       	sbc	r31, r21

0000316a <__udivmodsi4_ep>:
    316a:	66 1f       	adc	r22, r22
    316c:	77 1f       	adc	r23, r23
    316e:	88 1f       	adc	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	1a 94       	dec	r1
    3174:	69 f7       	brne	.-38     	; 0x3150 <__udivmodsi4_loop>
    3176:	60 95       	com	r22
    3178:	70 95       	com	r23
    317a:	80 95       	com	r24
    317c:	90 95       	com	r25
    317e:	9b 01       	movw	r18, r22
    3180:	ac 01       	movw	r20, r24
    3182:	bd 01       	movw	r22, r26
    3184:	cf 01       	movw	r24, r30
    3186:	08 95       	ret

00003188 <__prologue_saves__>:
    3188:	2f 92       	push	r2
    318a:	3f 92       	push	r3
    318c:	4f 92       	push	r4
    318e:	5f 92       	push	r5
    3190:	6f 92       	push	r6
    3192:	7f 92       	push	r7
    3194:	8f 92       	push	r8
    3196:	9f 92       	push	r9
    3198:	af 92       	push	r10
    319a:	bf 92       	push	r11
    319c:	cf 92       	push	r12
    319e:	df 92       	push	r13
    31a0:	ef 92       	push	r14
    31a2:	ff 92       	push	r15
    31a4:	0f 93       	push	r16
    31a6:	1f 93       	push	r17
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	ca 1b       	sub	r28, r26
    31b2:	db 0b       	sbc	r29, r27
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	de bf       	out	0x3e, r29	; 62
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	cd bf       	out	0x3d, r28	; 61
    31be:	09 94       	ijmp

000031c0 <__epilogue_restores__>:
    31c0:	2a 88       	ldd	r2, Y+18	; 0x12
    31c2:	39 88       	ldd	r3, Y+17	; 0x11
    31c4:	48 88       	ldd	r4, Y+16	; 0x10
    31c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    31c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    31ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    31cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    31ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    31d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    31d2:	b9 84       	ldd	r11, Y+9	; 0x09
    31d4:	c8 84       	ldd	r12, Y+8	; 0x08
    31d6:	df 80       	ldd	r13, Y+7	; 0x07
    31d8:	ee 80       	ldd	r14, Y+6	; 0x06
    31da:	fd 80       	ldd	r15, Y+5	; 0x05
    31dc:	0c 81       	ldd	r16, Y+4	; 0x04
    31de:	1b 81       	ldd	r17, Y+3	; 0x03
    31e0:	aa 81       	ldd	r26, Y+2	; 0x02
    31e2:	b9 81       	ldd	r27, Y+1	; 0x01
    31e4:	ce 0f       	add	r28, r30
    31e6:	d1 1d       	adc	r29, r1
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	ed 01       	movw	r28, r26
    31f4:	08 95       	ret

000031f6 <_exit>:
    31f6:	f8 94       	cli

000031f8 <__stop_program>:
    31f8:	ff cf       	rjmp	.-2      	; 0x31f8 <__stop_program>
