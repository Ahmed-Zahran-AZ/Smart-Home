
SMART_HOME_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  00003bf0  00003c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800136  00800136  00003d5a  2**0
                  ALLOC
  3 .stab         000032ac  00000000  00000000  00003d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fd2  00000000  00000000  00007008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000811a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000828a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000adbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c727  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <main>
      8a:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e0       	ldi	r26, 0x0C	; 12
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e0       	ldi	r24, 0x0C	; 12
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_VidSetPinDirection>:
#include "DIO_Interface.h"



void DIO_VidSetPinDirection(u8 copy_u8port ,u8 copy_u8Pin, u8 copy_U8Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_U8Direction==1)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_VidSetPinDirection+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_VidSetPinDirection+0x100>
	{
		switch(copy_u8port)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_VidSetPinDirection+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_VidSetPinDirection+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_VidSetPinDirection+0x60>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_VidSetPinDirection+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_VidSetPinDirection+0xd8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: SET_BIT(DDRA,copy_u8Pin);break;
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_VidSetPinDirection+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_VidSetPinDirection+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 1: SET_BIT(DDRB,copy_u8Pin);break;
     bce:	a7 e3       	ldi	r26, 0x37	; 55
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e3       	ldi	r30, 0x37	; 55
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_VidSetPinDirection+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_VidSetPinDirection+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 2: SET_BIT(DDRC,copy_u8Pin);break;
     bf6:	a4 e3       	ldi	r26, 0x34	; 52
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e3       	ldi	r30, 0x34	; 52
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_VidSetPinDirection+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_VidSetPinDirection+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 3: SET_BIT(DDRD,copy_u8Pin);break;
     c1e:	a1 e3       	ldi	r26, 0x31	; 49
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e1 e3       	ldi	r30, 0x31	; 49
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_VidSetPinDirection+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_VidSetPinDirection+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(copy_U8Direction==0)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_VidSetPinDirection+0x108>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_VidSetPinDirection+0x172>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_VidSetPinDirection+0x130>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_VidSetPinDirection+0x148>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_VidSetPinDirection+0x19c>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_VidSetPinDirection+0x146>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_VidSetPinDirection+0x1c6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: CLR_BIT(DDRA,copy_u8Pin);break;
     c8e:	aa e3       	ldi	r26, 0x3A	; 58
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_VidSetPinDirection+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_VidSetPinDirection+0x162>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 1: CLR_BIT(DDRB,copy_u8Pin);break;
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_VidSetPinDirection+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_VidSetPinDirection+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 2: CLR_BIT(DDRC,copy_u8Pin);break;
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_VidSetPinDirection+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_VidSetPinDirection+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_VidSetPinDirection+0x1ee>
			case 3: CLR_BIT(DDRD,copy_u8Pin);break;
     d0c:	a1 e3       	ldi	r26, 0x31	; 49
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e1 e3       	ldi	r30, 0x31	; 49
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_VidSetPinDirection+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_VidSetPinDirection+0x1e0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
		}

	}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue(u8 copy_U8port ,u8 copy_U8Pin , u8 copy_U8Value)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_U8Value==1)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <DIO_VidSetPinValue+0x22>
     d66:	6f c0       	rjmp	.+222    	; 0xe46 <DIO_VidSetPinValue+0x100>
	{
		switch(copy_U8port)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	49 f1       	breq	.+82     	; 0xdce <DIO_VidSetPinValue+0x88>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <DIO_VidSetPinValue+0x4a>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <DIO_VidSetPinValue+0x60>
     d8e:	d2 c0       	rjmp	.+420    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
     d90:	2e 81       	ldd	r18, Y+6	; 0x06
     d92:	3f 81       	ldd	r19, Y+7	; 0x07
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	71 f1       	breq	.+92     	; 0xdf6 <DIO_VidSetPinValue+0xb0>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	e9 f1       	breq	.+122    	; 0xe1e <DIO_VidSetPinValue+0xd8>
     da4:	c7 c0       	rjmp	.+398    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		{
			case 0: SET_BIT(PORTA,copy_U8Pin);
     da6:	ab e3       	ldi	r26, 0x3B	; 59
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e3       	ldi	r30, 0x3B	; 59
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_VidSetPinValue+0x7e>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_VidSetPinValue+0x7a>
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	b3 c0       	rjmp	.+358    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 1: SET_BIT(PORTB,copy_U8Pin);
     dce:	a8 e3       	ldi	r26, 0x38	; 56
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e3       	ldi	r30, 0x38	; 56
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_VidSetPinValue+0xa6>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_VidSetPinValue+0xa2>
     df0:	84 2b       	or	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	9f c0       	rjmp	.+318    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 2: SET_BIT(PORTC,copy_U8Pin);
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_VidSetPinValue+0xce>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_VidSetPinValue+0xca>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	8b c0       	rjmp	.+278    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 3: SET_BIT(PORTD,copy_U8Pin);
     e1e:	a2 e3       	ldi	r26, 0x32	; 50
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e2 e3       	ldi	r30, 0x32	; 50
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_VidSetPinValue+0xf6>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_VidSetPinValue+0xf2>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	77 c0       	rjmp	.+238    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
		}
	}
	else if(copy_U8Value==0)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO_VidSetPinValue+0x108>
     e4c:	73 c0       	rjmp	.+230    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_U8port)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	59 f1       	breq	.+86     	; 0xeb8 <DIO_VidSetPinValue+0x172>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <DIO_VidSetPinValue+0x130>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f0       	breq	.+26     	; 0xe8e <DIO_VidSetPinValue+0x148>
     e74:	5f c0       	rjmp	.+190    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	89 f1       	breq	.+98     	; 0xee2 <DIO_VidSetPinValue+0x19c>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <DIO_VidSetPinValue+0x146>
     e8a:	40 c0       	rjmp	.+128    	; 0xf0c <DIO_VidSetPinValue+0x1c6>
     e8c:	53 c0       	rjmp	.+166    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
		{
			case 0: CLR_BIT(PORTA,copy_U8Pin);
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_VidSetPinValue+0x166>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_VidSetPinValue+0x162>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	3e c0       	rjmp	.+124    	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 1: CLR_BIT(PORTB,copy_U8Pin);
     eb8:	a8 e3       	ldi	r26, 0x38	; 56
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e8 e3       	ldi	r30, 0x38	; 56
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_VidSetPinValue+0x190>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_VidSetPinValue+0x18c>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	29 c0       	rjmp	.+82     	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 2: CLR_BIT(PORTC,copy_U8Pin);
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_VidSetPinValue+0x1ba>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_VidSetPinValue+0x1b6>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <DIO_VidSetPinValue+0x1ee>
				break;
			case 3: CLR_BIT(PORTD,copy_U8Pin);
     f0c:	a2 e3       	ldi	r26, 0x32	; 50
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e2 e3       	ldi	r30, 0x32	; 50
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_VidSetPinValue+0x1e4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_VidSetPinValue+0x1e0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
				break;
		}

	}
}
     f34:	27 96       	adiw	r28, 0x07	; 7
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <DIO_U8GetPinValue>:



u8 DIO_U8GetPinValue(u8 copy_u8port ,u8 copy_U8Pin)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <DIO_U8GetPinValue+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_U8GetPinValue+0x8>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	6b 83       	std	Y+3, r22	; 0x03
	u8 returned_value=0;
     f58:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	4c 81       	ldd	r20, Y+4	; 0x04
     f66:	5d 81       	ldd	r21, Y+5	; 0x05
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	51 05       	cpc	r21, r1
     f6c:	41 f1       	breq	.+80     	; 0xfbe <DIO_U8GetPinValue+0x78>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	34 f4       	brge	.+12     	; 0xf84 <DIO_U8GetPinValue+0x3e>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	61 f0       	breq	.+24     	; 0xf9a <DIO_U8GetPinValue+0x54>
     f82:	52 c0       	rjmp	.+164    	; 0x1028 <DIO_U8GetPinValue+0xe2>
     f84:	4c 81       	ldd	r20, Y+4	; 0x04
     f86:	5d 81       	ldd	r21, Y+5	; 0x05
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	51 05       	cpc	r21, r1
     f8c:	51 f1       	breq	.+84     	; 0xfe2 <DIO_U8GetPinValue+0x9c>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <DIO_U8GetPinValue+0xc0>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <DIO_U8GetPinValue+0xe2>
	{
		case 0:returned_value= GET_BIT(PINA,copy_U8Pin);break;
     f9a:	e9 e3       	ldi	r30, 0x39	; 57
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_U8GetPinValue+0x6c>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_U8GetPinValue+0x68>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	35 c0       	rjmp	.+106    	; 0x1028 <DIO_U8GetPinValue+0xe2>
		case 1:returned_value= GET_BIT(PINB,copy_U8Pin);break;
     fbe:	e6 e3       	ldi	r30, 0x36	; 54
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_U8GetPinValue+0x90>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_U8GetPinValue+0x8c>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <DIO_U8GetPinValue+0xe2>
		case 2:returned_value= GET_BIT(PINC,copy_U8Pin);break;
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_U8GetPinValue+0xb4>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_U8GetPinValue+0xb0>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <DIO_U8GetPinValue+0xe2>
		case 3:returned_value= GET_BIT(PIND,copy_U8Pin);break;
    1006:	e0 e3       	ldi	r30, 0x30	; 48
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_U8GetPinValue+0xd8>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_U8GetPinValue+0xd4>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
	}
	return returned_value;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <DIO_VidSetPortValue>:


void DIO_VidSetPortValue(u8 copy_u8port ,u8 copy_U8Value)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_VidSetPortValue+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_VidSetPortValue+0x8>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	3c 83       	std	Y+4, r19	; 0x04
    1052:	2b 83       	std	Y+3, r18	; 0x03
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	91 05       	cpc	r25, r1
    105c:	d1 f0       	breq	.+52     	; 0x1092 <DIO_VidSetPortValue+0x58>
    105e:	2b 81       	ldd	r18, Y+3	; 0x03
    1060:	3c 81       	ldd	r19, Y+4	; 0x04
    1062:	22 30       	cpi	r18, 0x02	; 2
    1064:	31 05       	cpc	r19, r1
    1066:	2c f4       	brge	.+10     	; 0x1072 <DIO_VidSetPortValue+0x38>
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	61 f0       	breq	.+24     	; 0x1088 <DIO_VidSetPortValue+0x4e>
    1070:	1e c0       	rjmp	.+60     	; 0x10ae <DIO_VidSetPortValue+0x74>
    1072:	2b 81       	ldd	r18, Y+3	; 0x03
    1074:	3c 81       	ldd	r19, Y+4	; 0x04
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	81 f0       	breq	.+32     	; 0x109c <DIO_VidSetPortValue+0x62>
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	91 05       	cpc	r25, r1
    1084:	81 f0       	breq	.+32     	; 0x10a6 <DIO_VidSetPortValue+0x6c>
    1086:	13 c0       	rjmp	.+38     	; 0x10ae <DIO_VidSetPortValue+0x74>
	{
		case 0:PORTA=copy_U8Value;break;
    1088:	eb e3       	ldi	r30, 0x3B	; 59
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	80 83       	st	Z, r24
    1090:	0e c0       	rjmp	.+28     	; 0x10ae <DIO_VidSetPortValue+0x74>
		case 1:PORTB=copy_U8Value;break;
    1092:	e8 e3       	ldi	r30, 0x38	; 56
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	80 83       	st	Z, r24
    109a:	09 c0       	rjmp	.+18     	; 0x10ae <DIO_VidSetPortValue+0x74>
		case 2:PORTC=copy_U8Value;break;
    109c:	e5 e3       	ldi	r30, 0x35	; 53
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	80 83       	st	Z, r24
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <DIO_VidSetPortValue+0x74>
		case 3:PORTD=copy_U8Value;break;
    10a6:	e2 e3       	ldi	r30, 0x32	; 50
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	80 83       	st	Z, r24
	}
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 copy_u8port ,u8 copy_U8Direction)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <DIO_VidSetPortDirection+0x6>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <DIO_VidSetPortDirection+0x8>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3c 83       	std	Y+4, r19	; 0x04
    10d4:	2b 83       	std	Y+3, r18	; 0x03
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	d1 f0       	breq	.+52     	; 0x1114 <DIO_VidSetPortDirection+0x58>
    10e0:	2b 81       	ldd	r18, Y+3	; 0x03
    10e2:	3c 81       	ldd	r19, Y+4	; 0x04
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <DIO_VidSetPortDirection+0x38>
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	61 f0       	breq	.+24     	; 0x110a <DIO_VidSetPortDirection+0x4e>
    10f2:	1e c0       	rjmp	.+60     	; 0x1130 <DIO_VidSetPortDirection+0x74>
    10f4:	2b 81       	ldd	r18, Y+3	; 0x03
    10f6:	3c 81       	ldd	r19, Y+4	; 0x04
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	81 f0       	breq	.+32     	; 0x111e <DIO_VidSetPortDirection+0x62>
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	81 f0       	breq	.+32     	; 0x1128 <DIO_VidSetPortDirection+0x6c>
    1108:	13 c0       	rjmp	.+38     	; 0x1130 <DIO_VidSetPortDirection+0x74>
	{
		case 0:DDRA=copy_U8Direction;break;
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	80 83       	st	Z, r24
    1112:	0e c0       	rjmp	.+28     	; 0x1130 <DIO_VidSetPortDirection+0x74>
		case 1:DDRB=copy_U8Direction;break;
    1114:	e7 e3       	ldi	r30, 0x37	; 55
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	80 83       	st	Z, r24
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <DIO_VidSetPortDirection+0x74>
		case 2:DDRC=copy_U8Direction;break;
    111e:	e4 e3       	ldi	r30, 0x34	; 52
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	80 83       	st	Z, r24
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <DIO_VidSetPortDirection+0x74>
		case 3:DDRD=copy_U8Direction;break;
    1128:	e1 e3       	ldi	r30, 0x31	; 49
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	80 83       	st	Z, r24
	}
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <DIO_VidToggelPinValue>:

void DIO_VidToggelPinValue(u8 copy_u8port ,u8 copy_U8Pin)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <DIO_VidToggelPinValue+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <DIO_VidToggelPinValue+0x8>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8port)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	49 f1       	breq	.+82     	; 0x11b4 <DIO_VidToggelPinValue+0x76>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <DIO_VidToggelPinValue+0x38>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <DIO_VidToggelPinValue+0x4e>
    1174:	5a c0       	rjmp	.+180    	; 0x122a <DIO_VidToggelPinValue+0xec>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	71 f1       	breq	.+92     	; 0x11dc <DIO_VidToggelPinValue+0x9e>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	e9 f1       	breq	.+122    	; 0x1204 <DIO_VidToggelPinValue+0xc6>
    118a:	4f c0       	rjmp	.+158    	; 0x122a <DIO_VidToggelPinValue+0xec>
		{
			case 0: TOG_BIT(PORTA,copy_U8Pin);
    118c:	ab e3       	ldi	r26, 0x3B	; 59
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	eb e3       	ldi	r30, 0x3B	; 59
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_VidToggelPinValue+0x6c>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_VidToggelPinValue+0x68>
    11ae:	84 27       	eor	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	3b c0       	rjmp	.+118    	; 0x122a <DIO_VidToggelPinValue+0xec>
				break;
			case 1: TOG_BIT(PORTB,copy_U8Pin);
    11b4:	a8 e3       	ldi	r26, 0x38	; 56
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e8 e3       	ldi	r30, 0x38	; 56
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_VidToggelPinValue+0x94>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_VidToggelPinValue+0x90>
    11d6:	84 27       	eor	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	27 c0       	rjmp	.+78     	; 0x122a <DIO_VidToggelPinValue+0xec>
				break;
			case 2: TOG_BIT(PORTC,copy_U8Pin);
    11dc:	a5 e3       	ldi	r26, 0x35	; 53
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e5 e3       	ldi	r30, 0x35	; 53
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_VidToggelPinValue+0xbc>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_VidToggelPinValue+0xb8>
    11fe:	84 27       	eor	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	13 c0       	rjmp	.+38     	; 0x122a <DIO_VidToggelPinValue+0xec>
				break;
			case 3: TOG_BIT(PORTD,copy_U8Pin);
    1204:	a2 e3       	ldi	r26, 0x32	; 50
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e2 e3       	ldi	r30, 0x32	; 50
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_VidToggelPinValue+0xe4>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_VidToggelPinValue+0xe0>
    1226:	84 27       	eor	r24, r20
    1228:	8c 93       	st	X, r24
				break;
		}
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <EEPROM_VidWriteByte>:
#include "I2c.h"
#include "EEPROM.h"


void EEPROM_VidWriteByte(u16 Copy_U16ByteAddress, u8 Copy_U8Data)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	61 97       	sbiw	r28, 0x11	; 17
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	98 8b       	std	Y+16, r25	; 0x10
    124e:	8f 87       	std	Y+15, r24	; 0x0f
    1250:	69 8b       	std	Y+17, r22	; 0x11
	TWT_VidStartCondition();
    1252:	0e 94 43 13 	call	0x2686	; 0x2686 <TWT_VidStartCondition>
	/*shift right by 8 cause a0 and a1 is in the most of byte address*/
	TWT_VidSlaveAddAddress(UNIQUE_ADDRESS | (A2<<2) | (Copy_U16ByteAddress>>8));
    1256:	8f 85       	ldd	r24, Y+15	; 0x0f
    1258:	98 89       	ldd	r25, Y+16	; 0x10
    125a:	89 2f       	mov	r24, r25
    125c:	99 27       	eor	r25, r25
    125e:	80 6a       	ori	r24, 0xA0	; 160
    1260:	0e 94 72 13 	call	0x26e4	; 0x26e4 <TWT_VidSlaveAddAddress>

	TWT_VidMasterSendData((u8)Copy_U16ByteAddress);
    1264:	8f 85       	ldd	r24, Y+15	; 0x0f
    1266:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <TWT_VidMasterSendData>
	TWT_VidStartCondition();
    126a:	0e 94 43 13 	call	0x2686	; 0x2686 <TWT_VidStartCondition>
	TWT_VidMasterSendData(Copy_U8Data);
    126e:	89 89       	ldd	r24, Y+17	; 0x11
    1270:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <TWT_VidMasterSendData>

	TWT_VidStopCondition();
    1274:	0e 94 5d 13 	call	0x26ba	; 0x26ba <TWT_VidStopCondition>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 e2       	ldi	r26, 0x20	; 32
    127e:	b1 e4       	ldi	r27, 0x41	; 65
    1280:	8b 87       	std	Y+11, r24	; 0x0b
    1282:	9c 87       	std	Y+12, r25	; 0x0c
    1284:	ad 87       	std	Y+13, r26	; 0x0d
    1286:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1288:	6b 85       	ldd	r22, Y+11	; 0x0b
    128a:	7c 85       	ldd	r23, Y+12	; 0x0c
    128c:	8d 85       	ldd	r24, Y+13	; 0x0d
    128e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	4a ef       	ldi	r20, 0xFA	; 250
    1296:	54 e4       	ldi	r21, 0x44	; 68
    1298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	8f 83       	std	Y+7, r24	; 0x07
    12a2:	98 87       	std	Y+8, r25	; 0x08
    12a4:	a9 87       	std	Y+9, r26	; 0x09
    12a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a8:	6f 81       	ldd	r22, Y+7	; 0x07
    12aa:	78 85       	ldd	r23, Y+8	; 0x08
    12ac:	89 85       	ldd	r24, Y+9	; 0x09
    12ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e8       	ldi	r20, 0x80	; 128
    12b6:	5f e3       	ldi	r21, 0x3F	; 63
    12b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12bc:	88 23       	and	r24, r24
    12be:	2c f4       	brge	.+10     	; 0x12ca <EEPROM_VidWriteByte+0x92>
		__ticks = 1;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	3f c0       	rjmp	.+126    	; 0x1348 <EEPROM_VidWriteByte+0x110>
	else if (__tmp > 65535)
    12ca:	6f 81       	ldd	r22, Y+7	; 0x07
    12cc:	78 85       	ldd	r23, Y+8	; 0x08
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	4f e7       	ldi	r20, 0x7F	; 127
    12d8:	57 e4       	ldi	r21, 0x47	; 71
    12da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12de:	18 16       	cp	r1, r24
    12e0:	4c f5       	brge	.+82     	; 0x1334 <EEPROM_VidWriteByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e2       	ldi	r20, 0x20	; 32
    12f0:	51 e4       	ldi	r21, 0x41	; 65
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	0f c0       	rjmp	.+30     	; 0x132a <EEPROM_VidWriteByte+0xf2>
    130c:	88 ec       	ldi	r24, 0xC8	; 200
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <EEPROM_VidWriteByte+0xe0>
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	69 f7       	brne	.-38     	; 0x130c <EEPROM_VidWriteByte+0xd4>
    1332:	14 c0       	rjmp	.+40     	; 0x135c <EEPROM_VidWriteByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1334:	6f 81       	ldd	r22, Y+7	; 0x07
    1336:	78 85       	ldd	r23, Y+8	; 0x08
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <EEPROM_VidWriteByte+0x11c>
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);



}
    135c:	61 96       	adiw	r28, 0x11	; 17
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <EEPROM_VidReadByte>:



u8 EEPROM_VidReadByte(u16 Copy_U16ByteAddress)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <EEPROM_VidReadByte+0x6>
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9b 83       	std	Y+3, r25	; 0x03
    137c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Data;

	    TWT_VidStartCondition();
    137e:	0e 94 43 13 	call	0x2686	; 0x2686 <TWT_VidStartCondition>
		/*shift right by 8 cause a0 and a1 is in the most of byte address*/
		TWT_VidSlaveAddAddress(UNIQUE_ADDRESS | (A2<<2) | (Copy_U16ByteAddress>>8));
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	89 2f       	mov	r24, r25
    1388:	99 27       	eor	r25, r25
    138a:	80 6a       	ori	r24, 0xA0	; 160
    138c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <TWT_VidSlaveAddAddress>

		TWT_VidMasterSendData((u8)Copy_U16ByteAddress);
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <TWT_VidMasterSendData>
		TWT_VidStartCondition();
    1396:	0e 94 43 13 	call	0x2686	; 0x2686 <TWT_VidStartCondition>
		TWT_VidSlaveAddRead(UNIQUE_ADDRESS | (A2<<2) | (Copy_U16ByteAddress>>8));
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	9b 81       	ldd	r25, Y+3	; 0x03
    139e:	89 2f       	mov	r24, r25
    13a0:	99 27       	eor	r25, r25
    13a2:	80 6a       	ori	r24, 0xA0	; 160
    13a4:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWT_VidSlaveAddRead>


		Local_u8Data=TWT_VidMasterReadData();
    13a8:	0e 94 18 14 	call	0x2830	; 0x2830 <TWT_VidMasterReadData>
    13ac:	89 83       	std	Y+1, r24	; 0x01

		TWT_VidStopCondition();
    13ae:	0e 94 5d 13 	call	0x26ba	; 0x26ba <TWT_VidStopCondition>

		return Local_u8Data;
    13b2:	89 81       	ldd	r24, Y+1	; 0x01


}
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <DOOR_Control>:
u8 password[4] , Check_pass[4];
u8 CHK_COUNT =0;
u8 First_Number[4],Second_Number[4];

void DOOR_Control(void)
{
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	cc 5a       	subi	r28, 0xAC	; 172
    13ce:	d0 40       	sbci	r29, 0x00	; 0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61


	//Motor();
	u8 Pass_Status;
		LCD_VidInit();
    13da:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_VidInit>
		KPD_VidInit();
    13de:	0e 94 2e 14 	call	0x285c	; 0x285c <KPD_VidInit>
		TWT_VidMasterInit();
    13e2:	0e 94 06 13 	call	0x260c	; 0x260c <TWT_VidMasterInit>
    13e6:	fe 01       	movw	r30, r28
    13e8:	eb 55       	subi	r30, 0x5B	; 91
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a8 ec       	ldi	r26, 0xC8	; 200
    13f2:	b2 e4       	ldi	r27, 0x42	; 66
    13f4:	80 83       	st	Z, r24
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	a2 83       	std	Z+2, r26	; 0x02
    13fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	8e 01       	movw	r16, r28
    13fe:	0f 55       	subi	r16, 0x5F	; 95
    1400:	1f 4f       	sbci	r17, 0xFF	; 255
    1402:	fe 01       	movw	r30, r28
    1404:	eb 55       	subi	r30, 0x5B	; 91
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a ef       	ldi	r20, 0xFA	; 250
    1416:	54 e4       	ldi	r21, 0x44	; 68
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	f8 01       	movw	r30, r16
    1422:	80 83       	st	Z, r24
    1424:	91 83       	std	Z+1, r25	; 0x01
    1426:	a2 83       	std	Z+2, r26	; 0x02
    1428:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    142a:	fe 01       	movw	r30, r28
    142c:	ef 55       	subi	r30, 0x5F	; 95
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e8       	ldi	r20, 0x80	; 128
    143e:	5f e3       	ldi	r21, 0x3F	; 63
    1440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1444:	88 23       	and	r24, r24
    1446:	44 f4       	brge	.+16     	; 0x1458 <DOOR_Control+0x98>
		__ticks = 1;
    1448:	fe 01       	movw	r30, r28
    144a:	e1 56       	subi	r30, 0x61	; 97
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
    1456:	64 c0       	rjmp	.+200    	; 0x1520 <DOOR_Control+0x160>
	else if (__tmp > 65535)
    1458:	fe 01       	movw	r30, r28
    145a:	ef 55       	subi	r30, 0x5F	; 95
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	3f ef       	ldi	r19, 0xFF	; 255
    146a:	4f e7       	ldi	r20, 0x7F	; 127
    146c:	57 e4       	ldi	r21, 0x47	; 71
    146e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1472:	18 16       	cp	r1, r24
    1474:	0c f0       	brlt	.+2      	; 0x1478 <DOOR_Control+0xb8>
    1476:	43 c0       	rjmp	.+134    	; 0x14fe <DOOR_Control+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1478:	fe 01       	movw	r30, r28
    147a:	eb 55       	subi	r30, 0x5B	; 91
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	60 81       	ld	r22, Z
    1480:	71 81       	ldd	r23, Z+1	; 0x01
    1482:	82 81       	ldd	r24, Z+2	; 0x02
    1484:	93 81       	ldd	r25, Z+3	; 0x03
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e2       	ldi	r20, 0x20	; 32
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	8e 01       	movw	r16, r28
    1498:	01 56       	subi	r16, 0x61	; 97
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	f8 01       	movw	r30, r16
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	80 83       	st	Z, r24
    14ae:	1f c0       	rjmp	.+62     	; 0x14ee <DOOR_Control+0x12e>
    14b0:	fe 01       	movw	r30, r28
    14b2:	e3 56       	subi	r30, 0x63	; 99
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	88 ec       	ldi	r24, 0xC8	; 200
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	80 83       	st	Z, r24
    14be:	fe 01       	movw	r30, r28
    14c0:	e3 56       	subi	r30, 0x63	; 99
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <DOOR_Control+0x108>
    14cc:	fe 01       	movw	r30, r28
    14ce:	e3 56       	subi	r30, 0x63	; 99
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d6:	de 01       	movw	r26, r28
    14d8:	a1 56       	subi	r26, 0x61	; 97
    14da:	bf 4f       	sbci	r27, 0xFF	; 255
    14dc:	fe 01       	movw	r30, r28
    14de:	e1 56       	subi	r30, 0x61	; 97
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	11 96       	adiw	r26, 0x01	; 1
    14ea:	9c 93       	st	X, r25
    14ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	fe 01       	movw	r30, r28
    14f0:	e1 56       	subi	r30, 0x61	; 97
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	d1 f6       	brne	.-76     	; 0x14b0 <DOOR_Control+0xf0>
    14fc:	27 c0       	rjmp	.+78     	; 0x154c <DOOR_Control+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fe:	8e 01       	movw	r16, r28
    1500:	01 56       	subi	r16, 0x61	; 97
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	fe 01       	movw	r30, r28
    1506:	ef 55       	subi	r30, 0x5F	; 95
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	f8 01       	movw	r30, r16
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	80 83       	st	Z, r24
    1520:	de 01       	movw	r26, r28
    1522:	a5 56       	subi	r26, 0x65	; 101
    1524:	bf 4f       	sbci	r27, 0xFF	; 255
    1526:	fe 01       	movw	r30, r28
    1528:	e1 56       	subi	r30, 0x61	; 97
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	8d 93       	st	X+, r24
    1532:	9c 93       	st	X, r25
    1534:	fe 01       	movw	r30, r28
    1536:	e5 56       	subi	r30, 0x65	; 101
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <DOOR_Control+0x17e>
    1542:	fe 01       	movw	r30, r28
    1544:	e5 56       	subi	r30, 0x65	; 101
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	91 83       	std	Z+1, r25	; 0x01
    154a:	80 83       	st	Z, r24
		_delay_ms(100);
		KPD_VALUE=KPD_CHEK;
    154c:	8f ef       	ldi	r24, 0xFF	; 255
    154e:	80 93 1c 01 	sts	0x011C, r24

		Pass_Status=EEPROM_VidReadByte(Check_Save_address); //problem
    1552:	80 91 36 01 	lds	r24, 0x0136
    1556:	90 91 37 01 	lds	r25, 0x0137
    155a:	0e 94 b7 09 	call	0x136e	; 0x136e <EEPROM_VidReadByte>
    155e:	fe 01       	movw	r30, r28
    1560:	e4 55       	subi	r30, 0x54	; 84
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	80 83       	st	Z, r24
		/*check if first time to enter pass or not */
		if(1 != Pass_Status)
    1566:	fe 01       	movw	r30, r28
    1568:	e4 55       	subi	r30, 0x54	; 84
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 81       	ld	r24, Z
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	09 f4       	brne	.+2      	; 0x1574 <DOOR_Control+0x1b4>
    1572:	ba c5       	rjmp	.+2932   	; 0x20e8 <DOOR_Control+0xd28>
		{
		    /*Set password for first time */

			LCD_VidSendStringPos("Set ur PASS ",1,1);
    1574:	80 e6       	ldi	r24, 0x60	; 96
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
		    while(1)
		    {
		    	do{
		    		KPD_VALUE=KPD_U8PressedKey();
    1584:	0e 94 3d 14 	call	0x287a	; 0x287a <KPD_U8PressedKey>
    1588:	80 93 1c 01 	sts	0x011C, r24
		    	}while(KPD_VALUE == KPD_CHEK );
    158c:	80 91 1c 01 	lds	r24, 0x011C
    1590:	8f 3f       	cpi	r24, 0xFF	; 255
    1592:	c1 f3       	breq	.-16     	; 0x1584 <DOOR_Control+0x1c4>
		    		KPD_COUNTER++;
    1594:	80 91 39 01 	lds	r24, 0x0139
    1598:	8f 5f       	subi	r24, 0xFF	; 255
    159a:	80 93 39 01 	sts	0x0139, r24
		    	if(KPD_VALUE == '&') break;
    159e:	80 91 1c 01 	lds	r24, 0x011C
    15a2:	86 32       	cpi	r24, 0x26	; 38
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <DOOR_Control+0x1e8>
    15a6:	e3 c0       	rjmp	.+454    	; 0x176e <DOOR_Control+0x3ae>
		    	LCD_VidSendNumberPos(KPD_VALUE,2,KPD_COUNTER);
    15a8:	80 91 1c 01 	lds	r24, 0x011C
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a0 e0       	ldi	r26, 0x00	; 0
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	20 91 39 01 	lds	r18, 0x0139
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	42 e0       	ldi	r20, 0x02	; 2
    15be:	0e 94 f7 19 	call	0x33ee	; 0x33ee <LCD_VidSendNumberPos>
    15c2:	fe 01       	movw	r30, r28
    15c4:	e9 56       	subi	r30, 0x69	; 105
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a8 e4       	ldi	r26, 0x48	; 72
    15ce:	b2 e4       	ldi	r27, 0x42	; 66
    15d0:	80 83       	st	Z, r24
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	a2 83       	std	Z+2, r26	; 0x02
    15d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d8:	8e 01       	movw	r16, r28
    15da:	0d 56       	subi	r16, 0x6D	; 109
    15dc:	1f 4f       	sbci	r17, 0xFF	; 255
    15de:	fe 01       	movw	r30, r28
    15e0:	e9 56       	subi	r30, 0x69	; 105
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	4a ef       	ldi	r20, 0xFA	; 250
    15f2:	54 e4       	ldi	r21, 0x44	; 68
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	f8 01       	movw	r30, r16
    15fe:	80 83       	st	Z, r24
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	a2 83       	std	Z+2, r26	; 0x02
    1604:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1606:	fe 01       	movw	r30, r28
    1608:	ed 56       	subi	r30, 0x6D	; 109
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e8       	ldi	r20, 0x80	; 128
    161a:	5f e3       	ldi	r21, 0x3F	; 63
    161c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1620:	88 23       	and	r24, r24
    1622:	44 f4       	brge	.+16     	; 0x1634 <DOOR_Control+0x274>
		__ticks = 1;
    1624:	fe 01       	movw	r30, r28
    1626:	ef 56       	subi	r30, 0x6F	; 111
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	91 83       	std	Z+1, r25	; 0x01
    1630:	80 83       	st	Z, r24
    1632:	64 c0       	rjmp	.+200    	; 0x16fc <DOOR_Control+0x33c>
	else if (__tmp > 65535)
    1634:	fe 01       	movw	r30, r28
    1636:	ed 56       	subi	r30, 0x6D	; 109
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	60 81       	ld	r22, Z
    163c:	71 81       	ldd	r23, Z+1	; 0x01
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	93 81       	ldd	r25, Z+3	; 0x03
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	3f ef       	ldi	r19, 0xFF	; 255
    1646:	4f e7       	ldi	r20, 0x7F	; 127
    1648:	57 e4       	ldi	r21, 0x47	; 71
    164a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164e:	18 16       	cp	r1, r24
    1650:	0c f0       	brlt	.+2      	; 0x1654 <DOOR_Control+0x294>
    1652:	43 c0       	rjmp	.+134    	; 0x16da <DOOR_Control+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1654:	fe 01       	movw	r30, r28
    1656:	e9 56       	subi	r30, 0x69	; 105
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	60 81       	ld	r22, Z
    165c:	71 81       	ldd	r23, Z+1	; 0x01
    165e:	82 81       	ldd	r24, Z+2	; 0x02
    1660:	93 81       	ldd	r25, Z+3	; 0x03
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	51 e4       	ldi	r21, 0x41	; 65
    166a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	8e 01       	movw	r16, r28
    1674:	0f 56       	subi	r16, 0x6F	; 111
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	f8 01       	movw	r30, r16
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
    168a:	1f c0       	rjmp	.+62     	; 0x16ca <DOOR_Control+0x30a>
    168c:	fe 01       	movw	r30, r28
    168e:	e1 57       	subi	r30, 0x71	; 113
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	88 ec       	ldi	r24, 0xC8	; 200
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
    169a:	fe 01       	movw	r30, r28
    169c:	e1 57       	subi	r30, 0x71	; 113
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <DOOR_Control+0x2e4>
    16a8:	fe 01       	movw	r30, r28
    16aa:	e1 57       	subi	r30, 0x71	; 113
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b2:	de 01       	movw	r26, r28
    16b4:	af 56       	subi	r26, 0x6F	; 111
    16b6:	bf 4f       	sbci	r27, 0xFF	; 255
    16b8:	fe 01       	movw	r30, r28
    16ba:	ef 56       	subi	r30, 0x6F	; 111
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	11 96       	adiw	r26, 0x01	; 1
    16c6:	9c 93       	st	X, r25
    16c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ca:	fe 01       	movw	r30, r28
    16cc:	ef 56       	subi	r30, 0x6F	; 111
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	d1 f6       	brne	.-76     	; 0x168c <DOOR_Control+0x2cc>
    16d8:	27 c0       	rjmp	.+78     	; 0x1728 <DOOR_Control+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	8e 01       	movw	r16, r28
    16dc:	0f 56       	subi	r16, 0x6F	; 111
    16de:	1f 4f       	sbci	r17, 0xFF	; 255
    16e0:	fe 01       	movw	r30, r28
    16e2:	ed 56       	subi	r30, 0x6D	; 109
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	60 81       	ld	r22, Z
    16e8:	71 81       	ldd	r23, Z+1	; 0x01
    16ea:	82 81       	ldd	r24, Z+2	; 0x02
    16ec:	93 81       	ldd	r25, Z+3	; 0x03
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	f8 01       	movw	r30, r16
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
    16fc:	de 01       	movw	r26, r28
    16fe:	a3 57       	subi	r26, 0x73	; 115
    1700:	bf 4f       	sbci	r27, 0xFF	; 255
    1702:	fe 01       	movw	r30, r28
    1704:	ef 56       	subi	r30, 0x6F	; 111
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	8d 93       	st	X+, r24
    170e:	9c 93       	st	X, r25
    1710:	fe 01       	movw	r30, r28
    1712:	e3 57       	subi	r30, 0x73	; 115
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 81       	ld	r24, Z
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <DOOR_Control+0x35a>
    171e:	fe 01       	movw	r30, r28
    1720:	e3 57       	subi	r30, 0x73	; 115
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	80 83       	st	Z, r24
		    	_delay_ms(50);
		    	LCD_VidSendCharPos('*',2,KPD_COUNTER);
    1728:	90 91 39 01 	lds	r25, 0x0139
    172c:	8a e2       	ldi	r24, 0x2A	; 42
    172e:	62 e0       	ldi	r22, 0x02	; 2
    1730:	49 2f       	mov	r20, r25
    1732:	0e 94 44 1a 	call	0x3488	; 0x3488 <LCD_VidSendCharPos>
		    	password[KPD_COUNTER]=KPD_VALUE;
    1736:	80 91 39 01 	lds	r24, 0x0139
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	20 91 1c 01 	lds	r18, 0x011C
    1742:	fc 01       	movw	r30, r24
    1744:	e5 5c       	subi	r30, 0xC5	; 197
    1746:	fe 4f       	sbci	r31, 0xFE	; 254
    1748:	20 83       	st	Z, r18
		    	EEPROM_VidWriteByte(address[KPD_COUNTER-1],KPD_VALUE);
    174a:	80 91 39 01 	lds	r24, 0x0139
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	fc 01       	movw	r30, r24
    175a:	ec 5e       	subi	r30, 0xEC	; 236
    175c:	fe 4f       	sbci	r31, 0xFE	; 254
    175e:	80 81       	ld	r24, Z
    1760:	91 81       	ldd	r25, Z+1	; 0x01
    1762:	20 91 1c 01 	lds	r18, 0x011C
    1766:	62 2f       	mov	r22, r18
    1768:	0e 94 1c 09 	call	0x1238	; 0x1238 <EEPROM_VidWriteByte>
    176c:	0b cf       	rjmp	.-490    	; 0x1584 <DOOR_Control+0x1c4>

		   }
		    EEPROM_VidWriteByte(Check_Save_address,1);
    176e:	80 91 36 01 	lds	r24, 0x0136
    1772:	90 91 37 01 	lds	r25, 0x0137
    1776:	61 e0       	ldi	r22, 0x01	; 1
    1778:	0e 94 1c 09 	call	0x1238	; 0x1238 <EEPROM_VidWriteByte>
		    LCD_VidCLR();
    177c:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_VidCLR>
		    LCD_VidSendStringPos("Password saved",1,1);
    1780:	8d e6       	ldi	r24, 0x6D	; 109
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	41 e0       	ldi	r20, 0x01	; 1
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
    1790:	fe 01       	movw	r30, r28
    1792:	e7 57       	subi	r30, 0x77	; 119
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a8 e4       	ldi	r26, 0x48	; 72
    179c:	b3 e4       	ldi	r27, 0x43	; 67
    179e:	80 83       	st	Z, r24
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	a2 83       	std	Z+2, r26	; 0x02
    17a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a6:	8e 01       	movw	r16, r28
    17a8:	0b 57       	subi	r16, 0x7B	; 123
    17aa:	1f 4f       	sbci	r17, 0xFF	; 255
    17ac:	fe 01       	movw	r30, r28
    17ae:	e7 57       	subi	r30, 0x77	; 119
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	4a ef       	ldi	r20, 0xFA	; 250
    17c0:	54 e4       	ldi	r21, 0x44	; 68
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	f8 01       	movw	r30, r16
    17cc:	80 83       	st	Z, r24
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	a2 83       	std	Z+2, r26	; 0x02
    17d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d4:	fe 01       	movw	r30, r28
    17d6:	eb 57       	subi	r30, 0x7B	; 123
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	44 f4       	brge	.+16     	; 0x1802 <DOOR_Control+0x442>
		__ticks = 1;
    17f2:	fe 01       	movw	r30, r28
    17f4:	ed 57       	subi	r30, 0x7D	; 125
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
    1800:	64 c0       	rjmp	.+200    	; 0x18ca <DOOR_Control+0x50a>
	else if (__tmp > 65535)
    1802:	fe 01       	movw	r30, r28
    1804:	eb 57       	subi	r30, 0x7B	; 123
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	3f ef       	ldi	r19, 0xFF	; 255
    1814:	4f e7       	ldi	r20, 0x7F	; 127
    1816:	57 e4       	ldi	r21, 0x47	; 71
    1818:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181c:	18 16       	cp	r1, r24
    181e:	0c f0       	brlt	.+2      	; 0x1822 <DOOR_Control+0x462>
    1820:	43 c0       	rjmp	.+134    	; 0x18a8 <DOOR_Control+0x4e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	fe 01       	movw	r30, r28
    1824:	e7 57       	subi	r30, 0x77	; 119
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	60 81       	ld	r22, Z
    182a:	71 81       	ldd	r23, Z+1	; 0x01
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	93 81       	ldd	r25, Z+3	; 0x03
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e2       	ldi	r20, 0x20	; 32
    1836:	51 e4       	ldi	r21, 0x41	; 65
    1838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8e 01       	movw	r16, r28
    1842:	0d 57       	subi	r16, 0x7D	; 125
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	f8 01       	movw	r30, r16
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
    1858:	1f c0       	rjmp	.+62     	; 0x1898 <DOOR_Control+0x4d8>
    185a:	fe 01       	movw	r30, r28
    185c:	ef 57       	subi	r30, 0x7F	; 127
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	88 ec       	ldi	r24, 0xC8	; 200
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	80 83       	st	Z, r24
    1868:	fe 01       	movw	r30, r28
    186a:	ef 57       	subi	r30, 0x7F	; 127
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <DOOR_Control+0x4b2>
    1876:	fe 01       	movw	r30, r28
    1878:	ef 57       	subi	r30, 0x7F	; 127
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	de 01       	movw	r26, r28
    1882:	ad 57       	subi	r26, 0x7D	; 125
    1884:	bf 4f       	sbci	r27, 0xFF	; 255
    1886:	fe 01       	movw	r30, r28
    1888:	ed 57       	subi	r30, 0x7D	; 125
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	80 81       	ld	r24, Z
    188e:	91 81       	ldd	r25, Z+1	; 0x01
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	11 96       	adiw	r26, 0x01	; 1
    1894:	9c 93       	st	X, r25
    1896:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1898:	fe 01       	movw	r30, r28
    189a:	ed 57       	subi	r30, 0x7D	; 125
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	d1 f6       	brne	.-76     	; 0x185a <DOOR_Control+0x49a>
    18a6:	27 c0       	rjmp	.+78     	; 0x18f6 <DOOR_Control+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a8:	8e 01       	movw	r16, r28
    18aa:	0d 57       	subi	r16, 0x7D	; 125
    18ac:	1f 4f       	sbci	r17, 0xFF	; 255
    18ae:	fe 01       	movw	r30, r28
    18b0:	eb 57       	subi	r30, 0x7B	; 123
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	f8 01       	movw	r30, r16
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
    18ca:	de 01       	movw	r26, r28
    18cc:	a1 58       	subi	r26, 0x81	; 129
    18ce:	bf 4f       	sbci	r27, 0xFF	; 255
    18d0:	fe 01       	movw	r30, r28
    18d2:	ed 57       	subi	r30, 0x7D	; 125
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	8d 93       	st	X+, r24
    18dc:	9c 93       	st	X, r25
    18de:	fe 01       	movw	r30, r28
    18e0:	e1 58       	subi	r30, 0x81	; 129
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <DOOR_Control+0x528>
    18ec:	fe 01       	movw	r30, r28
    18ee:	e1 58       	subi	r30, 0x81	; 129
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
		    _delay_ms(200);
		    //EEPROM_VidWriteData(Check_Save_address,1);

		    /*CHECK PASSWORD*/
		    LCD_VidCLR();
    18f6:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_VidCLR>
    18fa:	fe 01       	movw	r30, r28
    18fc:	e5 58       	subi	r30, 0x85	; 133
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a8 ec       	ldi	r26, 0xC8	; 200
    1906:	b2 e4       	ldi	r27, 0x42	; 66
    1908:	80 83       	st	Z, r24
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	a2 83       	std	Z+2, r26	; 0x02
    190e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1910:	8e 01       	movw	r16, r28
    1912:	09 58       	subi	r16, 0x89	; 137
    1914:	1f 4f       	sbci	r17, 0xFF	; 255
    1916:	fe 01       	movw	r30, r28
    1918:	e5 58       	subi	r30, 0x85	; 133
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	82 81       	ldd	r24, Z+2	; 0x02
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4a ef       	ldi	r20, 0xFA	; 250
    192a:	54 e4       	ldi	r21, 0x44	; 68
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	f8 01       	movw	r30, r16
    1936:	80 83       	st	Z, r24
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	a2 83       	std	Z+2, r26	; 0x02
    193c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    193e:	fe 01       	movw	r30, r28
    1940:	e9 58       	subi	r30, 0x89	; 137
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1958:	88 23       	and	r24, r24
    195a:	44 f4       	brge	.+16     	; 0x196c <DOOR_Control+0x5ac>
		__ticks = 1;
    195c:	fe 01       	movw	r30, r28
    195e:	eb 58       	subi	r30, 0x8B	; 139
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24
    196a:	64 c0       	rjmp	.+200    	; 0x1a34 <DOOR_Control+0x674>
	else if (__tmp > 65535)
    196c:	fe 01       	movw	r30, r28
    196e:	e9 58       	subi	r30, 0x89	; 137
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	57 e4       	ldi	r21, 0x47	; 71
    1982:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1986:	18 16       	cp	r1, r24
    1988:	0c f0       	brlt	.+2      	; 0x198c <DOOR_Control+0x5cc>
    198a:	43 c0       	rjmp	.+134    	; 0x1a12 <DOOR_Control+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198c:	fe 01       	movw	r30, r28
    198e:	e5 58       	subi	r30, 0x85	; 133
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	60 81       	ld	r22, Z
    1994:	71 81       	ldd	r23, Z+1	; 0x01
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e2       	ldi	r20, 0x20	; 32
    19a0:	51 e4       	ldi	r21, 0x41	; 65
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8e 01       	movw	r16, r28
    19ac:	0b 58       	subi	r16, 0x8B	; 139
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	bc 01       	movw	r22, r24
    19b2:	cd 01       	movw	r24, r26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	f8 01       	movw	r30, r16
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	1f c0       	rjmp	.+62     	; 0x1a02 <DOOR_Control+0x642>
    19c4:	fe 01       	movw	r30, r28
    19c6:	ed 58       	subi	r30, 0x8D	; 141
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	88 ec       	ldi	r24, 0xC8	; 200
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	fe 01       	movw	r30, r28
    19d4:	ed 58       	subi	r30, 0x8D	; 141
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <DOOR_Control+0x61c>
    19e0:	fe 01       	movw	r30, r28
    19e2:	ed 58       	subi	r30, 0x8D	; 141
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ea:	de 01       	movw	r26, r28
    19ec:	ab 58       	subi	r26, 0x8B	; 139
    19ee:	bf 4f       	sbci	r27, 0xFF	; 255
    19f0:	fe 01       	movw	r30, r28
    19f2:	eb 58       	subi	r30, 0x8B	; 139
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 81       	ld	r24, Z
    19f8:	91 81       	ldd	r25, Z+1	; 0x01
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	11 96       	adiw	r26, 0x01	; 1
    19fe:	9c 93       	st	X, r25
    1a00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	fe 01       	movw	r30, r28
    1a04:	eb 58       	subi	r30, 0x8B	; 139
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	d1 f6       	brne	.-76     	; 0x19c4 <DOOR_Control+0x604>
    1a10:	27 c0       	rjmp	.+78     	; 0x1a60 <DOOR_Control+0x6a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a12:	8e 01       	movw	r16, r28
    1a14:	0b 58       	subi	r16, 0x8B	; 139
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e9 58       	subi	r30, 0x89	; 137
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	60 81       	ld	r22, Z
    1a20:	71 81       	ldd	r23, Z+1	; 0x01
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	f8 01       	movw	r30, r16
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
    1a34:	de 01       	movw	r26, r28
    1a36:	af 58       	subi	r26, 0x8F	; 143
    1a38:	bf 4f       	sbci	r27, 0xFF	; 255
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	eb 58       	subi	r30, 0x8B	; 139
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	8d 93       	st	X+, r24
    1a46:	9c 93       	st	X, r25
    1a48:	fe 01       	movw	r30, r28
    1a4a:	ef 58       	subi	r30, 0x8F	; 143
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <DOOR_Control+0x692>
    1a56:	fe 01       	movw	r30, r28
    1a58:	ef 58       	subi	r30, 0x8F	; 143
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
		    _delay_ms(100);
		    LCD_VidSendStringPos("Check ur PASS ",1,1);
    1a60:	8c e7       	ldi	r24, 0x7C	; 124
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	41 e0       	ldi	r20, 0x01	; 1
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
		    KPD_VALUE=KPD_CHEK;
    1a70:	8f ef       	ldi	r24, 0xFF	; 255
    1a72:	80 93 1c 01 	sts	0x011C, r24
    1a76:	e3 c0       	rjmp	.+454    	; 0x1c3e <DOOR_Control+0x87e>
		    while(KPD_VALUE != '&')
		    	{
		    		do{
		    		    KPD_VALUE=KPD_U8PressedKey();
    1a78:	0e 94 3d 14 	call	0x287a	; 0x287a <KPD_U8PressedKey>
    1a7c:	80 93 1c 01 	sts	0x011C, r24
		    		   }while(KPD_VALUE == KPD_CHEK );
    1a80:	80 91 1c 01 	lds	r24, 0x011C
    1a84:	8f 3f       	cpi	r24, 0xFF	; 255
    1a86:	c1 f3       	breq	.-16     	; 0x1a78 <DOOR_Control+0x6b8>
		    		    CHK_COUNT++;
    1a88:	80 91 3a 01 	lds	r24, 0x013A
    1a8c:	8f 5f       	subi	r24, 0xFF	; 255
    1a8e:	80 93 3a 01 	sts	0x013A, r24
		    		    if(KPD_VALUE == '&') break;
    1a92:	80 91 1c 01 	lds	r24, 0x011C
    1a96:	86 32       	cpi	r24, 0x26	; 38
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <DOOR_Control+0x6dc>
    1a9a:	d6 c0       	rjmp	.+428    	; 0x1c48 <DOOR_Control+0x888>
		    		    LCD_VidSendNumberPos(KPD_VALUE,2,CHK_COUNT);
    1a9c:	80 91 1c 01 	lds	r24, 0x011C
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a0 e0       	ldi	r26, 0x00	; 0
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	20 91 3a 01 	lds	r18, 0x013A
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	42 e0       	ldi	r20, 0x02	; 2
    1ab2:	0e 94 f7 19 	call	0x33ee	; 0x33ee <LCD_VidSendNumberPos>
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e3 59       	subi	r30, 0x93	; 147
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	a8 e4       	ldi	r26, 0x48	; 72
    1ac2:	b2 e4       	ldi	r27, 0x42	; 66
    1ac4:	80 83       	st	Z, r24
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	a2 83       	std	Z+2, r26	; 0x02
    1aca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1acc:	8e 01       	movw	r16, r28
    1ace:	07 59       	subi	r16, 0x97	; 151
    1ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e3 59       	subi	r30, 0x93	; 147
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	60 81       	ld	r22, Z
    1ada:	71 81       	ldd	r23, Z+1	; 0x01
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	93 81       	ldd	r25, Z+3	; 0x03
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	4a ef       	ldi	r20, 0xFA	; 250
    1ae6:	54 e4       	ldi	r21, 0x44	; 68
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	f8 01       	movw	r30, r16
    1af2:	80 83       	st	Z, r24
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	a2 83       	std	Z+2, r26	; 0x02
    1af8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1afa:	fe 01       	movw	r30, r28
    1afc:	e7 59       	subi	r30, 0x97	; 151
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e8       	ldi	r20, 0x80	; 128
    1b0e:	5f e3       	ldi	r21, 0x3F	; 63
    1b10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b14:	88 23       	and	r24, r24
    1b16:	44 f4       	brge	.+16     	; 0x1b28 <DOOR_Control+0x768>
		__ticks = 1;
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e9 59       	subi	r30, 0x99	; 153
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	80 83       	st	Z, r24
    1b26:	64 c0       	rjmp	.+200    	; 0x1bf0 <DOOR_Control+0x830>
	else if (__tmp > 65535)
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e7 59       	subi	r30, 0x97	; 151
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	3f ef       	ldi	r19, 0xFF	; 255
    1b3a:	4f e7       	ldi	r20, 0x7F	; 127
    1b3c:	57 e4       	ldi	r21, 0x47	; 71
    1b3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b42:	18 16       	cp	r1, r24
    1b44:	0c f0       	brlt	.+2      	; 0x1b48 <DOOR_Control+0x788>
    1b46:	43 c0       	rjmp	.+134    	; 0x1bce <DOOR_Control+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e3 59       	subi	r30, 0x93	; 147
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8e 01       	movw	r16, r28
    1b68:	09 59       	subi	r16, 0x99	; 153
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	cd 01       	movw	r24, r26
    1b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	f8 01       	movw	r30, r16
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    1b7e:	1f c0       	rjmp	.+62     	; 0x1bbe <DOOR_Control+0x7fe>
    1b80:	fe 01       	movw	r30, r28
    1b82:	eb 59       	subi	r30, 0x9B	; 155
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	88 ec       	ldi	r24, 0xC8	; 200
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	80 83       	st	Z, r24
    1b8e:	fe 01       	movw	r30, r28
    1b90:	eb 59       	subi	r30, 0x9B	; 155
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <DOOR_Control+0x7d8>
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	eb 59       	subi	r30, 0x9B	; 155
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	91 83       	std	Z+1, r25	; 0x01
    1ba4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba6:	de 01       	movw	r26, r28
    1ba8:	a9 59       	subi	r26, 0x99	; 153
    1baa:	bf 4f       	sbci	r27, 0xFF	; 255
    1bac:	fe 01       	movw	r30, r28
    1bae:	e9 59       	subi	r30, 0x99	; 153
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	91 81       	ldd	r25, Z+1	; 0x01
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	11 96       	adiw	r26, 0x01	; 1
    1bba:	9c 93       	st	X, r25
    1bbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e9 59       	subi	r30, 0x99	; 153
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 81       	ld	r24, Z
    1bc6:	91 81       	ldd	r25, Z+1	; 0x01
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	d1 f6       	brne	.-76     	; 0x1b80 <DOOR_Control+0x7c0>
    1bcc:	27 c0       	rjmp	.+78     	; 0x1c1c <DOOR_Control+0x85c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bce:	8e 01       	movw	r16, r28
    1bd0:	09 59       	subi	r16, 0x99	; 153
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e7 59       	subi	r30, 0x97	; 151
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	60 81       	ld	r22, Z
    1bdc:	71 81       	ldd	r23, Z+1	; 0x01
    1bde:	82 81       	ldd	r24, Z+2	; 0x02
    1be0:	93 81       	ldd	r25, Z+3	; 0x03
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	f8 01       	movw	r30, r16
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
    1bf0:	de 01       	movw	r26, r28
    1bf2:	ad 59       	subi	r26, 0x9D	; 157
    1bf4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e9 59       	subi	r30, 0x99	; 153
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 81       	ld	r24, Z
    1bfe:	91 81       	ldd	r25, Z+1	; 0x01
    1c00:	8d 93       	st	X+, r24
    1c02:	9c 93       	st	X, r25
    1c04:	fe 01       	movw	r30, r28
    1c06:	ed 59       	subi	r30, 0x9D	; 157
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <DOOR_Control+0x84e>
    1c12:	fe 01       	movw	r30, r28
    1c14:	ed 59       	subi	r30, 0x9D	; 157
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	80 83       	st	Z, r24
		    		    _delay_ms(50);
		    		    LCD_VidSendCharPos('*',2,CHK_COUNT);
    1c1c:	90 91 3a 01 	lds	r25, 0x013A
    1c20:	8a e2       	ldi	r24, 0x2A	; 42
    1c22:	62 e0       	ldi	r22, 0x02	; 2
    1c24:	49 2f       	mov	r20, r25
    1c26:	0e 94 44 1a 	call	0x3488	; 0x3488 <LCD_VidSendCharPos>
		    		    Check_pass[CHK_COUNT]=KPD_VALUE;
    1c2a:	80 91 3a 01 	lds	r24, 0x013A
    1c2e:	88 2f       	mov	r24, r24
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	20 91 1c 01 	lds	r18, 0x011C
    1c36:	fc 01       	movw	r30, r24
    1c38:	e9 5b       	subi	r30, 0xB9	; 185
    1c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c3c:	20 83       	st	Z, r18
		    /*CHECK PASSWORD*/
		    LCD_VidCLR();
		    _delay_ms(100);
		    LCD_VidSendStringPos("Check ur PASS ",1,1);
		    KPD_VALUE=KPD_CHEK;
		    while(KPD_VALUE != '&')
    1c3e:	80 91 1c 01 	lds	r24, 0x011C
    1c42:	86 32       	cpi	r24, 0x26	; 38
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <DOOR_Control+0x888>
    1c46:	18 cf       	rjmp	.-464    	; 0x1a78 <DOOR_Control+0x6b8>
		    		    Check_pass[CHK_COUNT]=KPD_VALUE;

		    		    }

		    /*Check password is correct or not*/
		    if(Checking_Pass(password,Check_pass,KPD_COUNTER))
    1c48:	40 91 39 01 	lds	r20, 0x0139
    1c4c:	8b e3       	ldi	r24, 0x3B	; 59
    1c4e:	91 e0       	ldi	r25, 0x01	; 1
    1c50:	27 e4       	ldi	r18, 0x47	; 71
    1c52:	31 e0       	ldi	r19, 0x01	; 1
    1c54:	b9 01       	movw	r22, r18
    1c56:	0e 94 28 15 	call	0x2a50	; 0x2a50 <Checking_Pass>
    1c5a:	88 23       	and	r24, r24
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <DOOR_Control+0x8a0>
    1c5e:	a2 c1       	rjmp	.+836    	; 0x1fa4 <DOOR_Control+0xbe4>
		    	{
		    		     /*starting words */

		    		    LCD_VidCLR();
    1c60:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_VidCLR>
		    		    LCD_VidSendStringPos("Succesful login",1,1);
    1c64:	8b e8       	ldi	r24, 0x8B	; 139
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
		    		    for(u8 k=0;k<6;k++)
    1c74:	fe 01       	movw	r30, r28
    1c76:	e5 55       	subi	r30, 0x55	; 85
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	10 82       	st	Z, r1
    1c7c:	c7 c0       	rjmp	.+398    	; 0x1e0c <DOOR_Control+0xa4c>
		    		    {
		    		     LCD_VidSendCharPos('.',2,k+1);
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e5 55       	subi	r30, 0x55	; 85
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 81       	ld	r24, Z
    1c86:	98 2f       	mov	r25, r24
    1c88:	9f 5f       	subi	r25, 0xFF	; 255
    1c8a:	8e e2       	ldi	r24, 0x2E	; 46
    1c8c:	62 e0       	ldi	r22, 0x02	; 2
    1c8e:	49 2f       	mov	r20, r25
    1c90:	0e 94 44 1a 	call	0x3488	; 0x3488 <LCD_VidSendCharPos>
    1c94:	fe 01       	movw	r30, r28
    1c96:	e1 5a       	subi	r30, 0xA1	; 161
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a8 e4       	ldi	r26, 0x48	; 72
    1ca0:	b2 e4       	ldi	r27, 0x42	; 66
    1ca2:	80 83       	st	Z, r24
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	a2 83       	std	Z+2, r26	; 0x02
    1ca8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	8e 01       	movw	r16, r28
    1cac:	05 5a       	subi	r16, 0xA5	; 165
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e1 5a       	subi	r30, 0xA1	; 161
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	4a ef       	ldi	r20, 0xFA	; 250
    1cc4:	54 e4       	ldi	r21, 0x44	; 68
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	f8 01       	movw	r30, r16
    1cd0:	80 83       	st	Z, r24
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	a2 83       	std	Z+2, r26	; 0x02
    1cd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e5 5a       	subi	r30, 0xA5	; 165
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	44 f4       	brge	.+16     	; 0x1d06 <DOOR_Control+0x946>
		__ticks = 1;
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e7 5a       	subi	r30, 0xA7	; 167
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
    1d04:	64 c0       	rjmp	.+200    	; 0x1dce <DOOR_Control+0xa0e>
	else if (__tmp > 65535)
    1d06:	fe 01       	movw	r30, r28
    1d08:	e5 5a       	subi	r30, 0xA5	; 165
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	57 e4       	ldi	r21, 0x47	; 71
    1d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	0c f0       	brlt	.+2      	; 0x1d26 <DOOR_Control+0x966>
    1d24:	43 c0       	rjmp	.+134    	; 0x1dac <DOOR_Control+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	fe 01       	movw	r30, r28
    1d28:	e1 5a       	subi	r30, 0xA1	; 161
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8e 01       	movw	r16, r28
    1d46:	07 5a       	subi	r16, 0xA7	; 167
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	f8 01       	movw	r30, r16
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
    1d5c:	1f c0       	rjmp	.+62     	; 0x1d9c <DOOR_Control+0x9dc>
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e9 5a       	subi	r30, 0xA9	; 169
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	88 ec       	ldi	r24, 0xC8	; 200
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e9 5a       	subi	r30, 0xA9	; 169
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <DOOR_Control+0x9b6>
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e9 5a       	subi	r30, 0xA9	; 169
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d84:	de 01       	movw	r26, r28
    1d86:	a7 5a       	subi	r26, 0xA7	; 167
    1d88:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e7 5a       	subi	r30, 0xA7	; 167
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	11 96       	adiw	r26, 0x01	; 1
    1d98:	9c 93       	st	X, r25
    1d9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e7 5a       	subi	r30, 0xA7	; 167
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	d1 f6       	brne	.-76     	; 0x1d5e <DOOR_Control+0x99e>
    1daa:	27 c0       	rjmp	.+78     	; 0x1dfa <DOOR_Control+0xa3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dac:	8e 01       	movw	r16, r28
    1dae:	07 5a       	subi	r16, 0xA7	; 167
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	e5 5a       	subi	r30, 0xA5	; 165
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	f8 01       	movw	r30, r16
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
    1dce:	de 01       	movw	r26, r28
    1dd0:	ab 5a       	subi	r26, 0xAB	; 171
    1dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e7 5a       	subi	r30, 0xA7	; 167
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
    1dde:	8d 93       	st	X+, r24
    1de0:	9c 93       	st	X, r25
    1de2:	fe 01       	movw	r30, r28
    1de4:	eb 5a       	subi	r30, 0xAB	; 171
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <DOOR_Control+0xa2c>
    1df0:	fe 01       	movw	r30, r28
    1df2:	eb 5a       	subi	r30, 0xAB	; 171
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
		    	{
		    		     /*starting words */

		    		    LCD_VidCLR();
		    		    LCD_VidSendStringPos("Succesful login",1,1);
		    		    for(u8 k=0;k<6;k++)
    1dfa:	de 01       	movw	r26, r28
    1dfc:	a5 55       	subi	r26, 0x55	; 85
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	fe 01       	movw	r30, r28
    1e02:	e5 55       	subi	r30, 0x55	; 85
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	8f 5f       	subi	r24, 0xFF	; 255
    1e0a:	8c 93       	st	X, r24
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e5 55       	subi	r30, 0x55	; 85
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	86 30       	cpi	r24, 0x06	; 6
    1e16:	08 f4       	brcc	.+2      	; 0x1e1a <DOOR_Control+0xa5a>
    1e18:	32 cf       	rjmp	.-412    	; 0x1c7e <DOOR_Control+0x8be>
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ef 5a       	subi	r30, 0xAF	; 175
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a8 e4       	ldi	r26, 0x48	; 72
    1e26:	b2 e4       	ldi	r27, 0x42	; 66
    1e28:	80 83       	st	Z, r24
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	a2 83       	std	Z+2, r26	; 0x02
    1e2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	8e 01       	movw	r16, r28
    1e32:	03 5b       	subi	r16, 0xB3	; 179
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	fe 01       	movw	r30, r28
    1e38:	ef 5a       	subi	r30, 0xAF	; 175
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	60 81       	ld	r22, Z
    1e3e:	71 81       	ldd	r23, Z+1	; 0x01
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a ef       	ldi	r20, 0xFA	; 250
    1e4a:	54 e4       	ldi	r21, 0x44	; 68
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	f8 01       	movw	r30, r16
    1e56:	80 83       	st	Z, r24
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	a2 83       	std	Z+2, r26	; 0x02
    1e5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e3 5b       	subi	r30, 0xB3	; 179
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	5f e3       	ldi	r21, 0x3F	; 63
    1e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	44 f4       	brge	.+16     	; 0x1e8c <DOOR_Control+0xacc>
		__ticks = 1;
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e5 5b       	subi	r30, 0xB5	; 181
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24
    1e8a:	64 c0       	rjmp	.+200    	; 0x1f54 <DOOR_Control+0xb94>
	else if (__tmp > 65535)
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e3 5b       	subi	r30, 0xB3	; 179
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	0c f0       	brlt	.+2      	; 0x1eac <DOOR_Control+0xaec>
    1eaa:	43 c0       	rjmp	.+134    	; 0x1f32 <DOOR_Control+0xb72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eac:	fe 01       	movw	r30, r28
    1eae:	ef 5a       	subi	r30, 0xAF	; 175
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	60 81       	ld	r22, Z
    1eb4:	71 81       	ldd	r23, Z+1	; 0x01
    1eb6:	82 81       	ldd	r24, Z+2	; 0x02
    1eb8:	93 81       	ldd	r25, Z+3	; 0x03
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e2       	ldi	r20, 0x20	; 32
    1ec0:	51 e4       	ldi	r21, 0x41	; 65
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8e 01       	movw	r16, r28
    1ecc:	05 5b       	subi	r16, 0xB5	; 181
    1ece:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	80 83       	st	Z, r24
    1ee2:	1f c0       	rjmp	.+62     	; 0x1f22 <DOOR_Control+0xb62>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e7 5b       	subi	r30, 0xB7	; 183
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	88 ec       	ldi	r24, 0xC8	; 200
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e7 5b       	subi	r30, 0xB7	; 183
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <DOOR_Control+0xb3c>
    1f00:	fe 01       	movw	r30, r28
    1f02:	e7 5b       	subi	r30, 0xB7	; 183
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	de 01       	movw	r26, r28
    1f0c:	a5 5b       	subi	r26, 0xB5	; 181
    1f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	e5 5b       	subi	r30, 0xB5	; 181
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	11 96       	adiw	r26, 0x01	; 1
    1f1e:	9c 93       	st	X, r25
    1f20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	fe 01       	movw	r30, r28
    1f24:	e5 5b       	subi	r30, 0xB5	; 181
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	d1 f6       	brne	.-76     	; 0x1ee4 <DOOR_Control+0xb24>
    1f30:	27 c0       	rjmp	.+78     	; 0x1f80 <DOOR_Control+0xbc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f32:	8e 01       	movw	r16, r28
    1f34:	05 5b       	subi	r16, 0xB5	; 181
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e3 5b       	subi	r30, 0xB3	; 179
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	60 81       	ld	r22, Z
    1f40:	71 81       	ldd	r23, Z+1	; 0x01
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	f8 01       	movw	r30, r16
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
    1f54:	de 01       	movw	r26, r28
    1f56:	a9 5b       	subi	r26, 0xB9	; 185
    1f58:	bf 4f       	sbci	r27, 0xFF	; 255
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e5 5b       	subi	r30, 0xB5	; 181
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	8d 93       	st	X+, r24
    1f66:	9c 93       	st	X, r25
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e9 5b       	subi	r30, 0xB9	; 185
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	80 81       	ld	r24, Z
    1f70:	91 81       	ldd	r25, Z+1	; 0x01
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <DOOR_Control+0xbb2>
    1f76:	fe 01       	movw	r30, r28
    1f78:	e9 5b       	subi	r30, 0xB9	; 185
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
		    		    {
		    		     LCD_VidSendCharPos('.',2,k+1);
		    		     _delay_ms(50);
		    		    }
		    		     _delay_ms(50);
		    		     LCD_VidCLR();
    1f80:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_VidCLR>
		    		     LCD_VidSendStringPos("Welcome..",1,1);
    1f84:	8b e9       	ldi	r24, 0x9B	; 155
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	70 e0       	ldi	r23, 0x00	; 0
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>

		    		     /*Motor will open the Door*/
		    		     Motor();
    1f94:	0e 94 81 1a 	call	0x3502	; 0x3502 <Motor>
				    DIO_VidSetPinValue(PORT_A,PIN_3,DIO_HIGH);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	63 e0       	ldi	r22, 0x03	; 3
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    1fa2:	28 c3       	rjmp	.+1616   	; 0x25f4 <DOOR_Control+0x1234>


		    	}
		    else
		    {
		    	LCD_VidCLR();
    1fa4:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_VidCLR>
		    	LCD_VidSendStringPos("XXFailed LoginXX",1,1);
    1fa8:	85 ea       	ldi	r24, 0xA5	; 165
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	61 e0       	ldi	r22, 0x01	; 1
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	ed 5b       	subi	r30, 0xBD	; 189
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a8 e4       	ldi	r26, 0x48	; 72
    1fc4:	b3 e4       	ldi	r27, 0x43	; 67
    1fc6:	80 83       	st	Z, r24
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	a2 83       	std	Z+2, r26	; 0x02
    1fcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fce:	8e 01       	movw	r16, r28
    1fd0:	01 5c       	subi	r16, 0xC1	; 193
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	ed 5b       	subi	r30, 0xBD	; 189
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a ef       	ldi	r20, 0xFA	; 250
    1fe8:	54 e4       	ldi	r21, 0x44	; 68
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	80 83       	st	Z, r24
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	a2 83       	std	Z+2, r26	; 0x02
    1ffa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	ff 96       	adiw	r30, 0x3f	; 63
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	93 81       	ldd	r25, Z+3	; 0x03
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2014:	88 23       	and	r24, r24
    2016:	2c f4       	brge	.+10     	; 0x2022 <DOOR_Control+0xc62>
		__ticks = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9e af       	std	Y+62, r25	; 0x3e
    201e:	8d af       	std	Y+61, r24	; 0x3d
    2020:	46 c0       	rjmp	.+140    	; 0x20ae <DOOR_Control+0xcee>
	else if (__tmp > 65535)
    2022:	fe 01       	movw	r30, r28
    2024:	ff 96       	adiw	r30, 0x3f	; 63
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	64 f5       	brge	.+88     	; 0x2096 <DOOR_Control+0xcd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	fe 01       	movw	r30, r28
    2040:	ed 5b       	subi	r30, 0xBD	; 189
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9e af       	std	Y+62, r25	; 0x3e
    206a:	8d af       	std	Y+61, r24	; 0x3d
    206c:	0f c0       	rjmp	.+30     	; 0x208c <DOOR_Control+0xccc>
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c af       	std	Y+60, r25	; 0x3c
    2074:	8b af       	std	Y+59, r24	; 0x3b
    2076:	8b ad       	ldd	r24, Y+59	; 0x3b
    2078:	9c ad       	ldd	r25, Y+60	; 0x3c
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <DOOR_Control+0xcba>
    207e:	9c af       	std	Y+60, r25	; 0x3c
    2080:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	8d ad       	ldd	r24, Y+61	; 0x3d
    2084:	9e ad       	ldd	r25, Y+62	; 0x3e
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9e af       	std	Y+62, r25	; 0x3e
    208a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	8d ad       	ldd	r24, Y+61	; 0x3d
    208e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <DOOR_Control+0xcae>
    2094:	16 c0       	rjmp	.+44     	; 0x20c2 <DOOR_Control+0xd02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	fe 01       	movw	r30, r28
    2098:	ff 96       	adiw	r30, 0x3f	; 63
    209a:	60 81       	ld	r22, Z
    209c:	71 81       	ldd	r23, Z+1	; 0x01
    209e:	82 81       	ldd	r24, Z+2	; 0x02
    20a0:	93 81       	ldd	r25, Z+3	; 0x03
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9e af       	std	Y+62, r25	; 0x3e
    20ac:	8d af       	std	Y+61, r24	; 0x3d
    20ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    20b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20b2:	9a af       	std	Y+58, r25	; 0x3a
    20b4:	89 af       	std	Y+57, r24	; 0x39
    20b6:	89 ad       	ldd	r24, Y+57	; 0x39
    20b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <DOOR_Control+0xcfa>
    20be:	9a af       	std	Y+58, r25	; 0x3a
    20c0:	89 af       	std	Y+57, r24	; 0x39
		    	_delay_ms(200);
		    	LCD_VidCLR();
    20c2:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_VidCLR>
		    	LCD_VidSendStringPos("Restart,Then",1,1);
    20c6:	86 eb       	ldi	r24, 0xB6	; 182
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
		    	LCD_VidSendStringPos("TRY AGAIN...",2,1);
    20d6:	83 ec       	ldi	r24, 0xC3	; 195
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	41 e0       	ldi	r20, 0x01	; 1
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
    20e6:	86 c2       	rjmp	.+1292   	; 0x25f4 <DOOR_Control+0x1234>

		}
		else
		{
			/*CHECK PASSWORD*/
				    LCD_VidCLR();
    20e8:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_VidCLR>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a8 e4       	ldi	r26, 0x48	; 72
    20f2:	b3 e4       	ldi	r27, 0x43	; 67
    20f4:	8d ab       	std	Y+53, r24	; 0x35
    20f6:	9e ab       	std	Y+54, r25	; 0x36
    20f8:	af ab       	std	Y+55, r26	; 0x37
    20fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fc:	6d a9       	ldd	r22, Y+53	; 0x35
    20fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2100:	8f a9       	ldd	r24, Y+55	; 0x37
    2102:	98 ad       	ldd	r25, Y+56	; 0x38
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	4a ef       	ldi	r20, 0xFA	; 250
    210a:	54 e4       	ldi	r21, 0x44	; 68
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	89 ab       	std	Y+49, r24	; 0x31
    2116:	9a ab       	std	Y+50, r25	; 0x32
    2118:	ab ab       	std	Y+51, r26	; 0x33
    211a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    211c:	69 a9       	ldd	r22, Y+49	; 0x31
    211e:	7a a9       	ldd	r23, Y+50	; 0x32
    2120:	8b a9       	ldd	r24, Y+51	; 0x33
    2122:	9c a9       	ldd	r25, Y+52	; 0x34
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2130:	88 23       	and	r24, r24
    2132:	2c f4       	brge	.+10     	; 0x213e <DOOR_Control+0xd7e>
		__ticks = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	98 ab       	std	Y+48, r25	; 0x30
    213a:	8f a7       	std	Y+47, r24	; 0x2f
    213c:	3f c0       	rjmp	.+126    	; 0x21bc <DOOR_Control+0xdfc>
	else if (__tmp > 65535)
    213e:	69 a9       	ldd	r22, Y+49	; 0x31
    2140:	7a a9       	ldd	r23, Y+50	; 0x32
    2142:	8b a9       	ldd	r24, Y+51	; 0x33
    2144:	9c a9       	ldd	r25, Y+52	; 0x34
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	3f ef       	ldi	r19, 0xFF	; 255
    214a:	4f e7       	ldi	r20, 0x7F	; 127
    214c:	57 e4       	ldi	r21, 0x47	; 71
    214e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2152:	18 16       	cp	r1, r24
    2154:	4c f5       	brge	.+82     	; 0x21a8 <DOOR_Control+0xde8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2156:	6d a9       	ldd	r22, Y+53	; 0x35
    2158:	7e a9       	ldd	r23, Y+54	; 0x36
    215a:	8f a9       	ldd	r24, Y+55	; 0x37
    215c:	98 ad       	ldd	r25, Y+56	; 0x38
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e2       	ldi	r20, 0x20	; 32
    2164:	51 e4       	ldi	r21, 0x41	; 65
    2166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	98 ab       	std	Y+48, r25	; 0x30
    217c:	8f a7       	std	Y+47, r24	; 0x2f
    217e:	0f c0       	rjmp	.+30     	; 0x219e <DOOR_Control+0xdde>
    2180:	88 ec       	ldi	r24, 0xC8	; 200
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9e a7       	std	Y+46, r25	; 0x2e
    2186:	8d a7       	std	Y+45, r24	; 0x2d
    2188:	8d a5       	ldd	r24, Y+45	; 0x2d
    218a:	9e a5       	ldd	r25, Y+46	; 0x2e
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <DOOR_Control+0xdcc>
    2190:	9e a7       	std	Y+46, r25	; 0x2e
    2192:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2194:	8f a5       	ldd	r24, Y+47	; 0x2f
    2196:	98 a9       	ldd	r25, Y+48	; 0x30
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	98 ab       	std	Y+48, r25	; 0x30
    219c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219e:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a0:	98 a9       	ldd	r25, Y+48	; 0x30
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	69 f7       	brne	.-38     	; 0x2180 <DOOR_Control+0xdc0>
    21a6:	14 c0       	rjmp	.+40     	; 0x21d0 <DOOR_Control+0xe10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a8:	69 a9       	ldd	r22, Y+49	; 0x31
    21aa:	7a a9       	ldd	r23, Y+50	; 0x32
    21ac:	8b a9       	ldd	r24, Y+51	; 0x33
    21ae:	9c a9       	ldd	r25, Y+52	; 0x34
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	98 ab       	std	Y+48, r25	; 0x30
    21ba:	8f a7       	std	Y+47, r24	; 0x2f
    21bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    21be:	98 a9       	ldd	r25, Y+48	; 0x30
    21c0:	9c a7       	std	Y+44, r25	; 0x2c
    21c2:	8b a7       	std	Y+43, r24	; 0x2b
    21c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <DOOR_Control+0xe08>
    21cc:	9c a7       	std	Y+44, r25	; 0x2c
    21ce:	8b a7       	std	Y+43, r24	; 0x2b
				    _delay_ms(200);
				    LCD_VidSendStringPos("Enter ur PASS ",1,1);
    21d0:	80 ed       	ldi	r24, 0xD0	; 208
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	50 e0       	ldi	r21, 0x00	; 0
    21dc:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
				    KPD_VALUE=KPD_CHEK;
    21e0:	8f ef       	ldi	r24, 0xFF	; 255
    21e2:	80 93 1c 01 	sts	0x011C, r24
    21e6:	a2 c0       	rjmp	.+324    	; 0x232c <DOOR_Control+0xf6c>
				    while(KPD_VALUE != '&')
				    	{
				    		do{
				    		    KPD_VALUE=KPD_U8PressedKey();
    21e8:	0e 94 3d 14 	call	0x287a	; 0x287a <KPD_U8PressedKey>
    21ec:	80 93 1c 01 	sts	0x011C, r24
				    		   }while(KPD_VALUE == KPD_CHEK );
    21f0:	80 91 1c 01 	lds	r24, 0x011C
    21f4:	8f 3f       	cpi	r24, 0xFF	; 255
    21f6:	c1 f3       	breq	.-16     	; 0x21e8 <DOOR_Control+0xe28>
				    		    CHK_COUNT++;
    21f8:	80 91 3a 01 	lds	r24, 0x013A
    21fc:	8f 5f       	subi	r24, 0xFF	; 255
    21fe:	80 93 3a 01 	sts	0x013A, r24
				    		    if(KPD_VALUE == '&') break;
    2202:	80 91 1c 01 	lds	r24, 0x011C
    2206:	86 32       	cpi	r24, 0x26	; 38
    2208:	09 f4       	brne	.+2      	; 0x220c <DOOR_Control+0xe4c>
    220a:	95 c0       	rjmp	.+298    	; 0x2336 <DOOR_Control+0xf76>
				    		    LCD_VidSendNumberPos(KPD_VALUE,2,CHK_COUNT);
    220c:	80 91 1c 01 	lds	r24, 0x011C
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e0       	ldi	r26, 0x00	; 0
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	20 91 3a 01 	lds	r18, 0x013A
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	42 e0       	ldi	r20, 0x02	; 2
    2222:	0e 94 f7 19 	call	0x33ee	; 0x33ee <LCD_VidSendNumberPos>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	a8 ec       	ldi	r26, 0xC8	; 200
    222c:	b2 e4       	ldi	r27, 0x42	; 66
    222e:	8f a3       	std	Y+39, r24	; 0x27
    2230:	98 a7       	std	Y+40, r25	; 0x28
    2232:	a9 a7       	std	Y+41, r26	; 0x29
    2234:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2236:	6f a1       	ldd	r22, Y+39	; 0x27
    2238:	78 a5       	ldd	r23, Y+40	; 0x28
    223a:	89 a5       	ldd	r24, Y+41	; 0x29
    223c:	9a a5       	ldd	r25, Y+42	; 0x2a
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a ef       	ldi	r20, 0xFA	; 250
    2244:	54 e4       	ldi	r21, 0x44	; 68
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	8b a3       	std	Y+35, r24	; 0x23
    2250:	9c a3       	std	Y+36, r25	; 0x24
    2252:	ad a3       	std	Y+37, r26	; 0x25
    2254:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2256:	6b a1       	ldd	r22, Y+35	; 0x23
    2258:	7c a1       	ldd	r23, Y+36	; 0x24
    225a:	8d a1       	ldd	r24, Y+37	; 0x25
    225c:	9e a1       	ldd	r25, Y+38	; 0x26
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e8       	ldi	r20, 0x80	; 128
    2264:	5f e3       	ldi	r21, 0x3F	; 63
    2266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226a:	88 23       	and	r24, r24
    226c:	2c f4       	brge	.+10     	; 0x2278 <DOOR_Control+0xeb8>
		__ticks = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9a a3       	std	Y+34, r25	; 0x22
    2274:	89 a3       	std	Y+33, r24	; 0x21
    2276:	3f c0       	rjmp	.+126    	; 0x22f6 <DOOR_Control+0xf36>
	else if (__tmp > 65535)
    2278:	6b a1       	ldd	r22, Y+35	; 0x23
    227a:	7c a1       	ldd	r23, Y+36	; 0x24
    227c:	8d a1       	ldd	r24, Y+37	; 0x25
    227e:	9e a1       	ldd	r25, Y+38	; 0x26
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	4c f5       	brge	.+82     	; 0x22e2 <DOOR_Control+0xf22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2290:	6f a1       	ldd	r22, Y+39	; 0x27
    2292:	78 a5       	ldd	r23, Y+40	; 0x28
    2294:	89 a5       	ldd	r24, Y+41	; 0x29
    2296:	9a a5       	ldd	r25, Y+42	; 0x2a
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9a a3       	std	Y+34, r25	; 0x22
    22b6:	89 a3       	std	Y+33, r24	; 0x21
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <DOOR_Control+0xf18>
    22ba:	88 ec       	ldi	r24, 0xC8	; 200
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	98 a3       	std	Y+32, r25	; 0x20
    22c0:	8f 8f       	std	Y+31, r24	; 0x1f
    22c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22c4:	98 a1       	ldd	r25, Y+32	; 0x20
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <DOOR_Control+0xf06>
    22ca:	98 a3       	std	Y+32, r25	; 0x20
    22cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ce:	89 a1       	ldd	r24, Y+33	; 0x21
    22d0:	9a a1       	ldd	r25, Y+34	; 0x22
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	9a a3       	std	Y+34, r25	; 0x22
    22d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d8:	89 a1       	ldd	r24, Y+33	; 0x21
    22da:	9a a1       	ldd	r25, Y+34	; 0x22
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	69 f7       	brne	.-38     	; 0x22ba <DOOR_Control+0xefa>
    22e0:	14 c0       	rjmp	.+40     	; 0x230a <DOOR_Control+0xf4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e2:	6b a1       	ldd	r22, Y+35	; 0x23
    22e4:	7c a1       	ldd	r23, Y+36	; 0x24
    22e6:	8d a1       	ldd	r24, Y+37	; 0x25
    22e8:	9e a1       	ldd	r25, Y+38	; 0x26
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9a a3       	std	Y+34, r25	; 0x22
    22f4:	89 a3       	std	Y+33, r24	; 0x21
    22f6:	89 a1       	ldd	r24, Y+33	; 0x21
    22f8:	9a a1       	ldd	r25, Y+34	; 0x22
    22fa:	9e 8f       	std	Y+30, r25	; 0x1e
    22fc:	8d 8f       	std	Y+29, r24	; 0x1d
    22fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2300:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <DOOR_Control+0xf42>
    2306:	9e 8f       	std	Y+30, r25	; 0x1e
    2308:	8d 8f       	std	Y+29, r24	; 0x1d
				    		    _delay_ms(100);
				    		    LCD_VidSendCharPos('*',2,CHK_COUNT);
    230a:	90 91 3a 01 	lds	r25, 0x013A
    230e:	8a e2       	ldi	r24, 0x2A	; 42
    2310:	62 e0       	ldi	r22, 0x02	; 2
    2312:	49 2f       	mov	r20, r25
    2314:	0e 94 44 1a 	call	0x3488	; 0x3488 <LCD_VidSendCharPos>
				    		    Check_pass[CHK_COUNT]=KPD_VALUE;
    2318:	80 91 3a 01 	lds	r24, 0x013A
    231c:	88 2f       	mov	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	20 91 1c 01 	lds	r18, 0x011C
    2324:	fc 01       	movw	r30, r24
    2326:	e9 5b       	subi	r30, 0xB9	; 185
    2328:	fe 4f       	sbci	r31, 0xFE	; 254
    232a:	20 83       	st	Z, r18
			/*CHECK PASSWORD*/
				    LCD_VidCLR();
				    _delay_ms(200);
				    LCD_VidSendStringPos("Enter ur PASS ",1,1);
				    KPD_VALUE=KPD_CHEK;
				    while(KPD_VALUE != '&')
    232c:	80 91 1c 01 	lds	r24, 0x011C
    2330:	86 32       	cpi	r24, 0x26	; 38
    2332:	09 f0       	breq	.+2      	; 0x2336 <DOOR_Control+0xf76>
    2334:	59 cf       	rjmp	.-334    	; 0x21e8 <DOOR_Control+0xe28>
				    		    Check_pass[CHK_COUNT]=KPD_VALUE;

				       }

				    /*Check password is correct or not*/
				    u8 x=0;
    2336:	fe 01       	movw	r30, r28
    2338:	e6 55       	subi	r30, 0x56	; 86
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	10 82       	st	Z, r1
    233e:	4c c1       	rjmp	.+664    	; 0x25d8 <DOOR_Control+0x1218>
				    for(x;x<4;x++)
				    {
				    if(Check_pass[x]==EEPROM_VidReadByte(address[x]))
    2340:	fe 01       	movw	r30, r28
    2342:	e6 55       	subi	r30, 0x56	; 86
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	fc 01       	movw	r30, r24
    234e:	e9 5b       	subi	r30, 0xB9	; 185
    2350:	fe 4f       	sbci	r31, 0xFE	; 254
    2352:	10 81       	ld	r17, Z
    2354:	fe 01       	movw	r30, r28
    2356:	e6 55       	subi	r30, 0x56	; 86
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 81       	ld	r24, Z
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	fc 01       	movw	r30, r24
    2366:	ec 5e       	subi	r30, 0xEC	; 236
    2368:	fe 4f       	sbci	r31, 0xFE	; 254
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	0e 94 b7 09 	call	0x136e	; 0x136e <EEPROM_VidReadByte>
    2372:	18 17       	cp	r17, r24
    2374:	49 f4       	brne	.+18     	; 0x2388 <DOOR_Control+0xfc8>
				    {
				    	x++;
    2376:	de 01       	movw	r26, r28
    2378:	a6 55       	subi	r26, 0x56	; 86
    237a:	bf 4f       	sbci	r27, 0xFF	; 255
    237c:	fe 01       	movw	r30, r28
    237e:	e6 55       	subi	r30, 0x56	; 86
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 81       	ld	r24, Z
    2384:	8f 5f       	subi	r24, 0xFF	; 255
    2386:	8c 93       	st	X, r24
				    }

				    if(x==4)
    2388:	fe 01       	movw	r30, r28
    238a:	e6 55       	subi	r30, 0x56	; 86
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	84 30       	cpi	r24, 0x04	; 4
    2392:	09 f0       	breq	.+2      	; 0x2396 <DOOR_Control+0xfd6>
    2394:	18 c1       	rjmp	.+560    	; 0x25c6 <DOOR_Control+0x1206>
				    {
				    	LCD_VidCLR();
    2396:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_VidCLR>
				        LCD_VidSendStringPos("Succesful login",1,1);
    239a:	8b e8       	ldi	r24, 0x8B	; 139
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	61 e0       	ldi	r22, 0x01	; 1
    23a0:	70 e0       	ldi	r23, 0x00	; 0
    23a2:	41 e0       	ldi	r20, 0x01	; 1
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
				        for(u8 k=0;k<4;k++)
    23aa:	fe 01       	movw	r30, r28
    23ac:	e7 55       	subi	r30, 0x57	; 87
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	10 82       	st	Z, r1
    23b2:	86 c0       	rjmp	.+268    	; 0x24c0 <DOOR_Control+0x1100>
				    	{
				    	 LCD_VidSendCharPos('.',1,k+14);
    23b4:	fe 01       	movw	r30, r28
    23b6:	e7 55       	subi	r30, 0x57	; 87
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	98 2f       	mov	r25, r24
    23be:	92 5f       	subi	r25, 0xF2	; 242
    23c0:	8e e2       	ldi	r24, 0x2E	; 46
    23c2:	61 e0       	ldi	r22, 0x01	; 1
    23c4:	49 2f       	mov	r20, r25
    23c6:	0e 94 44 1a 	call	0x3488	; 0x3488 <LCD_VidSendCharPos>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	aa ef       	ldi	r26, 0xFA	; 250
    23d0:	b3 e4       	ldi	r27, 0x43	; 67
    23d2:	89 8f       	std	Y+25, r24	; 0x19
    23d4:	9a 8f       	std	Y+26, r25	; 0x1a
    23d6:	ab 8f       	std	Y+27, r26	; 0x1b
    23d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	69 8d       	ldd	r22, Y+25	; 0x19
    23dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a ef       	ldi	r20, 0xFA	; 250
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8d 8b       	std	Y+21, r24	; 0x15
    23f4:	9e 8b       	std	Y+22, r25	; 0x16
    23f6:	af 8b       	std	Y+23, r26	; 0x17
    23f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23fa:	6d 89       	ldd	r22, Y+21	; 0x15
    23fc:	7e 89       	ldd	r23, Y+22	; 0x16
    23fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2400:	98 8d       	ldd	r25, Y+24	; 0x18
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <DOOR_Control+0x105c>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9c 8b       	std	Y+20, r25	; 0x14
    2418:	8b 8b       	std	Y+19, r24	; 0x13
    241a:	3f c0       	rjmp	.+126    	; 0x249a <DOOR_Control+0x10da>
	else if (__tmp > 65535)
    241c:	6d 89       	ldd	r22, Y+21	; 0x15
    241e:	7e 89       	ldd	r23, Y+22	; 0x16
    2420:	8f 89       	ldd	r24, Y+23	; 0x17
    2422:	98 8d       	ldd	r25, Y+24	; 0x18
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <DOOR_Control+0x10c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	69 8d       	ldd	r22, Y+25	; 0x19
    2436:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2438:	8b 8d       	ldd	r24, Y+27	; 0x1b
    243a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9c 8b       	std	Y+20, r25	; 0x14
    245a:	8b 8b       	std	Y+19, r24	; 0x13
    245c:	0f c0       	rjmp	.+30     	; 0x247c <DOOR_Control+0x10bc>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9a 8b       	std	Y+18, r25	; 0x12
    2464:	89 8b       	std	Y+17, r24	; 0x11
    2466:	89 89       	ldd	r24, Y+17	; 0x11
    2468:	9a 89       	ldd	r25, Y+18	; 0x12
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <DOOR_Control+0x10aa>
    246e:	9a 8b       	std	Y+18, r25	; 0x12
    2470:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8b 89       	ldd	r24, Y+19	; 0x13
    2474:	9c 89       	ldd	r25, Y+20	; 0x14
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9c 8b       	std	Y+20, r25	; 0x14
    247a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8b 89       	ldd	r24, Y+19	; 0x13
    247e:	9c 89       	ldd	r25, Y+20	; 0x14
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <DOOR_Control+0x109e>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <DOOR_Control+0x10ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6d 89       	ldd	r22, Y+21	; 0x15
    2488:	7e 89       	ldd	r23, Y+22	; 0x16
    248a:	8f 89       	ldd	r24, Y+23	; 0x17
    248c:	98 8d       	ldd	r25, Y+24	; 0x18
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
    249a:	8b 89       	ldd	r24, Y+19	; 0x13
    249c:	9c 89       	ldd	r25, Y+20	; 0x14
    249e:	98 8b       	std	Y+16, r25	; 0x10
    24a0:	8f 87       	std	Y+15, r24	; 0x0f
    24a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a4:	98 89       	ldd	r25, Y+16	; 0x10
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <DOOR_Control+0x10e6>
    24aa:	98 8b       	std	Y+16, r25	; 0x10
    24ac:	8f 87       	std	Y+15, r24	; 0x0f

				    if(x==4)
				    {
				    	LCD_VidCLR();
				        LCD_VidSendStringPos("Succesful login",1,1);
				        for(u8 k=0;k<4;k++)
    24ae:	de 01       	movw	r26, r28
    24b0:	a7 55       	subi	r26, 0x57	; 87
    24b2:	bf 4f       	sbci	r27, 0xFF	; 255
    24b4:	fe 01       	movw	r30, r28
    24b6:	e7 55       	subi	r30, 0x57	; 87
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	8f 5f       	subi	r24, 0xFF	; 255
    24be:	8c 93       	st	X, r24
    24c0:	fe 01       	movw	r30, r28
    24c2:	e7 55       	subi	r30, 0x57	; 87
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	84 30       	cpi	r24, 0x04	; 4
    24ca:	08 f4       	brcc	.+2      	; 0x24ce <DOOR_Control+0x110e>
    24cc:	73 cf       	rjmp	.-282    	; 0x23b4 <DOOR_Control+0xff4>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	a8 e4       	ldi	r26, 0x48	; 72
    24d4:	b3 e4       	ldi	r27, 0x43	; 67
    24d6:	8b 87       	std	Y+11, r24	; 0x0b
    24d8:	9c 87       	std	Y+12, r25	; 0x0c
    24da:	ad 87       	std	Y+13, r26	; 0x0d
    24dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24de:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	4a ef       	ldi	r20, 0xFA	; 250
    24ec:	54 e4       	ldi	r21, 0x44	; 68
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	8f 83       	std	Y+7, r24	; 0x07
    24f8:	98 87       	std	Y+8, r25	; 0x08
    24fa:	a9 87       	std	Y+9, r26	; 0x09
    24fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e8       	ldi	r20, 0x80	; 128
    250c:	5f e3       	ldi	r21, 0x3F	; 63
    250e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2512:	88 23       	and	r24, r24
    2514:	2c f4       	brge	.+10     	; 0x2520 <DOOR_Control+0x1160>
		__ticks = 1;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9e 83       	std	Y+6, r25	; 0x06
    251c:	8d 83       	std	Y+5, r24	; 0x05
    251e:	3f c0       	rjmp	.+126    	; 0x259e <DOOR_Control+0x11de>
	else if (__tmp > 65535)
    2520:	6f 81       	ldd	r22, Y+7	; 0x07
    2522:	78 85       	ldd	r23, Y+8	; 0x08
    2524:	89 85       	ldd	r24, Y+9	; 0x09
    2526:	9a 85       	ldd	r25, Y+10	; 0x0a
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	3f ef       	ldi	r19, 0xFF	; 255
    252c:	4f e7       	ldi	r20, 0x7F	; 127
    252e:	57 e4       	ldi	r21, 0x47	; 71
    2530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2534:	18 16       	cp	r1, r24
    2536:	4c f5       	brge	.+82     	; 0x258a <DOOR_Control+0x11ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2538:	6b 85       	ldd	r22, Y+11	; 0x0b
    253a:	7c 85       	ldd	r23, Y+12	; 0x0c
    253c:	8d 85       	ldd	r24, Y+13	; 0x0d
    253e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e2       	ldi	r20, 0x20	; 32
    2546:	51 e4       	ldi	r21, 0x41	; 65
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <DOOR_Control+0x11c0>
    2562:	88 ec       	ldi	r24, 0xC8	; 200
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9c 83       	std	Y+4, r25	; 0x04
    2568:	8b 83       	std	Y+3, r24	; 0x03
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	9c 81       	ldd	r25, Y+4	; 0x04
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <DOOR_Control+0x11ae>
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	69 f7       	brne	.-38     	; 0x2562 <DOOR_Control+0x11a2>
    2588:	14 c0       	rjmp	.+40     	; 0x25b2 <DOOR_Control+0x11f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	6f 81       	ldd	r22, Y+7	; 0x07
    258c:	78 85       	ldd	r23, Y+8	; 0x08
    258e:	89 85       	ldd	r24, Y+9	; 0x09
    2590:	9a 85       	ldd	r25, Y+10	; 0x0a
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	9e 81       	ldd	r25, Y+6	; 0x06
    25a2:	9a 83       	std	Y+2, r25	; 0x02
    25a4:	89 83       	std	Y+1, r24	; 0x01
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <DOOR_Control+0x11ea>
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
				    	{
				    	 LCD_VidSendCharPos('.',1,k+14);
				         _delay_ms(500);
				        }
				    	_delay_ms(200);
				    	LCD_VidCLR();
    25b2:	0e 94 c6 18 	call	0x318c	; 0x318c <LCD_VidCLR>
				        LCD_VidSendStringPos("Welcome..",1,1);
    25b6:	8b e9       	ldi	r24, 0x9B	; 155
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	61 e0       	ldi	r22, 0x01	; 1
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>

				       }

				    /*Check password is correct or not*/
				    u8 x=0;
				    for(x;x<4;x++)
    25c6:	de 01       	movw	r26, r28
    25c8:	a6 55       	subi	r26, 0x56	; 86
    25ca:	bf 4f       	sbci	r27, 0xFF	; 255
    25cc:	fe 01       	movw	r30, r28
    25ce:	e6 55       	subi	r30, 0x56	; 86
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	8f 5f       	subi	r24, 0xFF	; 255
    25d6:	8c 93       	st	X, r24
    25d8:	fe 01       	movw	r30, r28
    25da:	e6 55       	subi	r30, 0x56	; 86
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	84 30       	cpi	r24, 0x04	; 4
    25e2:	08 f4       	brcc	.+2      	; 0x25e6 <DOOR_Control+0x1226>
    25e4:	ad ce       	rjmp	.-678    	; 0x2340 <DOOR_Control+0xf80>
				    }

				    }

				     /*Motor will open the Door*/
				    Motor();
    25e6:	0e 94 81 1a 	call	0x3502	; 0x3502 <Motor>
				    DIO_VidSetPinValue(PORT_A,PIN_3,DIO_HIGH);
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	63 e0       	ldi	r22, 0x03	; 3
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		}




}
    25f4:	c4 55       	subi	r28, 0x54	; 84
    25f6:	df 4f       	sbci	r29, 0xFF	; 255
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	08 95       	ret

0000260c <TWT_VidMasterInit>:
#include <avr/io.h>
#include "I2c.h"


void TWT_VidMasterInit(void)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	/*prescaller value*/
	CLR_BIT(TWSR,TWPS0);
    2614:	a1 e2       	ldi	r26, 0x21	; 33
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e1 e2       	ldi	r30, 0x21	; 33
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	8e 7f       	andi	r24, 0xFE	; 254
    2620:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWPS1);
    2622:	a1 e2       	ldi	r26, 0x21	; 33
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e1 e2       	ldi	r30, 0x21	; 33
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	8d 7f       	andi	r24, 0xFD	; 253
    262e:	8c 93       	st	X, r24

	/*frequency -> 400khz*/ /*bit rate*/
	TWBR=2;    //after calculations
    2630:	e0 e2       	ldi	r30, 0x20	; 32
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	82 e0       	ldi	r24, 0x02	; 2
    2636:	80 83       	st	Z, r24

	/*enable I2C*/
	SET_BIT(TWCR,TWEN);
    2638:	a6 e5       	ldi	r26, 0x56	; 86
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e6 e5       	ldi	r30, 0x56	; 86
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	84 60       	ori	r24, 0x04	; 4
    2644:	8c 93       	st	X, r24
}
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <TWT_VidSlaveInit>:


void TWT_VidSlaveInit(u8 Copy_U8Address)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	0f 92       	push	r0
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	89 83       	std	Y+1, r24	; 0x01
	/*enable acknowledge*/
	SET_BIT(TWCR,TWEA);
    2658:	a6 e5       	ldi	r26, 0x56	; 86
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e6 e5       	ldi	r30, 0x56	; 86
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	80 64       	ori	r24, 0x40	; 64
    2664:	8c 93       	st	X, r24

	/*write address*/
	TWAR=Copy_U8Address<<1;
    2666:	e2 e2       	ldi	r30, 0x22	; 34
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	88 0f       	add	r24, r24
    266e:	80 83       	st	Z, r24

	/*enable I2C*/      //repeated cause we did not write it in preprocessor
	SET_BIT(TWCR,TWEN);
    2670:	a6 e5       	ldi	r26, 0x56	; 86
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e6 e5       	ldi	r30, 0x56	; 86
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	84 60       	ori	r24, 0x04	; 4
    267c:	8c 93       	st	X, r24
}
    267e:	0f 90       	pop	r0
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <TWT_VidStartCondition>:


void TWT_VidStartCondition(void)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
	/*clear int flag*/
	SET_BIT(TWCR,TWINT);
    268e:	a6 e5       	ldi	r26, 0x56	; 86
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e6 e5       	ldi	r30, 0x56	; 86
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	80 68       	ori	r24, 0x80	; 128
    269a:	8c 93       	st	X, r24
	/*enable start*/
	SET_BIT(TWCR,TWSTA);
    269c:	a6 e5       	ldi	r26, 0x56	; 86
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e6 e5       	ldi	r30, 0x56	; 86
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	80 62       	ori	r24, 0x20	; 32
    26a8:	8c 93       	st	X, r24

	/*wait hardware action*/
	while(GET_BIT(TWCR,TWINT)==0);
    26aa:	e6 e5       	ldi	r30, 0x56	; 86
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	88 23       	and	r24, r24
    26b2:	dc f7       	brge	.-10     	; 0x26aa <TWT_VidStartCondition+0x24>
}
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <TWT_VidStopCondition>:

void TWT_VidStopCondition(void)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
	/*clear int flag*/
	SET_BIT(TWCR,TWINT);
    26c2:	a6 e5       	ldi	r26, 0x56	; 86
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e6 e5       	ldi	r30, 0x56	; 86
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	80 68       	ori	r24, 0x80	; 128
    26ce:	8c 93       	st	X, r24

	/*Enable stop condition*/
	SET_BIT(TWCR,TWSTO);
    26d0:	a6 e5       	ldi	r26, 0x56	; 86
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e6 e5       	ldi	r30, 0x56	; 86
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	80 61       	ori	r24, 0x10	; 16
    26dc:	8c 93       	st	X, r24
}
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <TWT_VidSlaveAddAddress>:


void TWT_VidSlaveAddAddress(u8 Copy_U8SlaveAdd)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	0f 92       	push	r0
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	89 83       	std	Y+1, r24	; 0x01
	/*write slave address*/
	TWDR=Copy_U8SlaveAdd<<1;     // cause we first bit is for write or read
    26f0:	e3 e2       	ldi	r30, 0x23	; 35
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	88 0f       	add	r24, r24
    26f8:	80 83       	st	Z, r24
	/*write operation*/
	CLR_BIT(TWDR,0);
    26fa:	a3 e2       	ldi	r26, 0x23	; 35
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e3 e2       	ldi	r30, 0x23	; 35
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	8e 7f       	andi	r24, 0xFE	; 254
    2706:	8c 93       	st	X, r24
	/*disable start enable condition*/
	CLR_BIT(TWCR,TWSTA);
    2708:	a6 e5       	ldi	r26, 0x56	; 86
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	e6 e5       	ldi	r30, 0x56	; 86
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	8f 7d       	andi	r24, 0xDF	; 223
    2714:	8c 93       	st	X, r24

	/*clear int flag*/
		SET_BIT(TWCR,TWINT);
    2716:	a6 e5       	ldi	r26, 0x56	; 86
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e6 e5       	ldi	r30, 0x56	; 86
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	80 68       	ori	r24, 0x80	; 128
    2722:	8c 93       	st	X, r24

		SET_BIT(TWCR,TWEN);
    2724:	a6 e5       	ldi	r26, 0x56	; 86
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e6 e5       	ldi	r30, 0x56	; 86
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	84 60       	ori	r24, 0x04	; 4
    2730:	8c 93       	st	X, r24
	/*wait hardware action*/
		while(GET_BIT(TWCR,TWINT)==0);
    2732:	e6 e5       	ldi	r30, 0x56	; 86
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	88 23       	and	r24, r24
    273a:	dc f7       	brge	.-10     	; 0x2732 <TWT_VidSlaveAddAddress+0x4e>


}
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <TWT_VidSlaveAddRead>:

void TWT_VidSlaveAddRead(u8 Copy_U8SlaveAdd)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	0f 92       	push	r0
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	89 83       	std	Y+1, r24	; 0x01

	/*write slave address*/
		TWDR=Copy_U8SlaveAdd<<1;     // cause we first bit is for write or read
    2750:	e3 e2       	ldi	r30, 0x23	; 35
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	88 0f       	add	r24, r24
    2758:	80 83       	st	Z, r24
		/*write operation*/
		SET_BIT(TWDR,0);
    275a:	a3 e2       	ldi	r26, 0x23	; 35
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e3 e2       	ldi	r30, 0x23	; 35
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	81 60       	ori	r24, 0x01	; 1
    2766:	8c 93       	st	X, r24
		/*disable start enable condition*/
		CLR_BIT(TWCR,TWSTA);
    2768:	a6 e5       	ldi	r26, 0x56	; 86
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e6 e5       	ldi	r30, 0x56	; 86
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	8f 7d       	andi	r24, 0xDF	; 223
    2774:	8c 93       	st	X, r24

		/*clear int flag*/
		SET_BIT(TWCR,TWINT);
    2776:	a6 e5       	ldi	r26, 0x56	; 86
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	e6 e5       	ldi	r30, 0x56	; 86
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	80 68       	ori	r24, 0x80	; 128
    2782:	8c 93       	st	X, r24

		SET_BIT(TWCR,TWEN);
    2784:	a6 e5       	ldi	r26, 0x56	; 86
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e6 e5       	ldi	r30, 0x56	; 86
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	84 60       	ori	r24, 0x04	; 4
    2790:	8c 93       	st	X, r24
		/*wait hardware action*/
		while(GET_BIT(TWCR,TWINT)==0);
    2792:	e6 e5       	ldi	r30, 0x56	; 86
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	88 23       	and	r24, r24
    279a:	dc f7       	brge	.-10     	; 0x2792 <TWT_VidSlaveAddRead+0x4e>


}
    279c:	0f 90       	pop	r0
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <TWT_VidMasterSendData>:


void TWT_VidMasterSendData(u8 Copy_U8Data)
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	0f 92       	push	r0
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	89 83       	std	Y+1, r24	; 0x01
	/*write data*/
	TWDR=Copy_U8Data;
    27b0:	e3 e2       	ldi	r30, 0x23	; 35
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	80 83       	st	Z, r24
	/*clear int flag*/
	SET_BIT(TWCR,TWINT);
    27b8:	a6 e5       	ldi	r26, 0x56	; 86
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e6 e5       	ldi	r30, 0x56	; 86
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	80 68       	ori	r24, 0x80	; 128
    27c4:	8c 93       	st	X, r24

	SET_BIT(TWCR,TWEN);
    27c6:	a6 e5       	ldi	r26, 0x56	; 86
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e6 e5       	ldi	r30, 0x56	; 86
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	84 60       	ori	r24, 0x04	; 4
    27d2:	8c 93       	st	X, r24
	/*wait hardware action*/
	while(GET_BIT(TWCR,TWINT)==0);
    27d4:	e6 e5       	ldi	r30, 0x56	; 86
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	88 23       	and	r24, r24
    27dc:	dc f7       	brge	.-10     	; 0x27d4 <TWT_VidMasterSendData+0x30>
}
    27de:	0f 90       	pop	r0
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <TWT_VidSlaveReadData>:



u8 TWT_VidSlaveReadData(void)
{
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
	/*SLA+w HAs been recieved ACK has Been Returned */
	while((TWSR&0xf8)!=0x60);
    27ee:	e1 e2       	ldi	r30, 0x21	; 33
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	88 7f       	andi	r24, 0xF8	; 248
    27fa:	90 70       	andi	r25, 0x00	; 0
    27fc:	80 36       	cpi	r24, 0x60	; 96
    27fe:	91 05       	cpc	r25, r1
    2800:	b1 f7       	brne	.-20     	; 0x27ee <TWT_VidSlaveReadData+0x8>
	/*Clear flag*/
	SET_BIT(TWCR,TWINT);
    2802:	a6 e5       	ldi	r26, 0x56	; 86
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e6 e5       	ldi	r30, 0x56	; 86
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	80 68       	ori	r24, 0x80	; 128
    280e:	8c 93       	st	X, r24

	while((TWSR&0xf8)!=0x80);
    2810:	e1 e2       	ldi	r30, 0x21	; 33
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	88 2f       	mov	r24, r24
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	88 7f       	andi	r24, 0xF8	; 248
    281c:	90 70       	andi	r25, 0x00	; 0
    281e:	80 38       	cpi	r24, 0x80	; 128
    2820:	91 05       	cpc	r25, r1
    2822:	b1 f7       	brne	.-20     	; 0x2810 <TWT_VidSlaveReadData+0x2a>
	// we didnot set flag here cause the next func will reset
	return TWDR;
    2824:	e3 e2       	ldi	r30, 0x23	; 35
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z


}
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <TWT_VidMasterReadData>:

u8 TWT_VidMasterReadData(void)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62

		SET_BIT(TWCR,TWINT);
    2838:	a6 e5       	ldi	r26, 0x56	; 86
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e6 e5       	ldi	r30, 0x56	; 86
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	80 68       	ori	r24, 0x80	; 128
    2844:	8c 93       	st	X, r24

		while(GET_BIT(TWCR,TWINT)==0);
    2846:	e6 e5       	ldi	r30, 0x56	; 86
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	88 23       	and	r24, r24
    284e:	dc f7       	brge	.-10     	; 0x2846 <TWT_VidMasterReadData+0x16>
		// we did not set flag here cause the next func will reset
		return TWDR;
    2850:	e3 e2       	ldi	r30, 0x23	; 35
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z

}
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <KPD_VidInit>:

u8 KPD_Au8_RowPins[4] = {KPD_R1_PIN , KPD_R2_PIN , KPD_R3_PIN , KPD_R4_PIN};
u8 KPD_Au8_ColPins[4] = {KPD_C1_PIN , KPD_C2_PIN , KPD_C3_PIN , KPD_C4_PIN};

void KPD_VidInit(void)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPortDirection(KPD_PORT,0x0f);
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	6f e0       	ldi	r22, 0x0F	; 15
    2868:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DIO_VidSetPortDirection>
	DIO_VidSetPortValue(KPD_PORT,0xff);
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	6f ef       	ldi	r22, 0xFF	; 255
    2870:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_VidSetPortValue>
}
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <KPD_U8PressedKey>:

u8 KPD_U8PressedKey(void)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	63 97       	sbiw	r28, 0x13	; 19
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	de bf       	out	0x3e, r29	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8CounterR,Local_U8CounterC,Local_U8Pressed,Local_U8Flag=0;
    288e:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_U8ReturnedKey=KPD_CHEK;
    2890:	8f ef       	ldi	r24, 0xFF	; 255
    2892:	8f 87       	std	Y+15, r24	; 0x0f

	for(Local_U8CounterR=0;Local_U8CounterR<4;Local_U8CounterR++)
    2894:	1b 8a       	std	Y+19, r1	; 0x13
    2896:	ce c0       	rjmp	.+412    	; 0x2a34 <KPD_U8PressedKey+0x1ba>
	{
		DIO_VidSetPinValue(KPD_PORT,KPD_Au8_RowPins[Local_U8CounterR],DIO_LOW);
    2898:	8b 89       	ldd	r24, Y+19	; 0x13
    289a:	88 2f       	mov	r24, r24
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	fc 01       	movw	r30, r24
    28a0:	e3 5d       	subi	r30, 0xD3	; 211
    28a2:	fe 4f       	sbci	r31, 0xFE	; 254
    28a4:	90 81       	ld	r25, Z
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	69 2f       	mov	r22, r25
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		for(Local_U8CounterC=0;Local_U8CounterC<4;Local_U8CounterC++)
    28b0:	1a 8a       	std	Y+18, r1	; 0x12
    28b2:	aa c0       	rjmp	.+340    	; 0x2a08 <KPD_U8PressedKey+0x18e>
		{
			Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_Au8_ColPins[Local_U8CounterC]);
    28b4:	8a 89       	ldd	r24, Y+18	; 0x12
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	fc 01       	movw	r30, r24
    28bc:	ef 5c       	subi	r30, 0xCF	; 207
    28be:	fe 4f       	sbci	r31, 0xFE	; 254
    28c0:	90 81       	ld	r25, Z
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	69 2f       	mov	r22, r25
    28c6:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_U8GetPinValue>
    28ca:	89 8b       	std	Y+17, r24	; 0x11
			if(Local_U8Pressed==DIO_LOW)
    28cc:	89 89       	ldd	r24, Y+17	; 0x11
    28ce:	88 23       	and	r24, r24
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <KPD_U8PressedKey+0x5a>
    28d2:	97 c0       	rjmp	.+302    	; 0x2a02 <KPD_U8PressedKey+0x188>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 ea       	ldi	r26, 0xA0	; 160
    28da:	b1 e4       	ldi	r27, 0x41	; 65
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
    28de:	9c 87       	std	Y+12, r25	; 0x0c
    28e0:	ad 87       	std	Y+13, r26	; 0x0d
    28e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a ef       	ldi	r20, 0xFA	; 250
    28f2:	54 e4       	ldi	r21, 0x44	; 68
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	8f 83       	std	Y+7, r24	; 0x07
    28fe:	98 87       	std	Y+8, r25	; 0x08
    2900:	a9 87       	std	Y+9, r26	; 0x09
    2902:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	2c f4       	brge	.+10     	; 0x2926 <KPD_U8PressedKey+0xac>
		__ticks = 1;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9e 83       	std	Y+6, r25	; 0x06
    2922:	8d 83       	std	Y+5, r24	; 0x05
    2924:	3f c0       	rjmp	.+126    	; 0x29a4 <KPD_U8PressedKey+0x12a>
	else if (__tmp > 65535)
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	78 85       	ldd	r23, Y+8	; 0x08
    292a:	89 85       	ldd	r24, Y+9	; 0x09
    292c:	9a 85       	ldd	r25, Y+10	; 0x0a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	4c f5       	brge	.+82     	; 0x2990 <KPD_U8PressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2940:	7c 85       	ldd	r23, Y+12	; 0x0c
    2942:	8d 85       	ldd	r24, Y+13	; 0x0d
    2944:	9e 85       	ldd	r25, Y+14	; 0x0e
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e2       	ldi	r20, 0x20	; 32
    294c:	51 e4       	ldi	r21, 0x41	; 65
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	0f c0       	rjmp	.+30     	; 0x2986 <KPD_U8PressedKey+0x10c>
    2968:	88 ec       	ldi	r24, 0xC8	; 200
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	8b 83       	std	Y+3, r24	; 0x03
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <KPD_U8PressedKey+0xfa>
    2978:	9c 83       	std	Y+4, r25	; 0x04
    297a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	9e 81       	ldd	r25, Y+6	; 0x06
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f7       	brne	.-38     	; 0x2968 <KPD_U8PressedKey+0xee>
    298e:	21 c0       	rjmp	.+66     	; 0x29d2 <KPD_U8PressedKey+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	6f 81       	ldd	r22, Y+7	; 0x07
    2992:	78 85       	ldd	r23, Y+8	; 0x08
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	8d 83       	std	Y+5, r24	; 0x05
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <KPD_U8PressedKey+0x136>
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	0c c0       	rjmp	.+24     	; 0x29d2 <KPD_U8PressedKey+0x158>
			{
				_delay_ms(20);
				while(Local_U8Pressed==DIO_LOW)
				{
					Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_Au8_ColPins[Local_U8CounterC]);
    29ba:	8a 89       	ldd	r24, Y+18	; 0x12
    29bc:	88 2f       	mov	r24, r24
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	fc 01       	movw	r30, r24
    29c2:	ef 5c       	subi	r30, 0xCF	; 207
    29c4:	fe 4f       	sbci	r31, 0xFE	; 254
    29c6:	90 81       	ld	r25, Z
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	69 2f       	mov	r22, r25
    29cc:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_U8GetPinValue>
    29d0:	89 8b       	std	Y+17, r24	; 0x11
		{
			Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_Au8_ColPins[Local_U8CounterC]);
			if(Local_U8Pressed==DIO_LOW)
			{
				_delay_ms(20);
				while(Local_U8Pressed==DIO_LOW)
    29d2:	89 89       	ldd	r24, Y+17	; 0x11
    29d4:	88 23       	and	r24, r24
    29d6:	89 f3       	breq	.-30     	; 0x29ba <KPD_U8PressedKey+0x140>
				{
					Local_U8Pressed=DIO_U8GetPinValue(KPD_PORT,KPD_Au8_ColPins[Local_U8CounterC]);
				}
				Local_U8ReturnedKey=KPD_Au8Keys[Local_U8CounterR][Local_U8CounterC];
    29d8:	8b 89       	ldd	r24, Y+19	; 0x13
    29da:	48 2f       	mov	r20, r24
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	8a 89       	ldd	r24, Y+18	; 0x12
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	ca 01       	movw	r24, r20
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	82 0f       	add	r24, r18
    29f0:	93 1f       	adc	r25, r19
    29f2:	fc 01       	movw	r30, r24
    29f4:	e3 5e       	subi	r30, 0xE3	; 227
    29f6:	fe 4f       	sbci	r31, 0xFE	; 254
    29f8:	80 81       	ld	r24, Z
    29fa:	8f 87       	std	Y+15, r24	; 0x0f
				Local_U8Flag=1;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	88 8b       	std	Y+16, r24	; 0x10
    2a00:	07 c0       	rjmp	.+14     	; 0x2a10 <KPD_U8PressedKey+0x196>
	u8 Local_U8ReturnedKey=KPD_CHEK;

	for(Local_U8CounterR=0;Local_U8CounterR<4;Local_U8CounterR++)
	{
		DIO_VidSetPinValue(KPD_PORT,KPD_Au8_RowPins[Local_U8CounterR],DIO_LOW);
		for(Local_U8CounterC=0;Local_U8CounterC<4;Local_U8CounterC++)
    2a02:	8a 89       	ldd	r24, Y+18	; 0x12
    2a04:	8f 5f       	subi	r24, 0xFF	; 255
    2a06:	8a 8b       	std	Y+18, r24	; 0x12
    2a08:	8a 89       	ldd	r24, Y+18	; 0x12
    2a0a:	84 30       	cpi	r24, 0x04	; 4
    2a0c:	08 f4       	brcc	.+2      	; 0x2a10 <KPD_U8PressedKey+0x196>
    2a0e:	52 cf       	rjmp	.-348    	; 0x28b4 <KPD_U8PressedKey+0x3a>
				Local_U8ReturnedKey=KPD_Au8Keys[Local_U8CounterR][Local_U8CounterC];
				Local_U8Flag=1;
				break;
			}
		}
		DIO_VidSetPinValue(KPD_PORT,KPD_Au8_RowPins[Local_U8CounterR],DIO_HIGH);
    2a10:	8b 89       	ldd	r24, Y+19	; 0x13
    2a12:	88 2f       	mov	r24, r24
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	fc 01       	movw	r30, r24
    2a18:	e3 5d       	subi	r30, 0xD3	; 211
    2a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1c:	90 81       	ld	r25, Z
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	69 2f       	mov	r22, r25
    2a22:	41 e0       	ldi	r20, 0x01	; 1
    2a24:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		if(Local_U8Flag==1)break;
    2a28:	88 89       	ldd	r24, Y+16	; 0x10
    2a2a:	81 30       	cpi	r24, 0x01	; 1
    2a2c:	39 f0       	breq	.+14     	; 0x2a3c <KPD_U8PressedKey+0x1c2>
u8 KPD_U8PressedKey(void)
{
	u8 Local_U8CounterR,Local_U8CounterC,Local_U8Pressed,Local_U8Flag=0;
	u8 Local_U8ReturnedKey=KPD_CHEK;

	for(Local_U8CounterR=0;Local_U8CounterR<4;Local_U8CounterR++)
    2a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a30:	8f 5f       	subi	r24, 0xFF	; 255
    2a32:	8b 8b       	std	Y+19, r24	; 0x13
    2a34:	8b 89       	ldd	r24, Y+19	; 0x13
    2a36:	84 30       	cpi	r24, 0x04	; 4
    2a38:	08 f4       	brcc	.+2      	; 0x2a3c <KPD_U8PressedKey+0x1c2>
    2a3a:	2e cf       	rjmp	.-420    	; 0x2898 <KPD_U8PressedKey+0x1e>
		}
		DIO_VidSetPinValue(KPD_PORT,KPD_Au8_RowPins[Local_U8CounterR],DIO_HIGH);
		if(Local_U8Flag==1)break;
	}

	return Local_U8ReturnedKey;
    2a3c:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    2a3e:	63 96       	adiw	r28, 0x13	; 19
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <Checking_Pass>:


u8 Checking_Pass(u8 Copy_U8arr1[],u8 Copy_U8arr2[],u8 CopyU8Number_Of_Digits)
{
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	28 97       	sbiw	r28, 0x08	; 8
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	9c 83       	std	Y+4, r25	; 0x04
    2a66:	8b 83       	std	Y+3, r24	; 0x03
    2a68:	7e 83       	std	Y+6, r23	; 0x06
    2a6a:	6d 83       	std	Y+5, r22	; 0x05
    2a6c:	4f 83       	std	Y+7, r20	; 0x07
	u8 x=0,Internal_Counter=0;
    2a6e:	1a 82       	std	Y+2, r1	; 0x02
    2a70:	19 82       	std	Y+1, r1	; 0x01
    2a72:	1a c0       	rjmp	.+52     	; 0x2aa8 <Checking_Pass+0x58>
	for(x;x<CopyU8Number_Of_Digits;x++)
	{
		if(Copy_U8arr1[x] == Copy_U8arr2[x])
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7e:	fc 01       	movw	r30, r24
    2a80:	e2 0f       	add	r30, r18
    2a82:	f3 1f       	adc	r31, r19
    2a84:	40 81       	ld	r20, Z
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	28 2f       	mov	r18, r24
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a90:	fc 01       	movw	r30, r24
    2a92:	e2 0f       	add	r30, r18
    2a94:	f3 1f       	adc	r31, r19
    2a96:	80 81       	ld	r24, Z
    2a98:	48 17       	cp	r20, r24
    2a9a:	19 f4       	brne	.+6      	; 0x2aa2 <Checking_Pass+0x52>
		{
			Internal_Counter++;
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	89 83       	std	Y+1, r24	; 0x01


u8 Checking_Pass(u8 Copy_U8arr1[],u8 Copy_U8arr2[],u8 CopyU8Number_Of_Digits)
{
	u8 x=0,Internal_Counter=0;
	for(x;x<CopyU8Number_Of_Digits;x++)
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	8f 5f       	subi	r24, 0xFF	; 255
    2aa6:	8a 83       	std	Y+2, r24	; 0x02
    2aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aaa:	8f 81       	ldd	r24, Y+7	; 0x07
    2aac:	98 17       	cp	r25, r24
    2aae:	10 f3       	brcs	.-60     	; 0x2a74 <Checking_Pass+0x24>
		{
			Internal_Counter++;
		}

	}
	if(Internal_Counter == CopyU8Number_Of_Digits )
    2ab0:	99 81       	ldd	r25, Y+1	; 0x01
    2ab2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab4:	98 17       	cp	r25, r24
    2ab6:	19 f4       	brne	.+6      	; 0x2abe <Checking_Pass+0x6e>
		return 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	88 87       	std	Y+8, r24	; 0x08
    2abc:	01 c0       	rjmp	.+2      	; 0x2ac0 <Checking_Pass+0x70>
	else
		return 0;
    2abe:	18 86       	std	Y+8, r1	; 0x08
    2ac0:	88 85       	ldd	r24, Y+8	; 0x08
}
    2ac2:	28 96       	adiw	r28, 0x08	; 8
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	08 95       	ret

00002ad4 <LCD_VidSendCMD>:
#include"DIO_Interface.h"
#include"LCD.h"


void LCD_VidSendCMD(u8 Copy_U8CMD)
{
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	2f 97       	sbiw	r28, 0x0f	; 15
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPinValue(LCD_CMD_PORT,RS,0);
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	65 e0       	ldi	r22, 0x05	; 5
    2aee:	40 e0       	ldi	r20, 0x00	; 0
    2af0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,RW,0);
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	66 e0       	ldi	r22, 0x06	; 6
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8CMD);
    2afe:	83 e0       	ldi	r24, 0x03	; 3
    2b00:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b02:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_VidSetPortValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,1);
    2b06:	82 e0       	ldi	r24, 0x02	; 2
    2b08:	67 e0       	ldi	r22, 0x07	; 7
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	a0 e8       	ldi	r26, 0x80	; 128
    2b16:	bf e3       	ldi	r27, 0x3F	; 63
    2b18:	8b 87       	std	Y+11, r24	; 0x0b
    2b1a:	9c 87       	std	Y+12, r25	; 0x0c
    2b1c:	ad 87       	std	Y+13, r26	; 0x0d
    2b1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	4a ef       	ldi	r20, 0xFA	; 250
    2b2e:	54 e4       	ldi	r21, 0x44	; 68
    2b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	8f 83       	std	Y+7, r24	; 0x07
    2b3a:	98 87       	std	Y+8, r25	; 0x08
    2b3c:	a9 87       	std	Y+9, r26	; 0x09
    2b3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b40:	6f 81       	ldd	r22, Y+7	; 0x07
    2b42:	78 85       	ldd	r23, Y+8	; 0x08
    2b44:	89 85       	ldd	r24, Y+9	; 0x09
    2b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e8       	ldi	r20, 0x80	; 128
    2b4e:	5f e3       	ldi	r21, 0x3F	; 63
    2b50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b54:	88 23       	and	r24, r24
    2b56:	2c f4       	brge	.+10     	; 0x2b62 <LCD_VidSendCMD+0x8e>
		__ticks = 1;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	9e 83       	std	Y+6, r25	; 0x06
    2b5e:	8d 83       	std	Y+5, r24	; 0x05
    2b60:	3f c0       	rjmp	.+126    	; 0x2be0 <LCD_VidSendCMD+0x10c>
	else if (__tmp > 65535)
    2b62:	6f 81       	ldd	r22, Y+7	; 0x07
    2b64:	78 85       	ldd	r23, Y+8	; 0x08
    2b66:	89 85       	ldd	r24, Y+9	; 0x09
    2b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	3f ef       	ldi	r19, 0xFF	; 255
    2b6e:	4f e7       	ldi	r20, 0x7F	; 127
    2b70:	57 e4       	ldi	r21, 0x47	; 71
    2b72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b76:	18 16       	cp	r1, r24
    2b78:	4c f5       	brge	.+82     	; 0x2bcc <LCD_VidSendCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e2       	ldi	r20, 0x20	; 32
    2b88:	51 e4       	ldi	r21, 0x41	; 65
    2b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	bc 01       	movw	r22, r24
    2b94:	cd 01       	movw	r24, r26
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	0f c0       	rjmp	.+30     	; 0x2bc2 <LCD_VidSendCMD+0xee>
    2ba4:	88 ec       	ldi	r24, 0xC8	; 200
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	9c 83       	std	Y+4, r25	; 0x04
    2baa:	8b 83       	std	Y+3, r24	; 0x03
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <LCD_VidSendCMD+0xdc>
    2bb4:	9c 83       	std	Y+4, r25	; 0x04
    2bb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bba:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	9e 83       	std	Y+6, r25	; 0x06
    2bc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	69 f7       	brne	.-38     	; 0x2ba4 <LCD_VidSendCMD+0xd0>
    2bca:	14 c0       	rjmp	.+40     	; 0x2bf4 <LCD_VidSendCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bce:	78 85       	ldd	r23, Y+8	; 0x08
    2bd0:	89 85       	ldd	r24, Y+9	; 0x09
    2bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	9e 83       	std	Y+6, r25	; 0x06
    2bde:	8d 83       	std	Y+5, r24	; 0x05
    2be0:	8d 81       	ldd	r24, Y+5	; 0x05
    2be2:	9e 81       	ldd	r25, Y+6	; 0x06
    2be4:	9a 83       	std	Y+2, r25	; 0x02
    2be6:	89 83       	std	Y+1, r24	; 0x01
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	9a 81       	ldd	r25, Y+2	; 0x02
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_VidSendCMD+0x118>
    2bf0:	9a 83       	std	Y+2, r25	; 0x02
    2bf2:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(1);
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,0);
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	67 e0       	ldi	r22, 0x07	; 7
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
}
    2bfe:	2f 96       	adiw	r28, 0x0f	; 15
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <LCD_VidSendData>:



void LCD_VidSendData(u8 Copy_U8Data)
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	2f 97       	sbiw	r28, 0x0f	; 15
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPinValue(LCD_CMD_PORT,RS,1);
    2c26:	82 e0       	ldi	r24, 0x02	; 2
    2c28:	65 e0       	ldi	r22, 0x05	; 5
    2c2a:	41 e0       	ldi	r20, 0x01	; 1
    2c2c:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,RW,0);
    2c30:	82 e0       	ldi	r24, 0x02	; 2
    2c32:	66 e0       	ldi	r22, 0x06	; 6
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
	
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8Data);
    2c3a:	83 e0       	ldi	r24, 0x03	; 3
    2c3c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c3e:	0e 94 1d 08 	call	0x103a	; 0x103a <DIO_VidSetPortValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,1);
    2c42:	82 e0       	ldi	r24, 0x02	; 2
    2c44:	67 e0       	ldi	r22, 0x07	; 7
    2c46:	41 e0       	ldi	r20, 0x01	; 1
    2c48:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	a0 e8       	ldi	r26, 0x80	; 128
    2c52:	bf e3       	ldi	r27, 0x3F	; 63
    2c54:	8b 87       	std	Y+11, r24	; 0x0b
    2c56:	9c 87       	std	Y+12, r25	; 0x0c
    2c58:	ad 87       	std	Y+13, r26	; 0x0d
    2c5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a ef       	ldi	r20, 0xFA	; 250
    2c6a:	54 e4       	ldi	r21, 0x44	; 68
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8f 83       	std	Y+7, r24	; 0x07
    2c76:	98 87       	std	Y+8, r25	; 0x08
    2c78:	a9 87       	std	Y+9, r26	; 0x09
    2c7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c90:	88 23       	and	r24, r24
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <LCD_VidSendData+0x8e>
		__ticks = 1;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
    2c9c:	3f c0       	rjmp	.+126    	; 0x2d1c <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    2c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca0:	78 85       	ldd	r23, Y+8	; 0x08
    2ca2:	89 85       	ldd	r24, Y+9	; 0x09
    2ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	57 e4       	ldi	r21, 0x47	; 71
    2cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	4c f5       	brge	.+82     	; 0x2d08 <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9e 83       	std	Y+6, r25	; 0x06
    2cdc:	8d 83       	std	Y+5, r24	; 0x05
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <LCD_VidSendData+0xee>
    2ce0:	88 ec       	ldi	r24, 0xC8	; 200
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9c 83       	std	Y+4, r25	; 0x04
    2ce6:	8b 83       	std	Y+3, r24	; 0x03
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <LCD_VidSendData+0xdc>
    2cf0:	9c 83       	std	Y+4, r25	; 0x04
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	69 f7       	brne	.-38     	; 0x2ce0 <LCD_VidSendData+0xd0>
    2d06:	14 c0       	rjmp	.+40     	; 0x2d30 <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9e 83       	std	Y+6, r25	; 0x06
    2d1a:	8d 83       	std	Y+5, r24	; 0x05
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <LCD_VidSendData+0x118>
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(1);
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,0);
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	67 e0       	ldi	r22, 0x07	; 7
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
}
    2d3a:	2f 96       	adiw	r28, 0x0f	; 15
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <LCD_VidSendString>:

}*/


void LCD_VidSendString(u8 *Copy_U8String)
{
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	00 d0       	rcall	.+0      	; 0x2d52 <LCD_VidSendString+0x6>
    2d52:	0f 92       	push	r0
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	9b 83       	std	Y+3, r25	; 0x03
    2d5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter = 0 ;
    2d5c:	19 82       	std	Y+1, r1	; 0x01
    2d5e:	0e c0       	rjmp	.+28     	; 0x2d7c <LCD_VidSendString+0x30>
	while(Copy_U8String[counter] !='\0')
	{
		LCD_VidSendData(Copy_U8String[counter]);
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	28 2f       	mov	r18, r24
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	e2 0f       	add	r30, r18
    2d6e:	f3 1f       	adc	r31, r19
    2d70:	80 81       	ld	r24, Z
    2d72:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_VidSendData>
		counter++;
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	8f 5f       	subi	r24, 0xFF	; 255
    2d7a:	89 83       	std	Y+1, r24	; 0x01


void LCD_VidSendString(u8 *Copy_U8String)
{
	u8 counter = 0 ;
	while(Copy_U8String[counter] !='\0')
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	28 2f       	mov	r18, r24
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	8a 81       	ldd	r24, Y+2	; 0x02
    2d84:	9b 81       	ldd	r25, Y+3	; 0x03
    2d86:	fc 01       	movw	r30, r24
    2d88:	e2 0f       	add	r30, r18
    2d8a:	f3 1f       	adc	r31, r19
    2d8c:	80 81       	ld	r24, Z
    2d8e:	88 23       	and	r24, r24
    2d90:	39 f7       	brne	.-50     	; 0x2d60 <LCD_VidSendString+0x14>
	{
		LCD_VidSendData(Copy_U8String[counter]);
		counter++;
	}
}
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <LCD_VidInit>:




void LCD_VidInit(void)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	e8 97       	sbiw	r28, 0x38	; 56
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_DATA_PORT,0xff);
    2db2:	83 e0       	ldi	r24, 0x03	; 3
    2db4:	6f ef       	ldi	r22, 0xFF	; 255
    2db6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DIO_VidSetPortDirection>

	DIO_VidSetPinDirection(LCD_CMD_PORT,RS,DIO_OUTPUT);
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	65 e0       	ldi	r22, 0x05	; 5
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CMD_PORT,RW,DIO_OUTPUT);
    2dc4:	82 e0       	ldi	r24, 0x02	; 2
    2dc6:	66 e0       	ldi	r22, 0x06	; 6
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CMD_PORT,EN,DIO_OUTPUT);
    2dce:	82 e0       	ldi	r24, 0x02	; 2
    2dd0:	67 e0       	ldi	r22, 0x07	; 7
    2dd2:	41 e0       	ldi	r20, 0x01	; 1
    2dd4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	ac e0       	ldi	r26, 0x0C	; 12
    2dde:	b2 e4       	ldi	r27, 0x42	; 66
    2de0:	8d ab       	std	Y+53, r24	; 0x35
    2de2:	9e ab       	std	Y+54, r25	; 0x36
    2de4:	af ab       	std	Y+55, r26	; 0x37
    2de6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de8:	6d a9       	ldd	r22, Y+53	; 0x35
    2dea:	7e a9       	ldd	r23, Y+54	; 0x36
    2dec:	8f a9       	ldd	r24, Y+55	; 0x37
    2dee:	98 ad       	ldd	r25, Y+56	; 0x38
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4a ef       	ldi	r20, 0xFA	; 250
    2df6:	54 e4       	ldi	r21, 0x44	; 68
    2df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	89 ab       	std	Y+49, r24	; 0x31
    2e02:	9a ab       	std	Y+50, r25	; 0x32
    2e04:	ab ab       	std	Y+51, r26	; 0x33
    2e06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e08:	69 a9       	ldd	r22, Y+49	; 0x31
    2e0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e8       	ldi	r20, 0x80	; 128
    2e16:	5f e3       	ldi	r21, 0x3F	; 63
    2e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e1c:	88 23       	and	r24, r24
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <LCD_VidInit+0x8c>
		__ticks = 1;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	98 ab       	std	Y+48, r25	; 0x30
    2e26:	8f a7       	std	Y+47, r24	; 0x2f
    2e28:	3f c0       	rjmp	.+126    	; 0x2ea8 <LCD_VidInit+0x10a>
	else if (__tmp > 65535)
    2e2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e30:	9c a9       	ldd	r25, Y+52	; 0x34
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	3f ef       	ldi	r19, 0xFF	; 255
    2e36:	4f e7       	ldi	r20, 0x7F	; 127
    2e38:	57 e4       	ldi	r21, 0x47	; 71
    2e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e3e:	18 16       	cp	r1, r24
    2e40:	4c f5       	brge	.+82     	; 0x2e94 <LCD_VidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e42:	6d a9       	ldd	r22, Y+53	; 0x35
    2e44:	7e a9       	ldd	r23, Y+54	; 0x36
    2e46:	8f a9       	ldd	r24, Y+55	; 0x37
    2e48:	98 ad       	ldd	r25, Y+56	; 0x38
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e2       	ldi	r20, 0x20	; 32
    2e50:	51 e4       	ldi	r21, 0x41	; 65
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	98 ab       	std	Y+48, r25	; 0x30
    2e68:	8f a7       	std	Y+47, r24	; 0x2f
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <LCD_VidInit+0xec>
    2e6c:	88 ec       	ldi	r24, 0xC8	; 200
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	9e a7       	std	Y+46, r25	; 0x2e
    2e72:	8d a7       	std	Y+45, r24	; 0x2d
    2e74:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e76:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <LCD_VidInit+0xda>
    2e7c:	9e a7       	std	Y+46, r25	; 0x2e
    2e7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e80:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e82:	98 a9       	ldd	r25, Y+48	; 0x30
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	98 ab       	std	Y+48, r25	; 0x30
    2e88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	69 f7       	brne	.-38     	; 0x2e6c <LCD_VidInit+0xce>
    2e92:	14 c0       	rjmp	.+40     	; 0x2ebc <LCD_VidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e94:	69 a9       	ldd	r22, Y+49	; 0x31
    2e96:	7a a9       	ldd	r23, Y+50	; 0x32
    2e98:	8b a9       	ldd	r24, Y+51	; 0x33
    2e9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	98 ab       	std	Y+48, r25	; 0x30
    2ea6:	8f a7       	std	Y+47, r24	; 0x2f
    2ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eaa:	98 a9       	ldd	r25, Y+48	; 0x30
    2eac:	9c a7       	std	Y+44, r25	; 0x2c
    2eae:	8b a7       	std	Y+43, r24	; 0x2b
    2eb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <LCD_VidInit+0x116>
    2eb8:	9c a7       	std	Y+44, r25	; 0x2c
    2eba:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);
	LCD_VidSendCMD(LCD_FUNC_SET);
    2ebc:	88 e3       	ldi	r24, 0x38	; 56
    2ebe:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_VidSendCMD>
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a0 e8       	ldi	r26, 0x80	; 128
    2ec8:	bf e3       	ldi	r27, 0x3F	; 63
    2eca:	8f a3       	std	Y+39, r24	; 0x27
    2ecc:	98 a7       	std	Y+40, r25	; 0x28
    2ece:	a9 a7       	std	Y+41, r26	; 0x29
    2ed0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ed4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ed6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ed8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	4a ef       	ldi	r20, 0xFA	; 250
    2ee0:	54 e4       	ldi	r21, 0x44	; 68
    2ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	8b a3       	std	Y+35, r24	; 0x23
    2eec:	9c a3       	std	Y+36, r25	; 0x24
    2eee:	ad a3       	std	Y+37, r26	; 0x25
    2ef0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ef2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ef8:	9e a1       	ldd	r25, Y+38	; 0x26
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e8       	ldi	r20, 0x80	; 128
    2f00:	5f e3       	ldi	r21, 0x3F	; 63
    2f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f06:	88 23       	and	r24, r24
    2f08:	2c f4       	brge	.+10     	; 0x2f14 <LCD_VidInit+0x176>
		__ticks = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	9a a3       	std	Y+34, r25	; 0x22
    2f10:	89 a3       	std	Y+33, r24	; 0x21
    2f12:	3f c0       	rjmp	.+126    	; 0x2f92 <LCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    2f14:	6b a1       	ldd	r22, Y+35	; 0x23
    2f16:	7c a1       	ldd	r23, Y+36	; 0x24
    2f18:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	3f ef       	ldi	r19, 0xFF	; 255
    2f20:	4f e7       	ldi	r20, 0x7F	; 127
    2f22:	57 e4       	ldi	r21, 0x47	; 71
    2f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f28:	18 16       	cp	r1, r24
    2f2a:	4c f5       	brge	.+82     	; 0x2f7e <LCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f2e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f30:	89 a5       	ldd	r24, Y+41	; 0x29
    2f32:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e2       	ldi	r20, 0x20	; 32
    2f3a:	51 e4       	ldi	r21, 0x41	; 65
    2f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	bc 01       	movw	r22, r24
    2f46:	cd 01       	movw	r24, r26
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	9a a3       	std	Y+34, r25	; 0x22
    2f52:	89 a3       	std	Y+33, r24	; 0x21
    2f54:	0f c0       	rjmp	.+30     	; 0x2f74 <LCD_VidInit+0x1d6>
    2f56:	88 ec       	ldi	r24, 0xC8	; 200
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	98 a3       	std	Y+32, r25	; 0x20
    2f5c:	8f 8f       	std	Y+31, r24	; 0x1f
    2f5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f60:	98 a1       	ldd	r25, Y+32	; 0x20
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	f1 f7       	brne	.-4      	; 0x2f62 <LCD_VidInit+0x1c4>
    2f66:	98 a3       	std	Y+32, r25	; 0x20
    2f68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	9a a3       	std	Y+34, r25	; 0x22
    2f72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f74:	89 a1       	ldd	r24, Y+33	; 0x21
    2f76:	9a a1       	ldd	r25, Y+34	; 0x22
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	69 f7       	brne	.-38     	; 0x2f56 <LCD_VidInit+0x1b8>
    2f7c:	14 c0       	rjmp	.+40     	; 0x2fa6 <LCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f80:	7c a1       	ldd	r23, Y+36	; 0x24
    2f82:	8d a1       	ldd	r24, Y+37	; 0x25
    2f84:	9e a1       	ldd	r25, Y+38	; 0x26
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	9a a3       	std	Y+34, r25	; 0x22
    2f90:	89 a3       	std	Y+33, r24	; 0x21
    2f92:	89 a1       	ldd	r24, Y+33	; 0x21
    2f94:	9a a1       	ldd	r25, Y+34	; 0x22
    2f96:	9e 8f       	std	Y+30, r25	; 0x1e
    2f98:	8d 8f       	std	Y+29, r24	; 0x1d
    2f9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <LCD_VidInit+0x200>
    2fa2:	9e 8f       	std	Y+30, r25	; 0x1e
    2fa4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidSendCMD(LCD_ONOF);
    2fa6:	8f e0       	ldi	r24, 0x0F	; 15
    2fa8:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_VidSendCMD>
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	a0 e8       	ldi	r26, 0x80	; 128
    2fb2:	bf e3       	ldi	r27, 0x3F	; 63
    2fb4:	89 8f       	std	Y+25, r24	; 0x19
    2fb6:	9a 8f       	std	Y+26, r25	; 0x1a
    2fb8:	ab 8f       	std	Y+27, r26	; 0x1b
    2fba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    2fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4a ef       	ldi	r20, 0xFA	; 250
    2fca:	54 e4       	ldi	r21, 0x44	; 68
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	8d 8b       	std	Y+21, r24	; 0x15
    2fd6:	9e 8b       	std	Y+22, r25	; 0x16
    2fd8:	af 8b       	std	Y+23, r26	; 0x17
    2fda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2fde:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e8       	ldi	r20, 0x80	; 128
    2fea:	5f e3       	ldi	r21, 0x3F	; 63
    2fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff0:	88 23       	and	r24, r24
    2ff2:	2c f4       	brge	.+10     	; 0x2ffe <LCD_VidInit+0x260>
		__ticks = 1;
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9c 8b       	std	Y+20, r25	; 0x14
    2ffa:	8b 8b       	std	Y+19, r24	; 0x13
    2ffc:	3f c0       	rjmp	.+126    	; 0x307c <LCD_VidInit+0x2de>
	else if (__tmp > 65535)
    2ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    3000:	7e 89       	ldd	r23, Y+22	; 0x16
    3002:	8f 89       	ldd	r24, Y+23	; 0x17
    3004:	98 8d       	ldd	r25, Y+24	; 0x18
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	3f ef       	ldi	r19, 0xFF	; 255
    300a:	4f e7       	ldi	r20, 0x7F	; 127
    300c:	57 e4       	ldi	r21, 0x47	; 71
    300e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3012:	18 16       	cp	r1, r24
    3014:	4c f5       	brge	.+82     	; 0x3068 <LCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3016:	69 8d       	ldd	r22, Y+25	; 0x19
    3018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    301a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    301c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e2       	ldi	r20, 0x20	; 32
    3024:	51 e4       	ldi	r21, 0x41	; 65
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	bc 01       	movw	r22, r24
    3030:	cd 01       	movw	r24, r26
    3032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	9c 8b       	std	Y+20, r25	; 0x14
    303c:	8b 8b       	std	Y+19, r24	; 0x13
    303e:	0f c0       	rjmp	.+30     	; 0x305e <LCD_VidInit+0x2c0>
    3040:	88 ec       	ldi	r24, 0xC8	; 200
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	9a 8b       	std	Y+18, r25	; 0x12
    3046:	89 8b       	std	Y+17, r24	; 0x11
    3048:	89 89       	ldd	r24, Y+17	; 0x11
    304a:	9a 89       	ldd	r25, Y+18	; 0x12
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <LCD_VidInit+0x2ae>
    3050:	9a 8b       	std	Y+18, r25	; 0x12
    3052:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3054:	8b 89       	ldd	r24, Y+19	; 0x13
    3056:	9c 89       	ldd	r25, Y+20	; 0x14
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	9c 8b       	std	Y+20, r25	; 0x14
    305c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305e:	8b 89       	ldd	r24, Y+19	; 0x13
    3060:	9c 89       	ldd	r25, Y+20	; 0x14
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	69 f7       	brne	.-38     	; 0x3040 <LCD_VidInit+0x2a2>
    3066:	14 c0       	rjmp	.+40     	; 0x3090 <LCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3068:	6d 89       	ldd	r22, Y+21	; 0x15
    306a:	7e 89       	ldd	r23, Y+22	; 0x16
    306c:	8f 89       	ldd	r24, Y+23	; 0x17
    306e:	98 8d       	ldd	r25, Y+24	; 0x18
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	9c 8b       	std	Y+20, r25	; 0x14
    307a:	8b 8b       	std	Y+19, r24	; 0x13
    307c:	8b 89       	ldd	r24, Y+19	; 0x13
    307e:	9c 89       	ldd	r25, Y+20	; 0x14
    3080:	98 8b       	std	Y+16, r25	; 0x10
    3082:	8f 87       	std	Y+15, r24	; 0x0f
    3084:	8f 85       	ldd	r24, Y+15	; 0x0f
    3086:	98 89       	ldd	r25, Y+16	; 0x10
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <LCD_VidInit+0x2ea>
    308c:	98 8b       	std	Y+16, r25	; 0x10
    308e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidSendCMD(LCD_CLEAR);
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_VidSendCMD>
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	a0 e8       	ldi	r26, 0x80	; 128
    309c:	bf e3       	ldi	r27, 0x3F	; 63
    309e:	8b 87       	std	Y+11, r24	; 0x0b
    30a0:	9c 87       	std	Y+12, r25	; 0x0c
    30a2:	ad 87       	std	Y+13, r26	; 0x0d
    30a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	4a ef       	ldi	r20, 0xFA	; 250
    30b4:	54 e4       	ldi	r21, 0x44	; 68
    30b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	8f 83       	std	Y+7, r24	; 0x07
    30c0:	98 87       	std	Y+8, r25	; 0x08
    30c2:	a9 87       	std	Y+9, r26	; 0x09
    30c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c6:	6f 81       	ldd	r22, Y+7	; 0x07
    30c8:	78 85       	ldd	r23, Y+8	; 0x08
    30ca:	89 85       	ldd	r24, Y+9	; 0x09
    30cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e8       	ldi	r20, 0x80	; 128
    30d4:	5f e3       	ldi	r21, 0x3F	; 63
    30d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30da:	88 23       	and	r24, r24
    30dc:	2c f4       	brge	.+10     	; 0x30e8 <LCD_VidInit+0x34a>
		__ticks = 1;
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	9e 83       	std	Y+6, r25	; 0x06
    30e4:	8d 83       	std	Y+5, r24	; 0x05
    30e6:	3f c0       	rjmp	.+126    	; 0x3166 <LCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    30e8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ea:	78 85       	ldd	r23, Y+8	; 0x08
    30ec:	89 85       	ldd	r24, Y+9	; 0x09
    30ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	3f ef       	ldi	r19, 0xFF	; 255
    30f4:	4f e7       	ldi	r20, 0x7F	; 127
    30f6:	57 e4       	ldi	r21, 0x47	; 71
    30f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	4c f5       	brge	.+82     	; 0x3152 <LCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3100:	6b 85       	ldd	r22, Y+11	; 0x0b
    3102:	7c 85       	ldd	r23, Y+12	; 0x0c
    3104:	8d 85       	ldd	r24, Y+13	; 0x0d
    3106:	9e 85       	ldd	r25, Y+14	; 0x0e
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e2       	ldi	r20, 0x20	; 32
    310e:	51 e4       	ldi	r21, 0x41	; 65
    3110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	bc 01       	movw	r22, r24
    311a:	cd 01       	movw	r24, r26
    311c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	8d 83       	std	Y+5, r24	; 0x05
    3128:	0f c0       	rjmp	.+30     	; 0x3148 <LCD_VidInit+0x3aa>
    312a:	88 ec       	ldi	r24, 0xC8	; 200
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	9c 83       	std	Y+4, r25	; 0x04
    3130:	8b 83       	std	Y+3, r24	; 0x03
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	9c 81       	ldd	r25, Y+4	; 0x04
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <LCD_VidInit+0x398>
    313a:	9c 83       	std	Y+4, r25	; 0x04
    313c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313e:	8d 81       	ldd	r24, Y+5	; 0x05
    3140:	9e 81       	ldd	r25, Y+6	; 0x06
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	9e 83       	std	Y+6, r25	; 0x06
    3146:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	69 f7       	brne	.-38     	; 0x312a <LCD_VidInit+0x38c>
    3150:	14 c0       	rjmp	.+40     	; 0x317a <LCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3152:	6f 81       	ldd	r22, Y+7	; 0x07
    3154:	78 85       	ldd	r23, Y+8	; 0x08
    3156:	89 85       	ldd	r24, Y+9	; 0x09
    3158:	9a 85       	ldd	r25, Y+10	; 0x0a
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
    3166:	8d 81       	ldd	r24, Y+5	; 0x05
    3168:	9e 81       	ldd	r25, Y+6	; 0x06
    316a:	9a 83       	std	Y+2, r25	; 0x02
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	9a 81       	ldd	r25, Y+2	; 0x02
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	f1 f7       	brne	.-4      	; 0x3172 <LCD_VidInit+0x3d4>
    3176:	9a 83       	std	Y+2, r25	; 0x02
    3178:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    317a:	e8 96       	adiw	r28, 0x38	; 56
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <LCD_VidCLR>:

void LCD_VidCLR(void)
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	2e 97       	sbiw	r28, 0x0e	; 14
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61

	LCD_VidSendCMD(0x01);
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_VidSendCMD>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a0 e0       	ldi	r26, 0x00	; 0
    31ac:	b0 e4       	ldi	r27, 0x40	; 64
    31ae:	8b 87       	std	Y+11, r24	; 0x0b
    31b0:	9c 87       	std	Y+12, r25	; 0x0c
    31b2:	ad 87       	std	Y+13, r26	; 0x0d
    31b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    31bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a ef       	ldi	r20, 0xFA	; 250
    31c4:	54 e4       	ldi	r21, 0x44	; 68
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	8f 83       	std	Y+7, r24	; 0x07
    31d0:	98 87       	std	Y+8, r25	; 0x08
    31d2:	a9 87       	std	Y+9, r26	; 0x09
    31d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31d6:	6f 81       	ldd	r22, Y+7	; 0x07
    31d8:	78 85       	ldd	r23, Y+8	; 0x08
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e8       	ldi	r20, 0x80	; 128
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ea:	88 23       	and	r24, r24
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <LCD_VidCLR+0x6c>
		__ticks = 1;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
    31f6:	3f c0       	rjmp	.+126    	; 0x3276 <LCD_VidCLR+0xea>
	else if (__tmp > 65535)
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	4f e7       	ldi	r20, 0x7F	; 127
    3206:	57 e4       	ldi	r21, 0x47	; 71
    3208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    320c:	18 16       	cp	r1, r24
    320e:	4c f5       	brge	.+82     	; 0x3262 <LCD_VidCLR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3210:	6b 85       	ldd	r22, Y+11	; 0x0b
    3212:	7c 85       	ldd	r23, Y+12	; 0x0c
    3214:	8d 85       	ldd	r24, Y+13	; 0x0d
    3216:	9e 85       	ldd	r25, Y+14	; 0x0e
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e2       	ldi	r20, 0x20	; 32
    321e:	51 e4       	ldi	r21, 0x41	; 65
    3220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9e 83       	std	Y+6, r25	; 0x06
    3236:	8d 83       	std	Y+5, r24	; 0x05
    3238:	0f c0       	rjmp	.+30     	; 0x3258 <LCD_VidCLR+0xcc>
    323a:	88 ec       	ldi	r24, 0xC8	; 200
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9c 83       	std	Y+4, r25	; 0x04
    3240:	8b 83       	std	Y+3, r24	; 0x03
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	9c 81       	ldd	r25, Y+4	; 0x04
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <LCD_VidCLR+0xba>
    324a:	9c 83       	std	Y+4, r25	; 0x04
    324c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324e:	8d 81       	ldd	r24, Y+5	; 0x05
    3250:	9e 81       	ldd	r25, Y+6	; 0x06
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	69 f7       	brne	.-38     	; 0x323a <LCD_VidCLR+0xae>
    3260:	14 c0       	rjmp	.+40     	; 0x328a <LCD_VidCLR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	6f 81       	ldd	r22, Y+7	; 0x07
    3264:	78 85       	ldd	r23, Y+8	; 0x08
    3266:	89 85       	ldd	r24, Y+9	; 0x09
    3268:	9a 85       	ldd	r25, Y+10	; 0x0a
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9e 83       	std	Y+6, r25	; 0x06
    3274:	8d 83       	std	Y+5, r24	; 0x05
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	9a 83       	std	Y+2, r25	; 0x02
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <LCD_VidCLR+0xf6>
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    328a:	2e 96       	adiw	r28, 0x0e	; 14
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <LCD_VidSendNumber>:



void LCD_VidSendNumber(u32 Copy_u32Number)
{
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	2c 97       	sbiw	r28, 0x0c	; 12
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	69 87       	std	Y+9, r22	; 0x09
    32b2:	7a 87       	std	Y+10, r23	; 0x0a
    32b4:	8b 87       	std	Y+11, r24	; 0x0b
    32b6:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u32Counter=1 , Local_u32Digit=0;
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	a0 e0       	ldi	r26, 0x00	; 0
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	8d 83       	std	Y+5, r24	; 0x05
    32c2:	9e 83       	std	Y+6, r25	; 0x06
    32c4:	af 83       	std	Y+7, r26	; 0x07
    32c6:	b8 87       	std	Y+8, r27	; 0x08
    32c8:	19 82       	std	Y+1, r1	; 0x01
    32ca:	1a 82       	std	Y+2, r1	; 0x02
    32cc:	1b 82       	std	Y+3, r1	; 0x03
    32ce:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_u32Number == 0)
    32d0:	89 85       	ldd	r24, Y+9	; 0x09
    32d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    32d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	a1 05       	cpc	r26, r1
    32dc:	b1 05       	cpc	r27, r1
    32de:	b1 f4       	brne	.+44     	; 0x330c <LCD_VidSendNumber+0x70>
		LCD_VidSendData('0');
    32e0:	80 e3       	ldi	r24, 0x30	; 48
    32e2:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_VidSendData>
    32e6:	7a c0       	rjmp	.+244    	; 0x33dc <LCD_VidSendNumber+0x140>
	else
	{
		while (Copy_u32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    32e8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ea:	9e 81       	ldd	r25, Y+6	; 0x06
    32ec:	af 81       	ldd	r26, Y+7	; 0x07
    32ee:	b8 85       	ldd	r27, Y+8	; 0x08
    32f0:	2a e0       	ldi	r18, 0x0A	; 10
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e0       	ldi	r20, 0x00	; 0
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	bc 01       	movw	r22, r24
    32fa:	cd 01       	movw	r24, r26
    32fc:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <__mulsi3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	8d 83       	std	Y+5, r24	; 0x05
    3306:	9e 83       	std	Y+6, r25	; 0x06
    3308:	af 83       	std	Y+7, r26	; 0x07
    330a:	b8 87       	std	Y+8, r27	; 0x08

	if (Copy_u32Number == 0)
		LCD_VidSendData('0');
	else
	{
		while (Copy_u32Number/Local_u32Counter != 0)
    330c:	89 85       	ldd	r24, Y+9	; 0x09
    330e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3310:	ab 85       	ldd	r26, Y+11	; 0x0b
    3312:	bc 85       	ldd	r27, Y+12	; 0x0c
    3314:	2d 81       	ldd	r18, Y+5	; 0x05
    3316:	3e 81       	ldd	r19, Y+6	; 0x06
    3318:	4f 81       	ldd	r20, Y+7	; 0x07
    331a:	58 85       	ldd	r21, Y+8	; 0x08
    331c:	bc 01       	movw	r22, r24
    331e:	cd 01       	movw	r24, r26
    3320:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodsi4>
    3324:	da 01       	movw	r26, r20
    3326:	c9 01       	movw	r24, r18
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	a1 05       	cpc	r26, r1
    332c:	b1 05       	cpc	r27, r1
    332e:	e1 f6       	brne	.-72     	; 0x32e8 <LCD_VidSendNumber+0x4c>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	9e 81       	ldd	r25, Y+6	; 0x06
    3334:	af 81       	ldd	r26, Y+7	; 0x07
    3336:	b8 85       	ldd	r27, Y+8	; 0x08
    3338:	2a e0       	ldi	r18, 0x0A	; 10
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	50 e0       	ldi	r21, 0x00	; 0
    3340:	bc 01       	movw	r22, r24
    3342:	cd 01       	movw	r24, r26
    3344:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodsi4>
    3348:	da 01       	movw	r26, r20
    334a:	c9 01       	movw	r24, r18
    334c:	8d 83       	std	Y+5, r24	; 0x05
    334e:	9e 83       	std	Y+6, r25	; 0x06
    3350:	af 83       	std	Y+7, r26	; 0x07
    3352:	b8 87       	std	Y+8, r27	; 0x08
    3354:	3a c0       	rjmp	.+116    	; 0x33ca <LCD_VidSendNumber+0x12e>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_u32Number/Local_u32Counter;
    3356:	89 85       	ldd	r24, Y+9	; 0x09
    3358:	9a 85       	ldd	r25, Y+10	; 0x0a
    335a:	ab 85       	ldd	r26, Y+11	; 0x0b
    335c:	bc 85       	ldd	r27, Y+12	; 0x0c
    335e:	2d 81       	ldd	r18, Y+5	; 0x05
    3360:	3e 81       	ldd	r19, Y+6	; 0x06
    3362:	4f 81       	ldd	r20, Y+7	; 0x07
    3364:	58 85       	ldd	r21, Y+8	; 0x08
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodsi4>
    336e:	da 01       	movw	r26, r20
    3370:	c9 01       	movw	r24, r18
    3372:	89 83       	std	Y+1, r24	; 0x01
    3374:	9a 83       	std	Y+2, r25	; 0x02
    3376:	ab 83       	std	Y+3, r26	; 0x03
    3378:	bc 83       	std	Y+4, r27	; 0x04

			LCD_VidSendData(Local_u32Digit + '0');
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	80 5d       	subi	r24, 0xD0	; 208
    337e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_VidSendData>

			Copy_u32Number = Copy_u32Number%Local_u32Counter;
    3382:	89 85       	ldd	r24, Y+9	; 0x09
    3384:	9a 85       	ldd	r25, Y+10	; 0x0a
    3386:	ab 85       	ldd	r26, Y+11	; 0x0b
    3388:	bc 85       	ldd	r27, Y+12	; 0x0c
    338a:	2d 81       	ldd	r18, Y+5	; 0x05
    338c:	3e 81       	ldd	r19, Y+6	; 0x06
    338e:	4f 81       	ldd	r20, Y+7	; 0x07
    3390:	58 85       	ldd	r21, Y+8	; 0x08
    3392:	bc 01       	movw	r22, r24
    3394:	cd 01       	movw	r24, r26
    3396:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodsi4>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	89 87       	std	Y+9, r24	; 0x09
    33a0:	9a 87       	std	Y+10, r25	; 0x0a
    33a2:	ab 87       	std	Y+11, r26	; 0x0b
    33a4:	bc 87       	std	Y+12, r27	; 0x0c

			Local_u32Counter /= 10;
    33a6:	8d 81       	ldd	r24, Y+5	; 0x05
    33a8:	9e 81       	ldd	r25, Y+6	; 0x06
    33aa:	af 81       	ldd	r26, Y+7	; 0x07
    33ac:	b8 85       	ldd	r27, Y+8	; 0x08
    33ae:	2a e0       	ldi	r18, 0x0A	; 10
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e0       	ldi	r20, 0x00	; 0
    33b4:	50 e0       	ldi	r21, 0x00	; 0
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__udivmodsi4>
    33be:	da 01       	movw	r26, r20
    33c0:	c9 01       	movw	r24, r18
    33c2:	8d 83       	std	Y+5, r24	; 0x05
    33c4:	9e 83       	std	Y+6, r25	; 0x06
    33c6:	af 83       	std	Y+7, r26	; 0x07
    33c8:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    33ca:	8d 81       	ldd	r24, Y+5	; 0x05
    33cc:	9e 81       	ldd	r25, Y+6	; 0x06
    33ce:	af 81       	ldd	r26, Y+7	; 0x07
    33d0:	b8 85       	ldd	r27, Y+8	; 0x08
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	a1 05       	cpc	r26, r1
    33d6:	b1 05       	cpc	r27, r1
    33d8:	09 f0       	breq	.+2      	; 0x33dc <LCD_VidSendNumber+0x140>
    33da:	bd cf       	rjmp	.-134    	; 0x3356 <LCD_VidSendNumber+0xba>
			Copy_u32Number = Copy_u32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    33dc:	2c 96       	adiw	r28, 0x0c	; 12
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	de bf       	out	0x3e, r29	; 62
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	cd bf       	out	0x3d, r28	; 61
    33e8:	cf 91       	pop	r28
    33ea:	df 91       	pop	r29
    33ec:	08 95       	ret

000033ee <LCD_VidSendNumberPos>:

void LCD_VidSendNumberPos(u32 Copy_u32Number,u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    33ee:	df 93       	push	r29
    33f0:	cf 93       	push	r28
    33f2:	00 d0       	rcall	.+0      	; 0x33f4 <LCD_VidSendNumberPos+0x6>
    33f4:	00 d0       	rcall	.+0      	; 0x33f6 <LCD_VidSendNumberPos+0x8>
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <LCD_VidSendNumberPos+0xa>
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	69 83       	std	Y+1, r22	; 0x01
    33fe:	7a 83       	std	Y+2, r23	; 0x02
    3400:	8b 83       	std	Y+3, r24	; 0x03
    3402:	9c 83       	std	Y+4, r25	; 0x04
    3404:	4d 83       	std	Y+5, r20	; 0x05
    3406:	2e 83       	std	Y+6, r18	; 0x06
	LCD_VidSetCursorPos(Copy_U8Row,Copy_U8Coulmn);
    3408:	8d 81       	ldd	r24, Y+5	; 0x05
    340a:	6e 81       	ldd	r22, Y+6	; 0x06
    340c:	0e 94 19 1a 	call	0x3432	; 0x3432 <LCD_VidSetCursorPos>
	LCD_VidSendNumber(Copy_u32Number);
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	9a 81       	ldd	r25, Y+2	; 0x02
    3414:	ab 81       	ldd	r26, Y+3	; 0x03
    3416:	bc 81       	ldd	r27, Y+4	; 0x04
    3418:	bc 01       	movw	r22, r24
    341a:	cd 01       	movw	r24, r26
    341c:	0e 94 4e 19 	call	0x329c	; 0x329c <LCD_VidSendNumber>
}
    3420:	26 96       	adiw	r28, 0x06	; 6
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <LCD_VidSetCursorPos>:


void LCD_VidSetCursorPos(u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	00 d0       	rcall	.+0      	; 0x3438 <LCD_VidSetCursorPos+0x6>
    3438:	00 d0       	rcall	.+0      	; 0x343a <LCD_VidSetCursorPos+0x8>
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	6a 83       	std	Y+2, r22	; 0x02
	Copy_U8Coulmn -- ;
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	81 50       	subi	r24, 0x01	; 1
    3446:	8a 83       	std	Y+2, r24	; 0x02
	switch (Copy_U8Row)
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	28 2f       	mov	r18, r24
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	3c 83       	std	Y+4, r19	; 0x04
    3450:	2b 83       	std	Y+3, r18	; 0x03
    3452:	8b 81       	ldd	r24, Y+3	; 0x03
    3454:	9c 81       	ldd	r25, Y+4	; 0x04
    3456:	81 30       	cpi	r24, 0x01	; 1
    3458:	91 05       	cpc	r25, r1
    345a:	31 f0       	breq	.+12     	; 0x3468 <LCD_VidSetCursorPos+0x36>
    345c:	2b 81       	ldd	r18, Y+3	; 0x03
    345e:	3c 81       	ldd	r19, Y+4	; 0x04
    3460:	22 30       	cpi	r18, 0x02	; 2
    3462:	31 05       	cpc	r19, r1
    3464:	31 f0       	breq	.+12     	; 0x3472 <LCD_VidSetCursorPos+0x40>
    3466:	09 c0       	rjmp	.+18     	; 0x347a <LCD_VidSetCursorPos+0x48>
	{
	case ROW1 :LCD_VidSendCMD((0x80 + Copy_U8Coulmn)); break;
    3468:	8a 81       	ldd	r24, Y+2	; 0x02
    346a:	80 58       	subi	r24, 0x80	; 128
    346c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_VidSendCMD>
    3470:	04 c0       	rjmp	.+8      	; 0x347a <LCD_VidSetCursorPos+0x48>
	case ROW2 :LCD_VidSendCMD((0xc0 + Copy_U8Coulmn)); break;
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	80 54       	subi	r24, 0x40	; 64
    3476:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_VidSendCMD>
	default : ;
	}


}
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	cf 91       	pop	r28
    3484:	df 91       	pop	r29
    3486:	08 95       	ret

00003488 <LCD_VidSendCharPos>:

void LCD_VidSendCharPos(u8 Copy_U8Char,u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	00 d0       	rcall	.+0      	; 0x348e <LCD_VidSendCharPos+0x6>
    348e:	0f 92       	push	r0
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	89 83       	std	Y+1, r24	; 0x01
    3496:	6a 83       	std	Y+2, r22	; 0x02
    3498:	4b 83       	std	Y+3, r20	; 0x03
	LCD_VidSetCursorPos(Copy_U8Row,Copy_U8Coulmn);
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	6b 81       	ldd	r22, Y+3	; 0x03
    349e:	0e 94 19 1a 	call	0x3432	; 0x3432 <LCD_VidSetCursorPos>
	LCD_VidSendData(Copy_U8Char);
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_VidSendData>
}
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	cf 91       	pop	r28
    34b0:	df 91       	pop	r29
    34b2:	08 95       	ret

000034b4 <LCD_VidSendStringPos>:


void LCD_VidSendStringPos(u8 *Copy_U8String,u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    34b4:	df 93       	push	r29
    34b6:	cf 93       	push	r28
    34b8:	00 d0       	rcall	.+0      	; 0x34ba <LCD_VidSendStringPos+0x6>
    34ba:	00 d0       	rcall	.+0      	; 0x34bc <LCD_VidSendStringPos+0x8>
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	9a 83       	std	Y+2, r25	; 0x02
    34c2:	89 83       	std	Y+1, r24	; 0x01
    34c4:	6b 83       	std	Y+3, r22	; 0x03
    34c6:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidSetCursorPos(Copy_U8Row,Copy_U8Coulmn);
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	6c 81       	ldd	r22, Y+4	; 0x04
    34cc:	0e 94 19 1a 	call	0x3432	; 0x3432 <LCD_VidSetCursorPos>
	LCD_VidSendString(Copy_U8String);
    34d0:	89 81       	ldd	r24, Y+1	; 0x01
    34d2:	9a 81       	ldd	r25, Y+2	; 0x02
    34d4:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_VidSendString>
}
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	cf 91       	pop	r28
    34e2:	df 91       	pop	r29
    34e4:	08 95       	ret

000034e6 <main>:
#include "motor.h"
#include "EXT_EE_DOOR_TEST.h"


void main()
{
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PORT_A,PIN_3,DIO_OUTPUT);
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	63 e0       	ldi	r22, 0x03	; 3
    34f2:	41 e0       	ldi	r20, 0x01	; 1
    34f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DOOR_Control();
    34f8:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DOOR_Control>
}
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	08 95       	ret

00003502 <Motor>:
#include "motor.h"



void Motor(void)
{
    3502:	0f 93       	push	r16
    3504:	1f 93       	push	r17
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	c9 54       	subi	r28, 0x49	; 73
    3510:	d0 40       	sbci	r29, 0x00	; 0
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	f8 94       	cli
    3516:	de bf       	out	0x3e, r29	; 62
    3518:	0f be       	out	0x3f, r0	; 63
    351a:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(PORT_A,0xf0);
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	60 ef       	ldi	r22, 0xF0	; 240
    3520:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DIO_VidSetPortDirection>
  u8 k =0,j=0,p=0;
    3524:	fe 01       	movw	r30, r28
    3526:	e7 5b       	subi	r30, 0xB7	; 183
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	10 82       	st	Z, r1
    352c:	fe 01       	movw	r30, r28
    352e:	e8 5b       	subi	r30, 0xB8	; 184
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	10 82       	st	Z, r1
    3534:	fe 01       	movw	r30, r28
    3536:	e9 5b       	subi	r30, 0xB9	; 185
    3538:	ff 4f       	sbci	r31, 0xFF	; 255
    353a:	10 82       	st	Z, r1
    353c:	a2 c0       	rjmp	.+324    	; 0x3682 <Motor+0x180>

  for(j;j<1;j++)   // for starting in close mode      // for loop with one iteration cause i adjust motor step with 90 dgree per step
      	{
      	DIO_VidSetPinValue(PORT_A,PIN_4,1);
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	64 e0       	ldi	r22, 0x04	; 4
    3542:	41 e0       	ldi	r20, 0x01	; 1
    3544:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
  		DIO_VidSetPinValue(PORT_A,PIN_5,0);
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	65 e0       	ldi	r22, 0x05	; 5
    354c:	40 e0       	ldi	r20, 0x00	; 0
    354e:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
  		DIO_VidSetPinValue(PORT_A,PIN_6,0);
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	66 e0       	ldi	r22, 0x06	; 6
    3556:	40 e0       	ldi	r20, 0x00	; 0
    3558:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
  		DIO_VidSetPinValue(PORT_A,PIN_7,1);
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	67 e0       	ldi	r22, 0x07	; 7
    3560:	41 e0       	ldi	r20, 0x01	; 1
    3562:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    3566:	fe 01       	movw	r30, r28
    3568:	ed 5b       	subi	r30, 0xBD	; 189
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	a0 ea       	ldi	r26, 0xA0	; 160
    3572:	b1 e4       	ldi	r27, 0x41	; 65
    3574:	80 83       	st	Z, r24
    3576:	91 83       	std	Z+1, r25	; 0x01
    3578:	a2 83       	std	Z+2, r26	; 0x02
    357a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357c:	8e 01       	movw	r16, r28
    357e:	01 5c       	subi	r16, 0xC1	; 193
    3580:	1f 4f       	sbci	r17, 0xFF	; 255
    3582:	fe 01       	movw	r30, r28
    3584:	ed 5b       	subi	r30, 0xBD	; 189
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	60 81       	ld	r22, Z
    358a:	71 81       	ldd	r23, Z+1	; 0x01
    358c:	82 81       	ldd	r24, Z+2	; 0x02
    358e:	93 81       	ldd	r25, Z+3	; 0x03
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	4a ef       	ldi	r20, 0xFA	; 250
    3596:	54 e4       	ldi	r21, 0x44	; 68
    3598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	f8 01       	movw	r30, r16
    35a2:	80 83       	st	Z, r24
    35a4:	91 83       	std	Z+1, r25	; 0x01
    35a6:	a2 83       	std	Z+2, r26	; 0x02
    35a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35aa:	fe 01       	movw	r30, r28
    35ac:	ff 96       	adiw	r30, 0x3f	; 63
    35ae:	60 81       	ld	r22, Z
    35b0:	71 81       	ldd	r23, Z+1	; 0x01
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	93 81       	ldd	r25, Z+3	; 0x03
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	40 e8       	ldi	r20, 0x80	; 128
    35bc:	5f e3       	ldi	r21, 0x3F	; 63
    35be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35c2:	88 23       	and	r24, r24
    35c4:	2c f4       	brge	.+10     	; 0x35d0 <Motor+0xce>
		__ticks = 1;
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	9e af       	std	Y+62, r25	; 0x3e
    35cc:	8d af       	std	Y+61, r24	; 0x3d
    35ce:	46 c0       	rjmp	.+140    	; 0x365c <Motor+0x15a>
	else if (__tmp > 65535)
    35d0:	fe 01       	movw	r30, r28
    35d2:	ff 96       	adiw	r30, 0x3f	; 63
    35d4:	60 81       	ld	r22, Z
    35d6:	71 81       	ldd	r23, Z+1	; 0x01
    35d8:	82 81       	ldd	r24, Z+2	; 0x02
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	3f ef       	ldi	r19, 0xFF	; 255
    35e0:	4f e7       	ldi	r20, 0x7F	; 127
    35e2:	57 e4       	ldi	r21, 0x47	; 71
    35e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35e8:	18 16       	cp	r1, r24
    35ea:	64 f5       	brge	.+88     	; 0x3644 <Motor+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ec:	fe 01       	movw	r30, r28
    35ee:	ed 5b       	subi	r30, 0xBD	; 189
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	60 81       	ld	r22, Z
    35f4:	71 81       	ldd	r23, Z+1	; 0x01
    35f6:	82 81       	ldd	r24, Z+2	; 0x02
    35f8:	93 81       	ldd	r25, Z+3	; 0x03
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e2       	ldi	r20, 0x20	; 32
    3600:	51 e4       	ldi	r21, 0x41	; 65
    3602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	bc 01       	movw	r22, r24
    360c:	cd 01       	movw	r24, r26
    360e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	9e af       	std	Y+62, r25	; 0x3e
    3618:	8d af       	std	Y+61, r24	; 0x3d
    361a:	0f c0       	rjmp	.+30     	; 0x363a <Motor+0x138>
    361c:	88 ec       	ldi	r24, 0xC8	; 200
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9c af       	std	Y+60, r25	; 0x3c
    3622:	8b af       	std	Y+59, r24	; 0x3b
    3624:	8b ad       	ldd	r24, Y+59	; 0x3b
    3626:	9c ad       	ldd	r25, Y+60	; 0x3c
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	f1 f7       	brne	.-4      	; 0x3628 <Motor+0x126>
    362c:	9c af       	std	Y+60, r25	; 0x3c
    362e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3630:	8d ad       	ldd	r24, Y+61	; 0x3d
    3632:	9e ad       	ldd	r25, Y+62	; 0x3e
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	9e af       	std	Y+62, r25	; 0x3e
    3638:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363a:	8d ad       	ldd	r24, Y+61	; 0x3d
    363c:	9e ad       	ldd	r25, Y+62	; 0x3e
    363e:	00 97       	sbiw	r24, 0x00	; 0
    3640:	69 f7       	brne	.-38     	; 0x361c <Motor+0x11a>
    3642:	16 c0       	rjmp	.+44     	; 0x3670 <Motor+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3644:	fe 01       	movw	r30, r28
    3646:	ff 96       	adiw	r30, 0x3f	; 63
    3648:	60 81       	ld	r22, Z
    364a:	71 81       	ldd	r23, Z+1	; 0x01
    364c:	82 81       	ldd	r24, Z+2	; 0x02
    364e:	93 81       	ldd	r25, Z+3	; 0x03
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	9e af       	std	Y+62, r25	; 0x3e
    365a:	8d af       	std	Y+61, r24	; 0x3d
    365c:	8d ad       	ldd	r24, Y+61	; 0x3d
    365e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3660:	9a af       	std	Y+58, r25	; 0x3a
    3662:	89 af       	std	Y+57, r24	; 0x39
    3664:	89 ad       	ldd	r24, Y+57	; 0x39
    3666:	9a ad       	ldd	r25, Y+58	; 0x3a
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <Motor+0x166>
    366c:	9a af       	std	Y+58, r25	; 0x3a
    366e:	89 af       	std	Y+57, r24	; 0x39
void Motor(void)
{
	DIO_VidSetPortDirection(PORT_A,0xf0);
  u8 k =0,j=0,p=0;

  for(j;j<1;j++)   // for starting in close mode      // for loop with one iteration cause i adjust motor step with 90 dgree per step
    3670:	de 01       	movw	r26, r28
    3672:	a8 5b       	subi	r26, 0xB8	; 184
    3674:	bf 4f       	sbci	r27, 0xFF	; 255
    3676:	fe 01       	movw	r30, r28
    3678:	e8 5b       	subi	r30, 0xB8	; 184
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	80 81       	ld	r24, Z
    367e:	8f 5f       	subi	r24, 0xFF	; 255
    3680:	8c 93       	st	X, r24
    3682:	fe 01       	movw	r30, r28
    3684:	e8 5b       	subi	r30, 0xB8	; 184
    3686:	ff 4f       	sbci	r31, 0xFF	; 255
    3688:	80 81       	ld	r24, Z
    368a:	88 23       	and	r24, r24
    368c:	09 f4       	brne	.+2      	; 0x3690 <Motor+0x18e>
    368e:	57 cf       	rjmp	.-338    	; 0x353e <Motor+0x3c>
  		DIO_VidSetPinValue(PORT_A,PIN_6,0);
  		DIO_VidSetPinValue(PORT_A,PIN_7,1);
  		_delay_ms(20);

      	}
  LCD_VidSendStringPos("Door opening ..",2,1);
    3690:	8f ed       	ldi	r24, 0xDF	; 223
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	62 e0       	ldi	r22, 0x02	; 2
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	41 e0       	ldi	r20, 0x01	; 1
    369a:	50 e0       	ldi	r21, 0x00	; 0
    369c:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	a8 ec       	ldi	r26, 0xC8	; 200
    36a6:	b2 e4       	ldi	r27, 0x42	; 66
    36a8:	8d ab       	std	Y+53, r24	; 0x35
    36aa:	9e ab       	std	Y+54, r25	; 0x36
    36ac:	af ab       	std	Y+55, r26	; 0x37
    36ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b0:	6d a9       	ldd	r22, Y+53	; 0x35
    36b2:	7e a9       	ldd	r23, Y+54	; 0x36
    36b4:	8f a9       	ldd	r24, Y+55	; 0x37
    36b6:	98 ad       	ldd	r25, Y+56	; 0x38
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	4a ef       	ldi	r20, 0xFA	; 250
    36be:	54 e4       	ldi	r21, 0x44	; 68
    36c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	89 ab       	std	Y+49, r24	; 0x31
    36ca:	9a ab       	std	Y+50, r25	; 0x32
    36cc:	ab ab       	std	Y+51, r26	; 0x33
    36ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36d0:	69 a9       	ldd	r22, Y+49	; 0x31
    36d2:	7a a9       	ldd	r23, Y+50	; 0x32
    36d4:	8b a9       	ldd	r24, Y+51	; 0x33
    36d6:	9c a9       	ldd	r25, Y+52	; 0x34
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e8       	ldi	r20, 0x80	; 128
    36de:	5f e3       	ldi	r21, 0x3F	; 63
    36e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36e4:	88 23       	and	r24, r24
    36e6:	2c f4       	brge	.+10     	; 0x36f2 <Motor+0x1f0>
		__ticks = 1;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	98 ab       	std	Y+48, r25	; 0x30
    36ee:	8f a7       	std	Y+47, r24	; 0x2f
    36f0:	3f c0       	rjmp	.+126    	; 0x3770 <Motor+0x26e>
	else if (__tmp > 65535)
    36f2:	69 a9       	ldd	r22, Y+49	; 0x31
    36f4:	7a a9       	ldd	r23, Y+50	; 0x32
    36f6:	8b a9       	ldd	r24, Y+51	; 0x33
    36f8:	9c a9       	ldd	r25, Y+52	; 0x34
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	3f ef       	ldi	r19, 0xFF	; 255
    36fe:	4f e7       	ldi	r20, 0x7F	; 127
    3700:	57 e4       	ldi	r21, 0x47	; 71
    3702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3706:	18 16       	cp	r1, r24
    3708:	4c f5       	brge	.+82     	; 0x375c <Motor+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370a:	6d a9       	ldd	r22, Y+53	; 0x35
    370c:	7e a9       	ldd	r23, Y+54	; 0x36
    370e:	8f a9       	ldd	r24, Y+55	; 0x37
    3710:	98 ad       	ldd	r25, Y+56	; 0x38
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e2       	ldi	r20, 0x20	; 32
    3718:	51 e4       	ldi	r21, 0x41	; 65
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	bc 01       	movw	r22, r24
    3724:	cd 01       	movw	r24, r26
    3726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	98 ab       	std	Y+48, r25	; 0x30
    3730:	8f a7       	std	Y+47, r24	; 0x2f
    3732:	0f c0       	rjmp	.+30     	; 0x3752 <Motor+0x250>
    3734:	88 ec       	ldi	r24, 0xC8	; 200
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	9e a7       	std	Y+46, r25	; 0x2e
    373a:	8d a7       	std	Y+45, r24	; 0x2d
    373c:	8d a5       	ldd	r24, Y+45	; 0x2d
    373e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	f1 f7       	brne	.-4      	; 0x3740 <Motor+0x23e>
    3744:	9e a7       	std	Y+46, r25	; 0x2e
    3746:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3748:	8f a5       	ldd	r24, Y+47	; 0x2f
    374a:	98 a9       	ldd	r25, Y+48	; 0x30
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	98 ab       	std	Y+48, r25	; 0x30
    3750:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3752:	8f a5       	ldd	r24, Y+47	; 0x2f
    3754:	98 a9       	ldd	r25, Y+48	; 0x30
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	69 f7       	brne	.-38     	; 0x3734 <Motor+0x232>
    375a:	a4 c0       	rjmp	.+328    	; 0x38a4 <Motor+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375c:	69 a9       	ldd	r22, Y+49	; 0x31
    375e:	7a a9       	ldd	r23, Y+50	; 0x32
    3760:	8b a9       	ldd	r24, Y+51	; 0x33
    3762:	9c a9       	ldd	r25, Y+52	; 0x34
    3764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	98 ab       	std	Y+48, r25	; 0x30
    376e:	8f a7       	std	Y+47, r24	; 0x2f
    3770:	8f a5       	ldd	r24, Y+47	; 0x2f
    3772:	98 a9       	ldd	r25, Y+48	; 0x30
    3774:	9c a7       	std	Y+44, r25	; 0x2c
    3776:	8b a7       	std	Y+43, r24	; 0x2b
    3778:	8b a5       	ldd	r24, Y+43	; 0x2b
    377a:	9c a5       	ldd	r25, Y+44	; 0x2c
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	f1 f7       	brne	.-4      	; 0x377c <Motor+0x27a>
    3780:	9c a7       	std	Y+44, r25	; 0x2c
    3782:	8b a7       	std	Y+43, r24	; 0x2b
    3784:	8f c0       	rjmp	.+286    	; 0x38a4 <Motor+0x3a2>
  _delay_ms(100);

	for(k;k<1;k++)    // open mode
	{
		DIO_VidSetPinValue(PORT_A,PIN_4,1);
    3786:	80 e0       	ldi	r24, 0x00	; 0
    3788:	64 e0       	ldi	r22, 0x04	; 4
    378a:	41 e0       	ldi	r20, 0x01	; 1
    378c:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_A,PIN_5,1);
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	65 e0       	ldi	r22, 0x05	; 5
    3794:	41 e0       	ldi	r20, 0x01	; 1
    3796:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_A,PIN_6,0);
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	66 e0       	ldi	r22, 0x06	; 6
    379e:	40 e0       	ldi	r20, 0x00	; 0
    37a0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_A,PIN_7,0);
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	67 e0       	ldi	r22, 0x07	; 7
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	a0 ea       	ldi	r26, 0xA0	; 160
    37b4:	b1 e4       	ldi	r27, 0x41	; 65
    37b6:	8f a3       	std	Y+39, r24	; 0x27
    37b8:	98 a7       	std	Y+40, r25	; 0x28
    37ba:	a9 a7       	std	Y+41, r26	; 0x29
    37bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37be:	6f a1       	ldd	r22, Y+39	; 0x27
    37c0:	78 a5       	ldd	r23, Y+40	; 0x28
    37c2:	89 a5       	ldd	r24, Y+41	; 0x29
    37c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	4a ef       	ldi	r20, 0xFA	; 250
    37cc:	54 e4       	ldi	r21, 0x44	; 68
    37ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	8b a3       	std	Y+35, r24	; 0x23
    37d8:	9c a3       	std	Y+36, r25	; 0x24
    37da:	ad a3       	std	Y+37, r26	; 0x25
    37dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37de:	6b a1       	ldd	r22, Y+35	; 0x23
    37e0:	7c a1       	ldd	r23, Y+36	; 0x24
    37e2:	8d a1       	ldd	r24, Y+37	; 0x25
    37e4:	9e a1       	ldd	r25, Y+38	; 0x26
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	40 e8       	ldi	r20, 0x80	; 128
    37ec:	5f e3       	ldi	r21, 0x3F	; 63
    37ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37f2:	88 23       	and	r24, r24
    37f4:	2c f4       	brge	.+10     	; 0x3800 <Motor+0x2fe>
		__ticks = 1;
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	9a a3       	std	Y+34, r25	; 0x22
    37fc:	89 a3       	std	Y+33, r24	; 0x21
    37fe:	3f c0       	rjmp	.+126    	; 0x387e <Motor+0x37c>
	else if (__tmp > 65535)
    3800:	6b a1       	ldd	r22, Y+35	; 0x23
    3802:	7c a1       	ldd	r23, Y+36	; 0x24
    3804:	8d a1       	ldd	r24, Y+37	; 0x25
    3806:	9e a1       	ldd	r25, Y+38	; 0x26
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	3f ef       	ldi	r19, 0xFF	; 255
    380c:	4f e7       	ldi	r20, 0x7F	; 127
    380e:	57 e4       	ldi	r21, 0x47	; 71
    3810:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3814:	18 16       	cp	r1, r24
    3816:	4c f5       	brge	.+82     	; 0x386a <Motor+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3818:	6f a1       	ldd	r22, Y+39	; 0x27
    381a:	78 a5       	ldd	r23, Y+40	; 0x28
    381c:	89 a5       	ldd	r24, Y+41	; 0x29
    381e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	40 e2       	ldi	r20, 0x20	; 32
    3826:	51 e4       	ldi	r21, 0x41	; 65
    3828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	bc 01       	movw	r22, r24
    3832:	cd 01       	movw	r24, r26
    3834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	9a a3       	std	Y+34, r25	; 0x22
    383e:	89 a3       	std	Y+33, r24	; 0x21
    3840:	0f c0       	rjmp	.+30     	; 0x3860 <Motor+0x35e>
    3842:	88 ec       	ldi	r24, 0xC8	; 200
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	98 a3       	std	Y+32, r25	; 0x20
    3848:	8f 8f       	std	Y+31, r24	; 0x1f
    384a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    384c:	98 a1       	ldd	r25, Y+32	; 0x20
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	f1 f7       	brne	.-4      	; 0x384e <Motor+0x34c>
    3852:	98 a3       	std	Y+32, r25	; 0x20
    3854:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3856:	89 a1       	ldd	r24, Y+33	; 0x21
    3858:	9a a1       	ldd	r25, Y+34	; 0x22
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	9a a3       	std	Y+34, r25	; 0x22
    385e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3860:	89 a1       	ldd	r24, Y+33	; 0x21
    3862:	9a a1       	ldd	r25, Y+34	; 0x22
    3864:	00 97       	sbiw	r24, 0x00	; 0
    3866:	69 f7       	brne	.-38     	; 0x3842 <Motor+0x340>
    3868:	14 c0       	rjmp	.+40     	; 0x3892 <Motor+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386a:	6b a1       	ldd	r22, Y+35	; 0x23
    386c:	7c a1       	ldd	r23, Y+36	; 0x24
    386e:	8d a1       	ldd	r24, Y+37	; 0x25
    3870:	9e a1       	ldd	r25, Y+38	; 0x26
    3872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	9a a3       	std	Y+34, r25	; 0x22
    387c:	89 a3       	std	Y+33, r24	; 0x21
    387e:	89 a1       	ldd	r24, Y+33	; 0x21
    3880:	9a a1       	ldd	r25, Y+34	; 0x22
    3882:	9e 8f       	std	Y+30, r25	; 0x1e
    3884:	8d 8f       	std	Y+29, r24	; 0x1d
    3886:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3888:	9e 8d       	ldd	r25, Y+30	; 0x1e
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	f1 f7       	brne	.-4      	; 0x388a <Motor+0x388>
    388e:	9e 8f       	std	Y+30, r25	; 0x1e
    3890:	8d 8f       	std	Y+29, r24	; 0x1d

      	}
  LCD_VidSendStringPos("Door opening ..",2,1);
  _delay_ms(100);

	for(k;k<1;k++)    // open mode
    3892:	de 01       	movw	r26, r28
    3894:	a7 5b       	subi	r26, 0xB7	; 183
    3896:	bf 4f       	sbci	r27, 0xFF	; 255
    3898:	fe 01       	movw	r30, r28
    389a:	e7 5b       	subi	r30, 0xB7	; 183
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	80 81       	ld	r24, Z
    38a0:	8f 5f       	subi	r24, 0xFF	; 255
    38a2:	8c 93       	st	X, r24
    38a4:	fe 01       	movw	r30, r28
    38a6:	e7 5b       	subi	r30, 0xB7	; 183
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	80 81       	ld	r24, Z
    38ac:	88 23       	and	r24, r24
    38ae:	09 f4       	brne	.+2      	; 0x38b2 <Motor+0x3b0>
    38b0:	6a cf       	rjmp	.-300    	; 0x3786 <Motor+0x284>
		DIO_VidSetPinValue(PORT_A,PIN_6,0);
		DIO_VidSetPinValue(PORT_A,PIN_7,0);
		_delay_ms(20);

	}
	LCD_VidSendStringPos("CLOSE SOON ..",2,1);
    38b2:	8f ee       	ldi	r24, 0xEF	; 239
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	62 e0       	ldi	r22, 0x02	; 2
    38b8:	70 e0       	ldi	r23, 0x00	; 0
    38ba:	41 e0       	ldi	r20, 0x01	; 1
    38bc:	50 e0       	ldi	r21, 0x00	; 0
    38be:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	aa ef       	ldi	r26, 0xFA	; 250
    38c8:	b3 e4       	ldi	r27, 0x43	; 67
    38ca:	89 8f       	std	Y+25, r24	; 0x19
    38cc:	9a 8f       	std	Y+26, r25	; 0x1a
    38ce:	ab 8f       	std	Y+27, r26	; 0x1b
    38d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d2:	69 8d       	ldd	r22, Y+25	; 0x19
    38d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	4a ef       	ldi	r20, 0xFA	; 250
    38e0:	54 e4       	ldi	r21, 0x44	; 68
    38e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	8d 8b       	std	Y+21, r24	; 0x15
    38ec:	9e 8b       	std	Y+22, r25	; 0x16
    38ee:	af 8b       	std	Y+23, r26	; 0x17
    38f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38f2:	6d 89       	ldd	r22, Y+21	; 0x15
    38f4:	7e 89       	ldd	r23, Y+22	; 0x16
    38f6:	8f 89       	ldd	r24, Y+23	; 0x17
    38f8:	98 8d       	ldd	r25, Y+24	; 0x18
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e8       	ldi	r20, 0x80	; 128
    3900:	5f e3       	ldi	r21, 0x3F	; 63
    3902:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3906:	88 23       	and	r24, r24
    3908:	2c f4       	brge	.+10     	; 0x3914 <Motor+0x412>
		__ticks = 1;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	9c 8b       	std	Y+20, r25	; 0x14
    3910:	8b 8b       	std	Y+19, r24	; 0x13
    3912:	3f c0       	rjmp	.+126    	; 0x3992 <Motor+0x490>
	else if (__tmp > 65535)
    3914:	6d 89       	ldd	r22, Y+21	; 0x15
    3916:	7e 89       	ldd	r23, Y+22	; 0x16
    3918:	8f 89       	ldd	r24, Y+23	; 0x17
    391a:	98 8d       	ldd	r25, Y+24	; 0x18
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	3f ef       	ldi	r19, 0xFF	; 255
    3920:	4f e7       	ldi	r20, 0x7F	; 127
    3922:	57 e4       	ldi	r21, 0x47	; 71
    3924:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3928:	18 16       	cp	r1, r24
    392a:	4c f5       	brge	.+82     	; 0x397e <Motor+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    392c:	69 8d       	ldd	r22, Y+25	; 0x19
    392e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3930:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3932:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	40 e2       	ldi	r20, 0x20	; 32
    393a:	51 e4       	ldi	r21, 0x41	; 65
    393c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	bc 01       	movw	r22, r24
    3946:	cd 01       	movw	r24, r26
    3948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	9c 8b       	std	Y+20, r25	; 0x14
    3952:	8b 8b       	std	Y+19, r24	; 0x13
    3954:	0f c0       	rjmp	.+30     	; 0x3974 <Motor+0x472>
    3956:	88 ec       	ldi	r24, 0xC8	; 200
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	9a 8b       	std	Y+18, r25	; 0x12
    395c:	89 8b       	std	Y+17, r24	; 0x11
    395e:	89 89       	ldd	r24, Y+17	; 0x11
    3960:	9a 89       	ldd	r25, Y+18	; 0x12
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	f1 f7       	brne	.-4      	; 0x3962 <Motor+0x460>
    3966:	9a 8b       	std	Y+18, r25	; 0x12
    3968:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396a:	8b 89       	ldd	r24, Y+19	; 0x13
    396c:	9c 89       	ldd	r25, Y+20	; 0x14
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	9c 8b       	std	Y+20, r25	; 0x14
    3972:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3974:	8b 89       	ldd	r24, Y+19	; 0x13
    3976:	9c 89       	ldd	r25, Y+20	; 0x14
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	69 f7       	brne	.-38     	; 0x3956 <Motor+0x454>
    397c:	a4 c0       	rjmp	.+328    	; 0x3ac6 <Motor+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397e:	6d 89       	ldd	r22, Y+21	; 0x15
    3980:	7e 89       	ldd	r23, Y+22	; 0x16
    3982:	8f 89       	ldd	r24, Y+23	; 0x17
    3984:	98 8d       	ldd	r25, Y+24	; 0x18
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	9c 8b       	std	Y+20, r25	; 0x14
    3990:	8b 8b       	std	Y+19, r24	; 0x13
    3992:	8b 89       	ldd	r24, Y+19	; 0x13
    3994:	9c 89       	ldd	r25, Y+20	; 0x14
    3996:	98 8b       	std	Y+16, r25	; 0x10
    3998:	8f 87       	std	Y+15, r24	; 0x0f
    399a:	8f 85       	ldd	r24, Y+15	; 0x0f
    399c:	98 89       	ldd	r25, Y+16	; 0x10
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	f1 f7       	brne	.-4      	; 0x399e <Motor+0x49c>
    39a2:	98 8b       	std	Y+16, r25	; 0x10
    39a4:	8f 87       	std	Y+15, r24	; 0x0f
    39a6:	8f c0       	rjmp	.+286    	; 0x3ac6 <Motor+0x5c4>

	_delay_ms(500);

    for(p;p<1;p++)     //close mode after half second
    	{
    	DIO_VidSetPinValue(PORT_A,PIN_4,1);
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	64 e0       	ldi	r22, 0x04	; 4
    39ac:	41 e0       	ldi	r20, 0x01	; 1
    39ae:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_A,PIN_5,0);
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	65 e0       	ldi	r22, 0x05	; 5
    39b6:	40 e0       	ldi	r20, 0x00	; 0
    39b8:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_A,PIN_6,0);
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	66 e0       	ldi	r22, 0x06	; 6
    39c0:	40 e0       	ldi	r20, 0x00	; 0
    39c2:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_A,PIN_7,1);
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	67 e0       	ldi	r22, 0x07	; 7
    39ca:	41 e0       	ldi	r20, 0x01	; 1
    39cc:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPinValue>
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	a0 ea       	ldi	r26, 0xA0	; 160
    39d6:	b1 e4       	ldi	r27, 0x41	; 65
    39d8:	8b 87       	std	Y+11, r24	; 0x0b
    39da:	9c 87       	std	Y+12, r25	; 0x0c
    39dc:	ad 87       	std	Y+13, r26	; 0x0d
    39de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    39e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    39e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	4a ef       	ldi	r20, 0xFA	; 250
    39ee:	54 e4       	ldi	r21, 0x44	; 68
    39f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	8f 83       	std	Y+7, r24	; 0x07
    39fa:	98 87       	std	Y+8, r25	; 0x08
    39fc:	a9 87       	std	Y+9, r26	; 0x09
    39fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a00:	6f 81       	ldd	r22, Y+7	; 0x07
    3a02:	78 85       	ldd	r23, Y+8	; 0x08
    3a04:	89 85       	ldd	r24, Y+9	; 0x09
    3a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e8       	ldi	r20, 0x80	; 128
    3a0e:	5f e3       	ldi	r21, 0x3F	; 63
    3a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a14:	88 23       	and	r24, r24
    3a16:	2c f4       	brge	.+10     	; 0x3a22 <Motor+0x520>
		__ticks = 1;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	9e 83       	std	Y+6, r25	; 0x06
    3a1e:	8d 83       	std	Y+5, r24	; 0x05
    3a20:	3f c0       	rjmp	.+126    	; 0x3aa0 <Motor+0x59e>
	else if (__tmp > 65535)
    3a22:	6f 81       	ldd	r22, Y+7	; 0x07
    3a24:	78 85       	ldd	r23, Y+8	; 0x08
    3a26:	89 85       	ldd	r24, Y+9	; 0x09
    3a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	3f ef       	ldi	r19, 0xFF	; 255
    3a2e:	4f e7       	ldi	r20, 0x7F	; 127
    3a30:	57 e4       	ldi	r21, 0x47	; 71
    3a32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a36:	18 16       	cp	r1, r24
    3a38:	4c f5       	brge	.+82     	; 0x3a8c <Motor+0x58a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e2       	ldi	r20, 0x20	; 32
    3a48:	51 e4       	ldi	r21, 0x41	; 65
    3a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	9e 83       	std	Y+6, r25	; 0x06
    3a60:	8d 83       	std	Y+5, r24	; 0x05
    3a62:	0f c0       	rjmp	.+30     	; 0x3a82 <Motor+0x580>
    3a64:	88 ec       	ldi	r24, 0xC8	; 200
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	9c 83       	std	Y+4, r25	; 0x04
    3a6a:	8b 83       	std	Y+3, r24	; 0x03
    3a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	f1 f7       	brne	.-4      	; 0x3a70 <Motor+0x56e>
    3a74:	9c 83       	std	Y+4, r25	; 0x04
    3a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a78:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	9e 83       	std	Y+6, r25	; 0x06
    3a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	9e 81       	ldd	r25, Y+6	; 0x06
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	69 f7       	brne	.-38     	; 0x3a64 <Motor+0x562>
    3a8a:	14 c0       	rjmp	.+40     	; 0x3ab4 <Motor+0x5b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a8e:	78 85       	ldd	r23, Y+8	; 0x08
    3a90:	89 85       	ldd	r24, Y+9	; 0x09
    3a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	9e 83       	std	Y+6, r25	; 0x06
    3a9e:	8d 83       	std	Y+5, r24	; 0x05
    3aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	f1 f7       	brne	.-4      	; 0x3aac <Motor+0x5aa>
    3ab0:	9a 83       	std	Y+2, r25	; 0x02
    3ab2:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_VidSendStringPos("CLOSE SOON ..",2,1);

	_delay_ms(500);

    for(p;p<1;p++)     //close mode after half second
    3ab4:	de 01       	movw	r26, r28
    3ab6:	a9 5b       	subi	r26, 0xB9	; 185
    3ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aba:	fe 01       	movw	r30, r28
    3abc:	e9 5b       	subi	r30, 0xB9	; 185
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	80 81       	ld	r24, Z
    3ac2:	8f 5f       	subi	r24, 0xFF	; 255
    3ac4:	8c 93       	st	X, r24
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	e9 5b       	subi	r30, 0xB9	; 185
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	80 81       	ld	r24, Z
    3ace:	88 23       	and	r24, r24
    3ad0:	09 f4       	brne	.+2      	; 0x3ad4 <Motor+0x5d2>
    3ad2:	6a cf       	rjmp	.-300    	; 0x39a8 <Motor+0x4a6>
		DIO_VidSetPinValue(PORT_A,PIN_6,0);
		DIO_VidSetPinValue(PORT_A,PIN_7,1);
		_delay_ms(20);

    	}
    LCD_VidSendStringPos("Door Closed ..",2,1);
    3ad4:	8d ef       	ldi	r24, 0xFD	; 253
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	62 e0       	ldi	r22, 0x02	; 2
    3ada:	70 e0       	ldi	r23, 0x00	; 0
    3adc:	41 e0       	ldi	r20, 0x01	; 1
    3ade:	50 e0       	ldi	r21, 0x00	; 0
    3ae0:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <LCD_VidSendStringPos>



}
    3ae4:	c7 5b       	subi	r28, 0xB7	; 183
    3ae6:	df 4f       	sbci	r29, 0xFF	; 255
    3ae8:	0f b6       	in	r0, 0x3f	; 63
    3aea:	f8 94       	cli
    3aec:	de bf       	out	0x3e, r29	; 62
    3aee:	0f be       	out	0x3f, r0	; 63
    3af0:	cd bf       	out	0x3d, r28	; 61
    3af2:	cf 91       	pop	r28
    3af4:	df 91       	pop	r29
    3af6:	1f 91       	pop	r17
    3af8:	0f 91       	pop	r16
    3afa:	08 95       	ret

00003afc <__mulsi3>:
    3afc:	62 9f       	mul	r22, r18
    3afe:	d0 01       	movw	r26, r0
    3b00:	73 9f       	mul	r23, r19
    3b02:	f0 01       	movw	r30, r0
    3b04:	82 9f       	mul	r24, r18
    3b06:	e0 0d       	add	r30, r0
    3b08:	f1 1d       	adc	r31, r1
    3b0a:	64 9f       	mul	r22, r20
    3b0c:	e0 0d       	add	r30, r0
    3b0e:	f1 1d       	adc	r31, r1
    3b10:	92 9f       	mul	r25, r18
    3b12:	f0 0d       	add	r31, r0
    3b14:	83 9f       	mul	r24, r19
    3b16:	f0 0d       	add	r31, r0
    3b18:	74 9f       	mul	r23, r20
    3b1a:	f0 0d       	add	r31, r0
    3b1c:	65 9f       	mul	r22, r21
    3b1e:	f0 0d       	add	r31, r0
    3b20:	99 27       	eor	r25, r25
    3b22:	72 9f       	mul	r23, r18
    3b24:	b0 0d       	add	r27, r0
    3b26:	e1 1d       	adc	r30, r1
    3b28:	f9 1f       	adc	r31, r25
    3b2a:	63 9f       	mul	r22, r19
    3b2c:	b0 0d       	add	r27, r0
    3b2e:	e1 1d       	adc	r30, r1
    3b30:	f9 1f       	adc	r31, r25
    3b32:	bd 01       	movw	r22, r26
    3b34:	cf 01       	movw	r24, r30
    3b36:	11 24       	eor	r1, r1
    3b38:	08 95       	ret

00003b3a <__udivmodsi4>:
    3b3a:	a1 e2       	ldi	r26, 0x21	; 33
    3b3c:	1a 2e       	mov	r1, r26
    3b3e:	aa 1b       	sub	r26, r26
    3b40:	bb 1b       	sub	r27, r27
    3b42:	fd 01       	movw	r30, r26
    3b44:	0d c0       	rjmp	.+26     	; 0x3b60 <__udivmodsi4_ep>

00003b46 <__udivmodsi4_loop>:
    3b46:	aa 1f       	adc	r26, r26
    3b48:	bb 1f       	adc	r27, r27
    3b4a:	ee 1f       	adc	r30, r30
    3b4c:	ff 1f       	adc	r31, r31
    3b4e:	a2 17       	cp	r26, r18
    3b50:	b3 07       	cpc	r27, r19
    3b52:	e4 07       	cpc	r30, r20
    3b54:	f5 07       	cpc	r31, r21
    3b56:	20 f0       	brcs	.+8      	; 0x3b60 <__udivmodsi4_ep>
    3b58:	a2 1b       	sub	r26, r18
    3b5a:	b3 0b       	sbc	r27, r19
    3b5c:	e4 0b       	sbc	r30, r20
    3b5e:	f5 0b       	sbc	r31, r21

00003b60 <__udivmodsi4_ep>:
    3b60:	66 1f       	adc	r22, r22
    3b62:	77 1f       	adc	r23, r23
    3b64:	88 1f       	adc	r24, r24
    3b66:	99 1f       	adc	r25, r25
    3b68:	1a 94       	dec	r1
    3b6a:	69 f7       	brne	.-38     	; 0x3b46 <__udivmodsi4_loop>
    3b6c:	60 95       	com	r22
    3b6e:	70 95       	com	r23
    3b70:	80 95       	com	r24
    3b72:	90 95       	com	r25
    3b74:	9b 01       	movw	r18, r22
    3b76:	ac 01       	movw	r20, r24
    3b78:	bd 01       	movw	r22, r26
    3b7a:	cf 01       	movw	r24, r30
    3b7c:	08 95       	ret

00003b7e <__prologue_saves__>:
    3b7e:	2f 92       	push	r2
    3b80:	3f 92       	push	r3
    3b82:	4f 92       	push	r4
    3b84:	5f 92       	push	r5
    3b86:	6f 92       	push	r6
    3b88:	7f 92       	push	r7
    3b8a:	8f 92       	push	r8
    3b8c:	9f 92       	push	r9
    3b8e:	af 92       	push	r10
    3b90:	bf 92       	push	r11
    3b92:	cf 92       	push	r12
    3b94:	df 92       	push	r13
    3b96:	ef 92       	push	r14
    3b98:	ff 92       	push	r15
    3b9a:	0f 93       	push	r16
    3b9c:	1f 93       	push	r17
    3b9e:	cf 93       	push	r28
    3ba0:	df 93       	push	r29
    3ba2:	cd b7       	in	r28, 0x3d	; 61
    3ba4:	de b7       	in	r29, 0x3e	; 62
    3ba6:	ca 1b       	sub	r28, r26
    3ba8:	db 0b       	sbc	r29, r27
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	09 94       	ijmp

00003bb6 <__epilogue_restores__>:
    3bb6:	2a 88       	ldd	r2, Y+18	; 0x12
    3bb8:	39 88       	ldd	r3, Y+17	; 0x11
    3bba:	48 88       	ldd	r4, Y+16	; 0x10
    3bbc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bbe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bc0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bc2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bc4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bc6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bc8:	b9 84       	ldd	r11, Y+9	; 0x09
    3bca:	c8 84       	ldd	r12, Y+8	; 0x08
    3bcc:	df 80       	ldd	r13, Y+7	; 0x07
    3bce:	ee 80       	ldd	r14, Y+6	; 0x06
    3bd0:	fd 80       	ldd	r15, Y+5	; 0x05
    3bd2:	0c 81       	ldd	r16, Y+4	; 0x04
    3bd4:	1b 81       	ldd	r17, Y+3	; 0x03
    3bd6:	aa 81       	ldd	r26, Y+2	; 0x02
    3bd8:	b9 81       	ldd	r27, Y+1	; 0x01
    3bda:	ce 0f       	add	r28, r30
    3bdc:	d1 1d       	adc	r29, r1
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	f8 94       	cli
    3be2:	de bf       	out	0x3e, r29	; 62
    3be4:	0f be       	out	0x3f, r0	; 63
    3be6:	cd bf       	out	0x3d, r28	; 61
    3be8:	ed 01       	movw	r28, r26
    3bea:	08 95       	ret

00003bec <_exit>:
    3bec:	f8 94       	cli

00003bee <__stop_program>:
    3bee:	ff cf       	rjmp	.-2      	; 0x3bee <__stop_program>
