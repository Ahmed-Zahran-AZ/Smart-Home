
SMART_HOME_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002480  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00002480  00002514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080008e  0080008e  00002542  2**0
                  ALLOC
  3 .stab         00001f08  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d18  00000000  00000000  0000444c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000052a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005414  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000705d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000090e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000098b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 90 11 	call	0x2320	; 0x2320 <main>
      8a:	0c 94 3e 12 	jmp	0x247c	; 0x247c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 12 	jmp	0x240e	; 0x240e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 12 	jmp	0x240e	; 0x240e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 17 12 	jmp	0x242e	; 0x242e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Ac_Control>:
//u16 Local_AnalogValue_LDR ;



void Ac_Control(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
;
	LCD_VidCLR();
     b5a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_VidCLR>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e4       	ldi	r26, 0x40	; 64
     b64:	b0 e4       	ldi	r27, 0x40	; 64
     b66:	8b 87       	std	Y+11, r24	; 0x0b
     b68:	9c 87       	std	Y+12, r25	; 0x0c
     b6a:	ad 87       	std	Y+13, r26	; 0x0d
     b6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b70:	7c 85       	ldd	r23, Y+12	; 0x0c
     b72:	8d 85       	ldd	r24, Y+13	; 0x0d
     b74:	9e 85       	ldd	r25, Y+14	; 0x0e
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	4a ef       	ldi	r20, 0xFA	; 250
     b7c:	54 e4       	ldi	r21, 0x44	; 68
     b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	8f 83       	std	Y+7, r24	; 0x07
     b88:	98 87       	std	Y+8, r25	; 0x08
     b8a:	a9 87       	std	Y+9, r26	; 0x09
     b8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 e8       	ldi	r20, 0x80	; 128
     b9c:	5f e3       	ldi	r21, 0x3F	; 63
     b9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ba2:	88 23       	and	r24, r24
     ba4:	2c f4       	brge	.+10     	; 0xbb0 <Ac_Control+0x6a>
		__ticks = 1;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9e 83       	std	Y+6, r25	; 0x06
     bac:	8d 83       	std	Y+5, r24	; 0x05
     bae:	3f c0       	rjmp	.+126    	; 0xc2e <Ac_Control+0xe8>
	else if (__tmp > 65535)
     bb0:	6f 81       	ldd	r22, Y+7	; 0x07
     bb2:	78 85       	ldd	r23, Y+8	; 0x08
     bb4:	89 85       	ldd	r24, Y+9	; 0x09
     bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	3f ef       	ldi	r19, 0xFF	; 255
     bbc:	4f e7       	ldi	r20, 0x7F	; 127
     bbe:	57 e4       	ldi	r21, 0x47	; 71
     bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bc4:	18 16       	cp	r1, r24
     bc6:	4c f5       	brge	.+82     	; 0xc1a <Ac_Control+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bca:	7c 85       	ldd	r23, Y+12	; 0x0c
     bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bce:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e2       	ldi	r20, 0x20	; 32
     bd6:	51 e4       	ldi	r21, 0x41	; 65
     bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	9e 83       	std	Y+6, r25	; 0x06
     bee:	8d 83       	std	Y+5, r24	; 0x05
     bf0:	0f c0       	rjmp	.+30     	; 0xc10 <Ac_Control+0xca>
     bf2:	88 ec       	ldi	r24, 0xC8	; 200
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	9c 83       	std	Y+4, r25	; 0x04
     bf8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <Ac_Control+0xb8>
     c02:	9c 83       	std	Y+4, r25	; 0x04
     c04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c10:	8d 81       	ldd	r24, Y+5	; 0x05
     c12:	9e 81       	ldd	r25, Y+6	; 0x06
     c14:	00 97       	sbiw	r24, 0x00	; 0
     c16:	69 f7       	brne	.-38     	; 0xbf2 <Ac_Control+0xac>
     c18:	14 c0       	rjmp	.+40     	; 0xc42 <Ac_Control+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c1a:	6f 81       	ldd	r22, Y+7	; 0x07
     c1c:	78 85       	ldd	r23, Y+8	; 0x08
     c1e:	89 85       	ldd	r24, Y+9	; 0x09
     c20:	9a 85       	ldd	r25, Y+10	; 0x0a
     c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	9e 83       	std	Y+6, r25	; 0x06
     c2c:	8d 83       	std	Y+5, r24	; 0x05
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <Ac_Control+0xf4>
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);

	Local_DigitaValue=ADC_U16GetDigitalValue(CHANNEL_0);
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	0e 94 7d 07 	call	0xefa	; 0xefa <ADC_U16GetDigitalValue>
     c48:	90 93 93 00 	sts	0x0093, r25
     c4c:	80 93 92 00 	sts	0x0092, r24
	/* 2560 is a refrence voltage in mili volt cause reslution of sensor in mv */
	/* UL is  unsigned long */
	Local_AnalogValue=(u16)((Local_DigitaValue*2560UL)/1024); /*calculate resolution*/
     c50:	80 91 92 00 	lds	r24, 0x0092
     c54:	90 91 93 00 	lds	r25, 0x0093
     c58:	cc 01       	movw	r24, r24
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	3a e0       	ldi	r19, 0x0A	; 10
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 b2 11 	call	0x2364	; 0x2364 <__mulsi3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	07 2e       	mov	r0, r23
     c74:	7a e0       	ldi	r23, 0x0A	; 10
     c76:	b6 95       	lsr	r27
     c78:	a7 95       	ror	r26
     c7a:	97 95       	ror	r25
     c7c:	87 95       	ror	r24
     c7e:	7a 95       	dec	r23
     c80:	d1 f7       	brne	.-12     	; 0xc76 <Ac_Control+0x130>
     c82:	70 2d       	mov	r23, r0
     c84:	90 93 95 00 	sts	0x0095, r25
     c88:	80 93 94 00 	sts	0x0094, r24
	TempValue= Local_AnalogValue/10; /*cause resolution of lm35 is 10 mv/c*/
     c8c:	80 91 94 00 	lds	r24, 0x0094
     c90:	90 91 95 00 	lds	r25, 0x0095
     c94:	2a e0       	ldi	r18, 0x0A	; 10
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	b9 01       	movw	r22, r18
     c9a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__udivmodhi4>
     c9e:	cb 01       	movw	r24, r22
     ca0:	90 93 8f 00 	sts	0x008F, r25
     ca4:	80 93 8e 00 	sts	0x008E, r24

	LCD_VidSendStringPos("TempValue=",1,1);
     ca8:	80 e6       	ldi	r24, 0x60	; 96
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_VidSendStringPos>
	LCD_VidSendNumberPos(TempValue,1,11);
     cb8:	80 91 8e 00 	lds	r24, 0x008E
     cbc:	90 91 8f 00 	lds	r25, 0x008F
     cc0:	cc 01       	movw	r24, r24
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	bc 01       	movw	r22, r24
     cc8:	cd 01       	movw	r24, r26
     cca:	41 e0       	ldi	r20, 0x01	; 1
     ccc:	2b e0       	ldi	r18, 0x0B	; 11
     cce:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_VidSendNumberPos>
	//_delay_ms(1000);
	//LCD_VidCLR();
	//_delay_ms(20);
	if(TempValue>24)
     cd2:	80 91 8e 00 	lds	r24, 0x008E
     cd6:	90 91 8f 00 	lds	r25, 0x008F
     cda:	89 31       	cpi	r24, 0x19	; 25
     cdc:	91 05       	cpc	r25, r1
     cde:	58 f0       	brcs	.+22     	; 0xcf6 <Ac_Control+0x1b0>
	{
		DIO_VidSetPinDirection(PORT_C,PIN_4,DIO_OUTPUT);
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	64 e0       	ldi	r22, 0x04	; 4
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_VidSetPinDirection>
		DIO_VidSetPinValue(PORT_C,PIN_4,DIO_HIGH);
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	64 e0       	ldi	r22, 0x04	; 4
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <Ac_Control+0x1ba>

	}
	else
		DIO_VidSetPinValue(PORT_C,PIN_4,DIO_LOW);
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	64 e0       	ldi	r22, 0x04	; 4
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>

	Ldr_Control();
     d00:	0e 94 8b 06 	call	0xd16	; 0xd16 <Ldr_Control>

}
     d04:	2e 96       	adiw	r28, 0x0e	; 14
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <Ldr_Control>:


void Ldr_Control(void)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	2e 97       	sbiw	r28, 0x0e	; 14
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61

	Local_DigitaValue_LDR=ADC_U16GetDigitalValue(CHANNEL_1);
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	0e 94 7d 07 	call	0xefa	; 0xefa <ADC_U16GetDigitalValue>
     d30:	90 93 91 00 	sts	0x0091, r25
     d34:	80 93 90 00 	sts	0x0090, r24
	LCD_VidSendStringPos("LDR Read=",2,1);
     d38:	8b e6       	ldi	r24, 0x6B	; 107
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	62 e0       	ldi	r22, 0x02	; 2
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	41 e0       	ldi	r20, 0x01	; 1
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_VidSendStringPos>
	LCD_VidSendNumberPos(Local_DigitaValue_LDR,2,11);
     d48:	80 91 90 00 	lds	r24, 0x0090
     d4c:	90 91 91 00 	lds	r25, 0x0091
     d50:	cc 01       	movw	r24, r24
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	42 e0       	ldi	r20, 0x02	; 2
     d5c:	2b e0       	ldi	r18, 0x0B	; 11
     d5e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_VidSendNumberPos>
	/*Controlling the three LEDs on C1,C2,C3*/
	if(Local_DigitaValue_LDR < 171){
     d62:	80 91 90 00 	lds	r24, 0x0090
     d66:	90 91 91 00 	lds	r25, 0x0091
     d6a:	8b 3a       	cpi	r24, 0xAB	; 171
     d6c:	91 05       	cpc	r25, r1
     d6e:	30 f4       	brcc	.+12     	; 0xd7c <Ldr_Control+0x66>
		DIO_VidSetPinValue(PORT_D,PIN4,DIO_HIGH);
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	64 e0       	ldi	r22, 0x04	; 4
     d74:	41 e0       	ldi	r20, 0x01	; 1
     d76:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
     d7a:	05 c0       	rjmp	.+10     	; 0xd86 <Ldr_Control+0x70>
	}
	else{
		DIO_VidSetPinValue(PORT_D,PIN4,DIO_LOW);
     d7c:	83 e0       	ldi	r24, 0x03	; 3
     d7e:	64 e0       	ldi	r22, 0x04	; 4
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	aa ef       	ldi	r26, 0xFA	; 250
     d8c:	b3 e4       	ldi	r27, 0x43	; 67
     d8e:	8b 87       	std	Y+11, r24	; 0x0b
     d90:	9c 87       	std	Y+12, r25	; 0x0c
     d92:	ad 87       	std	Y+13, r26	; 0x0d
     d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d96:	6b 85       	ldd	r22, Y+11	; 0x0b
     d98:	7c 85       	ldd	r23, Y+12	; 0x0c
     d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	4a ef       	ldi	r20, 0xFA	; 250
     da4:	54 e4       	ldi	r21, 0x44	; 68
     da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	8f 83       	std	Y+7, r24	; 0x07
     db0:	98 87       	std	Y+8, r25	; 0x08
     db2:	a9 87       	std	Y+9, r26	; 0x09
     db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     db6:	6f 81       	ldd	r22, Y+7	; 0x07
     db8:	78 85       	ldd	r23, Y+8	; 0x08
     dba:	89 85       	ldd	r24, Y+9	; 0x09
     dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e8       	ldi	r20, 0x80	; 128
     dc4:	5f e3       	ldi	r21, 0x3F	; 63
     dc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dca:	88 23       	and	r24, r24
     dcc:	2c f4       	brge	.+10     	; 0xdd8 <Ldr_Control+0xc2>
		__ticks = 1;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	9e 83       	std	Y+6, r25	; 0x06
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	3f c0       	rjmp	.+126    	; 0xe56 <Ldr_Control+0x140>
	else if (__tmp > 65535)
     dd8:	6f 81       	ldd	r22, Y+7	; 0x07
     dda:	78 85       	ldd	r23, Y+8	; 0x08
     ddc:	89 85       	ldd	r24, Y+9	; 0x09
     dde:	9a 85       	ldd	r25, Y+10	; 0x0a
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	3f ef       	ldi	r19, 0xFF	; 255
     de4:	4f e7       	ldi	r20, 0x7F	; 127
     de6:	57 e4       	ldi	r21, 0x47	; 71
     de8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dec:	18 16       	cp	r1, r24
     dee:	4c f5       	brge	.+82     	; 0xe42 <Ldr_Control+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df0:	6b 85       	ldd	r22, Y+11	; 0x0b
     df2:	7c 85       	ldd	r23, Y+12	; 0x0c
     df4:	8d 85       	ldd	r24, Y+13	; 0x0d
     df6:	9e 85       	ldd	r25, Y+14	; 0x0e
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e2       	ldi	r20, 0x20	; 32
     dfe:	51 e4       	ldi	r21, 0x41	; 65
     e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	bc 01       	movw	r22, r24
     e0a:	cd 01       	movw	r24, r26
     e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	9e 83       	std	Y+6, r25	; 0x06
     e16:	8d 83       	std	Y+5, r24	; 0x05
     e18:	0f c0       	rjmp	.+30     	; 0xe38 <Ldr_Control+0x122>
     e1a:	88 ec       	ldi	r24, 0xC8	; 200
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9c 83       	std	Y+4, r25	; 0x04
     e20:	8b 83       	std	Y+3, r24	; 0x03
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <Ldr_Control+0x110>
     e2a:	9c 83       	std	Y+4, r25	; 0x04
     e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2e:	8d 81       	ldd	r24, Y+5	; 0x05
     e30:	9e 81       	ldd	r25, Y+6	; 0x06
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	9e 81       	ldd	r25, Y+6	; 0x06
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	69 f7       	brne	.-38     	; 0xe1a <Ldr_Control+0x104>
     e40:	14 c0       	rjmp	.+40     	; 0xe6a <Ldr_Control+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e42:	6f 81       	ldd	r22, Y+7	; 0x07
     e44:	78 85       	ldd	r23, Y+8	; 0x08
     e46:	89 85       	ldd	r24, Y+9	; 0x09
     e48:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	9e 83       	std	Y+6, r25	; 0x06
     e54:	8d 83       	std	Y+5, r24	; 0x05
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	9e 81       	ldd	r25, Y+6	; 0x06
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <Ldr_Control+0x14c>
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(500);
}
     e6a:	2e 96       	adiw	r28, 0x0e	; 14
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <ADC_VidInit>:

#include <avr/io.h>
#include "ADC.h"

void ADC_VidInit(void)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	/* select 2.56 v */
	SET_BIT(ADMUX,REFS0);
     e84:	a7 e2       	ldi	r26, 0x27	; 39
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e2       	ldi	r30, 0x27	; 39
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 64       	ori	r24, 0x40	; 64
     e90:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
     e92:	a7 e2       	ldi	r26, 0x27	; 39
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e7 e2       	ldi	r30, 0x27	; 39
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	80 68       	ori	r24, 0x80	; 128
     e9e:	8c 93       	st	X, r24

	/* right adjust */
	CLR_BIT(ADMUX,ADLAR);
     ea0:	a7 e2       	ldi	r26, 0x27	; 39
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e7 e2       	ldi	r30, 0x27	; 39
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	8f 7d       	andi	r24, 0xDF	; 223
     eac:	8c 93       	st	X, r24

	/* disable auto triggering */
	CLR_BIT(ADCSRA,ADATE);
     eae:	a6 e2       	ldi	r26, 0x26	; 38
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e6 e2       	ldi	r30, 0x26	; 38
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	8f 7d       	andi	r24, 0xDF	; 223
     eba:	8c 93       	st	X, r24

	/* prescaler */
	CLR_BIT(ADCSRA,ADPS0);
     ebc:	a6 e2       	ldi	r26, 0x26	; 38
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e6 e2       	ldi	r30, 0x26	; 38
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8e 7f       	andi	r24, 0xFE	; 254
     ec8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     eca:	a6 e2       	ldi	r26, 0x26	; 38
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e6 e2       	ldi	r30, 0x26	; 38
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	82 60       	ori	r24, 0x02	; 2
     ed6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     ed8:	a6 e2       	ldi	r26, 0x26	; 38
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e6 e2       	ldi	r30, 0x26	; 38
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	84 60       	ori	r24, 0x04	; 4
     ee4:	8c 93       	st	X, r24

	/*ADC Enable*/
	SET_BIT(ADCSRA,ADEN);
     ee6:	a6 e2       	ldi	r26, 0x26	; 38
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e6 e2       	ldi	r30, 0x26	; 38
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 68       	ori	r24, 0x80	; 128
     ef2:	8c 93       	st	X, r24

}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <ADC_U16GetDigitalValue>:


u16 ADC_U16GetDigitalValue(u8 Copy_U8ChannelId)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <ADC_U16GetDigitalValue+0x6>
     f00:	0f 92       	push	r0
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_U16DigitalValue;
	/*clear MUX4..0*/
	ADMUX&=0b11100000;
     f08:	a7 e2       	ldi	r26, 0x27	; 39
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e7 e2       	ldi	r30, 0x27	; 39
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	80 7e       	andi	r24, 0xE0	; 224
     f14:	8c 93       	st	X, r24
	/* select channel */
	ADMUX|=Copy_U8ChannelId;
     f16:	a7 e2       	ldi	r26, 0x27	; 39
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e2       	ldi	r30, 0x27	; 39
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	90 81       	ld	r25, Z
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	89 2b       	or	r24, r25
     f24:	8c 93       	st	X, r24
	/* start conversion */
	SET_BIT(ADCSRA,ADSC);
     f26:	a6 e2       	ldi	r26, 0x26	; 38
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e6 e2       	ldi	r30, 0x26	; 38
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 64       	ori	r24, 0x40	; 64
     f32:	8c 93       	st	X, r24

	/*bouling for making program stuck till flag be high*/
	while(!GET_BIT(ADCSRA,ADIF));
     f34:	e6 e2       	ldi	r30, 0x26	; 38
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	82 95       	swap	r24
     f3c:	8f 70       	andi	r24, 0x0F	; 15
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	81 70       	andi	r24, 0x01	; 1
     f44:	90 70       	andi	r25, 0x00	; 0
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	a9 f3       	breq	.-22     	; 0xf34 <ADC_U16GetDigitalValue+0x3a>

	Local_U16DigitalValue=ADC_REG;
     f4a:	e4 e2       	ldi	r30, 0x24	; 36
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01

	return   Local_U16DigitalValue;
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02


}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <DIO_VidSetPinDirection>:
#include "DIO_Interface.h"



void DIO_VidSetPinDirection(u8 copy_u8port ,u8 copy_u8Pin, u8 copy_U8Direction)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	27 97       	sbiw	r28, 0x07	; 7
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	6a 83       	std	Y+2, r22	; 0x02
     f7e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_U8Direction==1)
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	09 f0       	breq	.+2      	; 0xf88 <DIO_VidSetPinDirection+0x22>
     f86:	6f c0       	rjmp	.+222    	; 0x1066 <DIO_VidSetPinDirection+0x100>
	{
		switch(copy_u8port)
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	3f 83       	std	Y+7, r19	; 0x07
     f90:	2e 83       	std	Y+6, r18	; 0x06
     f92:	8e 81       	ldd	r24, Y+6	; 0x06
     f94:	9f 81       	ldd	r25, Y+7	; 0x07
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	91 05       	cpc	r25, r1
     f9a:	49 f1       	breq	.+82     	; 0xfee <DIO_VidSetPinDirection+0x88>
     f9c:	2e 81       	ldd	r18, Y+6	; 0x06
     f9e:	3f 81       	ldd	r19, Y+7	; 0x07
     fa0:	22 30       	cpi	r18, 0x02	; 2
     fa2:	31 05       	cpc	r19, r1
     fa4:	2c f4       	brge	.+10     	; 0xfb0 <DIO_VidSetPinDirection+0x4a>
     fa6:	8e 81       	ldd	r24, Y+6	; 0x06
     fa8:	9f 81       	ldd	r25, Y+7	; 0x07
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	61 f0       	breq	.+24     	; 0xfc6 <DIO_VidSetPinDirection+0x60>
     fae:	d2 c0       	rjmp	.+420    	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
     fb0:	2e 81       	ldd	r18, Y+6	; 0x06
     fb2:	3f 81       	ldd	r19, Y+7	; 0x07
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	71 f1       	breq	.+92     	; 0x1016 <DIO_VidSetPinDirection+0xb0>
     fba:	8e 81       	ldd	r24, Y+6	; 0x06
     fbc:	9f 81       	ldd	r25, Y+7	; 0x07
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	91 05       	cpc	r25, r1
     fc2:	e9 f1       	breq	.+122    	; 0x103e <DIO_VidSetPinDirection+0xd8>
     fc4:	c7 c0       	rjmp	.+398    	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: SET_BIT(DDRA,copy_u8Pin);break;
     fc6:	aa e3       	ldi	r26, 0x3A	; 58
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ea e3       	ldi	r30, 0x3A	; 58
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_VidSetPinDirection+0x7e>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_VidSetPinDirection+0x7a>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	b3 c0       	rjmp	.+358    	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
			case 1: SET_BIT(DDRB,copy_u8Pin);break;
     fee:	a7 e3       	ldi	r26, 0x37	; 55
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e7 e3       	ldi	r30, 0x37	; 55
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_VidSetPinDirection+0xa6>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_VidSetPinDirection+0xa2>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	9f c0       	rjmp	.+318    	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
			case 2: SET_BIT(DDRC,copy_u8Pin);break;
    1016:	a4 e3       	ldi	r26, 0x34	; 52
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e4 e3       	ldi	r30, 0x34	; 52
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_VidSetPinDirection+0xce>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_VidSetPinDirection+0xca>
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	8b c0       	rjmp	.+278    	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
			case 3: SET_BIT(DDRD,copy_u8Pin);break;
    103e:	a1 e3       	ldi	r26, 0x31	; 49
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e1 e3       	ldi	r30, 0x31	; 49
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_VidSetPinDirection+0xf6>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_VidSetPinDirection+0xf2>
    1060:	84 2b       	or	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	77 c0       	rjmp	.+238    	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(copy_U8Direction==0)
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	88 23       	and	r24, r24
    106a:	09 f0       	breq	.+2      	; 0x106e <DIO_VidSetPinDirection+0x108>
    106c:	73 c0       	rjmp	.+230    	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3d 83       	std	Y+5, r19	; 0x05
    1076:	2c 83       	std	Y+4, r18	; 0x04
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	91 05       	cpc	r25, r1
    1080:	59 f1       	breq	.+86     	; 0x10d8 <DIO_VidSetPinDirection+0x172>
    1082:	2c 81       	ldd	r18, Y+4	; 0x04
    1084:	3d 81       	ldd	r19, Y+5	; 0x05
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	2c f4       	brge	.+10     	; 0x1096 <DIO_VidSetPinDirection+0x130>
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	9d 81       	ldd	r25, Y+5	; 0x05
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	69 f0       	breq	.+26     	; 0x10ae <DIO_VidSetPinDirection+0x148>
    1094:	5f c0       	rjmp	.+190    	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
    1096:	2c 81       	ldd	r18, Y+4	; 0x04
    1098:	3d 81       	ldd	r19, Y+5	; 0x05
    109a:	22 30       	cpi	r18, 0x02	; 2
    109c:	31 05       	cpc	r19, r1
    109e:	89 f1       	breq	.+98     	; 0x1102 <DIO_VidSetPinDirection+0x19c>
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <DIO_VidSetPinDirection+0x146>
    10aa:	40 c0       	rjmp	.+128    	; 0x112c <DIO_VidSetPinDirection+0x1c6>
    10ac:	53 c0       	rjmp	.+166    	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: CLR_BIT(DDRA,copy_u8Pin);break;
    10ae:	aa e3       	ldi	r26, 0x3A	; 58
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ea e3       	ldi	r30, 0x3A	; 58
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_VidSetPinDirection+0x166>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_VidSetPinDirection+0x162>
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	3e c0       	rjmp	.+124    	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
			case 1: CLR_BIT(DDRB,copy_u8Pin);break;
    10d8:	a7 e3       	ldi	r26, 0x37	; 55
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e7 e3       	ldi	r30, 0x37	; 55
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_VidSetPinDirection+0x190>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_VidSetPinDirection+0x18c>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	29 c0       	rjmp	.+82     	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
			case 2: CLR_BIT(DDRC,copy_u8Pin);break;
    1102:	a4 e3       	ldi	r26, 0x34	; 52
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e4 e3       	ldi	r30, 0x34	; 52
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_VidSetPinDirection+0x1ba>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_VidSetPinDirection+0x1b6>
    1124:	80 95       	com	r24
    1126:	84 23       	and	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	14 c0       	rjmp	.+40     	; 0x1154 <DIO_VidSetPinDirection+0x1ee>
			case 3: CLR_BIT(DDRD,copy_u8Pin);break;
    112c:	a1 e3       	ldi	r26, 0x31	; 49
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e1 e3       	ldi	r30, 0x31	; 49
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_VidSetPinDirection+0x1e4>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_VidSetPinDirection+0x1e0>
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	8c 93       	st	X, r24
		}

	}
}
    1154:	27 96       	adiw	r28, 0x07	; 7
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue(u8 copy_U8port ,u8 copy_U8Pin , u8 copy_U8Value)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	27 97       	sbiw	r28, 0x07	; 7
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	6a 83       	std	Y+2, r22	; 0x02
    117e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_U8Value==1)
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	09 f0       	breq	.+2      	; 0x1188 <DIO_VidSetPinValue+0x22>
    1186:	6f c0       	rjmp	.+222    	; 0x1266 <DIO_VidSetPinValue+0x100>
	{
		switch(copy_U8port)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3f 83       	std	Y+7, r19	; 0x07
    1190:	2e 83       	std	Y+6, r18	; 0x06
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	9f 81       	ldd	r25, Y+7	; 0x07
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	49 f1       	breq	.+82     	; 0x11ee <DIO_VidSetPinValue+0x88>
    119c:	2e 81       	ldd	r18, Y+6	; 0x06
    119e:	3f 81       	ldd	r19, Y+7	; 0x07
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <DIO_VidSetPinValue+0x4a>
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	9f 81       	ldd	r25, Y+7	; 0x07
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <DIO_VidSetPinValue+0x60>
    11ae:	d2 c0       	rjmp	.+420    	; 0x1354 <DIO_VidSetPinValue+0x1ee>
    11b0:	2e 81       	ldd	r18, Y+6	; 0x06
    11b2:	3f 81       	ldd	r19, Y+7	; 0x07
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	71 f1       	breq	.+92     	; 0x1216 <DIO_VidSetPinValue+0xb0>
    11ba:	8e 81       	ldd	r24, Y+6	; 0x06
    11bc:	9f 81       	ldd	r25, Y+7	; 0x07
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	e9 f1       	breq	.+122    	; 0x123e <DIO_VidSetPinValue+0xd8>
    11c4:	c7 c0       	rjmp	.+398    	; 0x1354 <DIO_VidSetPinValue+0x1ee>
		{
			case 0: SET_BIT(PORTA,copy_U8Pin);
    11c6:	ab e3       	ldi	r26, 0x3B	; 59
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	eb e3       	ldi	r30, 0x3B	; 59
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_VidSetPinValue+0x7e>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_VidSetPinValue+0x7a>
    11e8:	84 2b       	or	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	b3 c0       	rjmp	.+358    	; 0x1354 <DIO_VidSetPinValue+0x1ee>
				break;
			case 1: SET_BIT(PORTB,copy_U8Pin);
    11ee:	a8 e3       	ldi	r26, 0x38	; 56
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e8 e3       	ldi	r30, 0x38	; 56
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_VidSetPinValue+0xa6>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_VidSetPinValue+0xa2>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	9f c0       	rjmp	.+318    	; 0x1354 <DIO_VidSetPinValue+0x1ee>
				break;
			case 2: SET_BIT(PORTC,copy_U8Pin);
    1216:	a5 e3       	ldi	r26, 0x35	; 53
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e5 e3       	ldi	r30, 0x35	; 53
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_VidSetPinValue+0xce>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_VidSetPinValue+0xca>
    1238:	84 2b       	or	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	8b c0       	rjmp	.+278    	; 0x1354 <DIO_VidSetPinValue+0x1ee>
				break;
			case 3: SET_BIT(PORTD,copy_U8Pin);
    123e:	a2 e3       	ldi	r26, 0x32	; 50
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e2 e3       	ldi	r30, 0x32	; 50
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_VidSetPinValue+0xf6>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_VidSetPinValue+0xf2>
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	77 c0       	rjmp	.+238    	; 0x1354 <DIO_VidSetPinValue+0x1ee>
				break;
		}
	}
	else if(copy_U8Value==0)
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	88 23       	and	r24, r24
    126a:	09 f0       	breq	.+2      	; 0x126e <DIO_VidSetPinValue+0x108>
    126c:	73 c0       	rjmp	.+230    	; 0x1354 <DIO_VidSetPinValue+0x1ee>
	{
		switch(copy_U8port)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3d 83       	std	Y+5, r19	; 0x05
    1276:	2c 83       	std	Y+4, r18	; 0x04
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	59 f1       	breq	.+86     	; 0x12d8 <DIO_VidSetPinValue+0x172>
    1282:	2c 81       	ldd	r18, Y+4	; 0x04
    1284:	3d 81       	ldd	r19, Y+5	; 0x05
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	2c f4       	brge	.+10     	; 0x1296 <DIO_VidSetPinValue+0x130>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	69 f0       	breq	.+26     	; 0x12ae <DIO_VidSetPinValue+0x148>
    1294:	5f c0       	rjmp	.+190    	; 0x1354 <DIO_VidSetPinValue+0x1ee>
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	3d 81       	ldd	r19, Y+5	; 0x05
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	89 f1       	breq	.+98     	; 0x1302 <DIO_VidSetPinValue+0x19c>
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	91 05       	cpc	r25, r1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <DIO_VidSetPinValue+0x146>
    12aa:	40 c0       	rjmp	.+128    	; 0x132c <DIO_VidSetPinValue+0x1c6>
    12ac:	53 c0       	rjmp	.+166    	; 0x1354 <DIO_VidSetPinValue+0x1ee>
		{
			case 0: CLR_BIT(PORTA,copy_U8Pin);
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_VidSetPinValue+0x166>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_VidSetPinValue+0x162>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	3e c0       	rjmp	.+124    	; 0x1354 <DIO_VidSetPinValue+0x1ee>
				break;
			case 1: CLR_BIT(PORTB,copy_U8Pin);
    12d8:	a8 e3       	ldi	r26, 0x38	; 56
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e8 e3       	ldi	r30, 0x38	; 56
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_VidSetPinValue+0x190>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_VidSetPinValue+0x18c>
    12fa:	80 95       	com	r24
    12fc:	84 23       	and	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	29 c0       	rjmp	.+82     	; 0x1354 <DIO_VidSetPinValue+0x1ee>
				break;
			case 2: CLR_BIT(PORTC,copy_U8Pin);
    1302:	a5 e3       	ldi	r26, 0x35	; 53
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e3       	ldi	r30, 0x35	; 53
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_VidSetPinValue+0x1ba>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_VidSetPinValue+0x1b6>
    1324:	80 95       	com	r24
    1326:	84 23       	and	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	14 c0       	rjmp	.+40     	; 0x1354 <DIO_VidSetPinValue+0x1ee>
				break;
			case 3: CLR_BIT(PORTD,copy_U8Pin);
    132c:	a2 e3       	ldi	r26, 0x32	; 50
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e2 e3       	ldi	r30, 0x32	; 50
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_VidSetPinValue+0x1e4>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_VidSetPinValue+0x1e0>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
				break;
		}

	}
}
    1354:	27 96       	adiw	r28, 0x07	; 7
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <DIO_U8GetPinValue>:



u8 DIO_U8GetPinValue(u8 copy_u8port ,u8 copy_U8Pin)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <DIO_U8GetPinValue+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_U8GetPinValue+0x8>
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	8a 83       	std	Y+2, r24	; 0x02
    1376:	6b 83       	std	Y+3, r22	; 0x03
	u8 returned_value=0;
    1378:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port)
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3d 83       	std	Y+5, r19	; 0x05
    1382:	2c 83       	std	Y+4, r18	; 0x04
    1384:	4c 81       	ldd	r20, Y+4	; 0x04
    1386:	5d 81       	ldd	r21, Y+5	; 0x05
    1388:	41 30       	cpi	r20, 0x01	; 1
    138a:	51 05       	cpc	r21, r1
    138c:	41 f1       	breq	.+80     	; 0x13de <DIO_U8GetPinValue+0x78>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	91 05       	cpc	r25, r1
    1396:	34 f4       	brge	.+12     	; 0x13a4 <DIO_U8GetPinValue+0x3e>
    1398:	2c 81       	ldd	r18, Y+4	; 0x04
    139a:	3d 81       	ldd	r19, Y+5	; 0x05
    139c:	21 15       	cp	r18, r1
    139e:	31 05       	cpc	r19, r1
    13a0:	61 f0       	breq	.+24     	; 0x13ba <DIO_U8GetPinValue+0x54>
    13a2:	52 c0       	rjmp	.+164    	; 0x1448 <DIO_U8GetPinValue+0xe2>
    13a4:	4c 81       	ldd	r20, Y+4	; 0x04
    13a6:	5d 81       	ldd	r21, Y+5	; 0x05
    13a8:	42 30       	cpi	r20, 0x02	; 2
    13aa:	51 05       	cpc	r21, r1
    13ac:	51 f1       	breq	.+84     	; 0x1402 <DIO_U8GetPinValue+0x9c>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	b9 f1       	breq	.+110    	; 0x1426 <DIO_U8GetPinValue+0xc0>
    13b8:	47 c0       	rjmp	.+142    	; 0x1448 <DIO_U8GetPinValue+0xe2>
	{
		case 0:returned_value= GET_BIT(PINA,copy_U8Pin);break;
    13ba:	e9 e3       	ldi	r30, 0x39	; 57
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a9 01       	movw	r20, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_U8GetPinValue+0x6c>
    13ce:	55 95       	asr	r21
    13d0:	47 95       	ror	r20
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <DIO_U8GetPinValue+0x68>
    13d6:	ca 01       	movw	r24, r20
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	35 c0       	rjmp	.+106    	; 0x1448 <DIO_U8GetPinValue+0xe2>
		case 1:returned_value= GET_BIT(PINB,copy_U8Pin);break;
    13de:	e6 e3       	ldi	r30, 0x36	; 54
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	a9 01       	movw	r20, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_U8GetPinValue+0x90>
    13f2:	55 95       	asr	r21
    13f4:	47 95       	ror	r20
    13f6:	8a 95       	dec	r24
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_U8GetPinValue+0x8c>
    13fa:	ca 01       	movw	r24, r20
    13fc:	81 70       	andi	r24, 0x01	; 1
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	23 c0       	rjmp	.+70     	; 0x1448 <DIO_U8GetPinValue+0xe2>
		case 2:returned_value= GET_BIT(PINC,copy_U8Pin);break;
    1402:	e3 e3       	ldi	r30, 0x33	; 51
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	a9 01       	movw	r20, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_U8GetPinValue+0xb4>
    1416:	55 95       	asr	r21
    1418:	47 95       	ror	r20
    141a:	8a 95       	dec	r24
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_U8GetPinValue+0xb0>
    141e:	ca 01       	movw	r24, r20
    1420:	81 70       	andi	r24, 0x01	; 1
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	11 c0       	rjmp	.+34     	; 0x1448 <DIO_U8GetPinValue+0xe2>
		case 3:returned_value= GET_BIT(PIND,copy_U8Pin);break;
    1426:	e0 e3       	ldi	r30, 0x30	; 48
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a9 01       	movw	r20, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_U8GetPinValue+0xd8>
    143a:	55 95       	asr	r21
    143c:	47 95       	ror	r20
    143e:	8a 95       	dec	r24
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_U8GetPinValue+0xd4>
    1442:	ca 01       	movw	r24, r20
    1444:	81 70       	andi	r24, 0x01	; 1
    1446:	89 83       	std	Y+1, r24	; 0x01
	}
	return returned_value;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <DIO_VidSetPortValue>:


void DIO_VidSetPortValue(u8 copy_u8port ,u8 copy_U8Value)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	00 d0       	rcall	.+0      	; 0x1460 <DIO_VidSetPortValue+0x6>
    1460:	00 d0       	rcall	.+0      	; 0x1462 <DIO_VidSetPortValue+0x8>
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3c 83       	std	Y+4, r19	; 0x04
    1472:	2b 83       	std	Y+3, r18	; 0x03
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	d1 f0       	breq	.+52     	; 0x14b2 <DIO_VidSetPortValue+0x58>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	2c f4       	brge	.+10     	; 0x1492 <DIO_VidSetPortValue+0x38>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	61 f0       	breq	.+24     	; 0x14a8 <DIO_VidSetPortValue+0x4e>
    1490:	1e c0       	rjmp	.+60     	; 0x14ce <DIO_VidSetPortValue+0x74>
    1492:	2b 81       	ldd	r18, Y+3	; 0x03
    1494:	3c 81       	ldd	r19, Y+4	; 0x04
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	81 f0       	breq	.+32     	; 0x14bc <DIO_VidSetPortValue+0x62>
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	81 f0       	breq	.+32     	; 0x14c6 <DIO_VidSetPortValue+0x6c>
    14a6:	13 c0       	rjmp	.+38     	; 0x14ce <DIO_VidSetPortValue+0x74>
	{
		case 0:PORTA=copy_U8Value;break;
    14a8:	eb e3       	ldi	r30, 0x3B	; 59
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	80 83       	st	Z, r24
    14b0:	0e c0       	rjmp	.+28     	; 0x14ce <DIO_VidSetPortValue+0x74>
		case 1:PORTB=copy_U8Value;break;
    14b2:	e8 e3       	ldi	r30, 0x38	; 56
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	80 83       	st	Z, r24
    14ba:	09 c0       	rjmp	.+18     	; 0x14ce <DIO_VidSetPortValue+0x74>
		case 2:PORTC=copy_U8Value;break;
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	80 83       	st	Z, r24
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <DIO_VidSetPortValue+0x74>
		case 3:PORTD=copy_U8Value;break;
    14c6:	e2 e3       	ldi	r30, 0x32	; 50
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	80 83       	st	Z, r24
	}
}
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 copy_u8port ,u8 copy_U8Direction)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <DIO_VidSetPortDirection+0x6>
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <DIO_VidSetPortDirection+0x8>
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3c 83       	std	Y+4, r19	; 0x04
    14f4:	2b 83       	std	Y+3, r18	; 0x03
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	d1 f0       	breq	.+52     	; 0x1534 <DIO_VidSetPortDirection+0x58>
    1500:	2b 81       	ldd	r18, Y+3	; 0x03
    1502:	3c 81       	ldd	r19, Y+4	; 0x04
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <DIO_VidSetPortDirection+0x38>
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	61 f0       	breq	.+24     	; 0x152a <DIO_VidSetPortDirection+0x4e>
    1512:	1e c0       	rjmp	.+60     	; 0x1550 <DIO_VidSetPortDirection+0x74>
    1514:	2b 81       	ldd	r18, Y+3	; 0x03
    1516:	3c 81       	ldd	r19, Y+4	; 0x04
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <DIO_VidSetPortDirection+0x62>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <DIO_VidSetPortDirection+0x6c>
    1528:	13 c0       	rjmp	.+38     	; 0x1550 <DIO_VidSetPortDirection+0x74>
	{
		case 0:DDRA=copy_U8Direction;break;
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	80 83       	st	Z, r24
    1532:	0e c0       	rjmp	.+28     	; 0x1550 <DIO_VidSetPortDirection+0x74>
		case 1:DDRB=copy_U8Direction;break;
    1534:	e7 e3       	ldi	r30, 0x37	; 55
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	80 83       	st	Z, r24
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <DIO_VidSetPortDirection+0x74>
		case 2:DDRC=copy_U8Direction;break;
    153e:	e4 e3       	ldi	r30, 0x34	; 52
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 83       	st	Z, r24
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <DIO_VidSetPortDirection+0x74>
		case 3:DDRD=copy_U8Direction;break;
    1548:	e1 e3       	ldi	r30, 0x31	; 49
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
	}
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <DIO_VidToggelPinValue>:

void DIO_VidToggelPinValue(u8 copy_u8port ,u8 copy_U8Pin)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <DIO_VidToggelPinValue+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <DIO_VidToggelPinValue+0x8>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8port)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	3c 83       	std	Y+4, r19	; 0x04
    1576:	2b 83       	std	Y+3, r18	; 0x03
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	91 05       	cpc	r25, r1
    1580:	49 f1       	breq	.+82     	; 0x15d4 <DIO_VidToggelPinValue+0x76>
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	2c f4       	brge	.+10     	; 0x1596 <DIO_VidToggelPinValue+0x38>
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	61 f0       	breq	.+24     	; 0x15ac <DIO_VidToggelPinValue+0x4e>
    1594:	5a c0       	rjmp	.+180    	; 0x164a <DIO_VidToggelPinValue+0xec>
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	71 f1       	breq	.+92     	; 0x15fc <DIO_VidToggelPinValue+0x9e>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	91 05       	cpc	r25, r1
    15a8:	e9 f1       	breq	.+122    	; 0x1624 <DIO_VidToggelPinValue+0xc6>
    15aa:	4f c0       	rjmp	.+158    	; 0x164a <DIO_VidToggelPinValue+0xec>
		{
			case 0: TOG_BIT(PORTA,copy_U8Pin);
    15ac:	ab e3       	ldi	r26, 0x3B	; 59
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	eb e3       	ldi	r30, 0x3B	; 59
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_VidToggelPinValue+0x6c>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_VidToggelPinValue+0x68>
    15ce:	84 27       	eor	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	3b c0       	rjmp	.+118    	; 0x164a <DIO_VidToggelPinValue+0xec>
				break;
			case 1: TOG_BIT(PORTB,copy_U8Pin);
    15d4:	a8 e3       	ldi	r26, 0x38	; 56
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e8 e3       	ldi	r30, 0x38	; 56
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_VidToggelPinValue+0x94>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_VidToggelPinValue+0x90>
    15f6:	84 27       	eor	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	27 c0       	rjmp	.+78     	; 0x164a <DIO_VidToggelPinValue+0xec>
				break;
			case 2: TOG_BIT(PORTC,copy_U8Pin);
    15fc:	a5 e3       	ldi	r26, 0x35	; 53
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e3       	ldi	r30, 0x35	; 53
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_VidToggelPinValue+0xbc>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_VidToggelPinValue+0xb8>
    161e:	84 27       	eor	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	13 c0       	rjmp	.+38     	; 0x164a <DIO_VidToggelPinValue+0xec>
				break;
			case 3: TOG_BIT(PORTD,copy_U8Pin);
    1624:	a2 e3       	ldi	r26, 0x32	; 50
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e2 e3       	ldi	r30, 0x32	; 50
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_VidToggelPinValue+0xe4>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_VidToggelPinValue+0xe0>
    1646:	84 27       	eor	r24, r20
    1648:	8c 93       	st	X, r24
				break;
		}
}
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <LCD_VidSendCMD>:
#include"DIO_Interface.h"
#include"LCD.h"


void LCD_VidSendCMD(u8 Copy_U8CMD)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	2f 97       	sbiw	r28, 0x0f	; 15
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPinValue(LCD_CMD_PORT,RS,0);
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	65 e0       	ldi	r22, 0x05	; 5
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,RW,0);
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	66 e0       	ldi	r22, 0x06	; 6
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
	
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8CMD);
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	6f 85       	ldd	r22, Y+15	; 0x0f
    1686:	0e 94 2d 0a 	call	0x145a	; 0x145a <DIO_VidSetPortValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,1);
    168a:	83 e0       	ldi	r24, 0x03	; 3
    168c:	67 e0       	ldi	r22, 0x07	; 7
    168e:	41 e0       	ldi	r20, 0x01	; 1
    1690:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a0 e8       	ldi	r26, 0x80	; 128
    169a:	bf e3       	ldi	r27, 0x3F	; 63
    169c:	8b 87       	std	Y+11, r24	; 0x0b
    169e:	9c 87       	std	Y+12, r25	; 0x0c
    16a0:	ad 87       	std	Y+13, r26	; 0x0d
    16a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	4a ef       	ldi	r20, 0xFA	; 250
    16b2:	54 e4       	ldi	r21, 0x44	; 68
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8f 83       	std	Y+7, r24	; 0x07
    16be:	98 87       	std	Y+8, r25	; 0x08
    16c0:	a9 87       	std	Y+9, r26	; 0x09
    16c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c4:	6f 81       	ldd	r22, Y+7	; 0x07
    16c6:	78 85       	ldd	r23, Y+8	; 0x08
    16c8:	89 85       	ldd	r24, Y+9	; 0x09
    16ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <LCD_VidSendCMD+0x8e>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <LCD_VidSendCMD+0x10c>
	else if (__tmp > 65535)
    16e6:	6f 81       	ldd	r22, Y+7	; 0x07
    16e8:	78 85       	ldd	r23, Y+8	; 0x08
    16ea:	89 85       	ldd	r24, Y+9	; 0x09
    16ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	4f e7       	ldi	r20, 0x7F	; 127
    16f4:	57 e4       	ldi	r21, 0x47	; 71
    16f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <LCD_VidSendCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1700:	7c 85       	ldd	r23, Y+12	; 0x0c
    1702:	8d 85       	ldd	r24, Y+13	; 0x0d
    1704:	9e 85       	ldd	r25, Y+14	; 0x0e
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <LCD_VidSendCMD+0xee>
    1728:	88 ec       	ldi	r24, 0xC8	; 200
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	8b 83       	std	Y+3, r24	; 0x03
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <LCD_VidSendCMD+0xdc>
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	69 f7       	brne	.-38     	; 0x1728 <LCD_VidSendCMD+0xd0>
    174e:	14 c0       	rjmp	.+40     	; 0x1778 <LCD_VidSendCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	6f 81       	ldd	r22, Y+7	; 0x07
    1752:	78 85       	ldd	r23, Y+8	; 0x08
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	9a 85       	ldd	r25, Y+10	; 0x0a
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <LCD_VidSendCMD+0x118>
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(1);
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,0);
    1778:	83 e0       	ldi	r24, 0x03	; 3
    177a:	67 e0       	ldi	r22, 0x07	; 7
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
}
    1782:	2f 96       	adiw	r28, 0x0f	; 15
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <LCD_VidSendData>:



void LCD_VidSendData(u8 Copy_U8Data)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	2f 97       	sbiw	r28, 0x0f	; 15
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPinValue(LCD_CMD_PORT,RS,1);
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	65 e0       	ldi	r22, 0x05	; 5
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,RW,0);
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	66 e0       	ldi	r22, 0x06	; 6
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
	
	DIO_VidSetPortValue(LCD_DATA_PORT,Copy_U8Data);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    17c2:	0e 94 2d 0a 	call	0x145a	; 0x145a <DIO_VidSetPortValue>
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,1);
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	67 e0       	ldi	r22, 0x07	; 7
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 e8       	ldi	r26, 0x80	; 128
    17d6:	bf e3       	ldi	r27, 0x3F	; 63
    17d8:	8b 87       	std	Y+11, r24	; 0x0b
    17da:	9c 87       	std	Y+12, r25	; 0x0c
    17dc:	ad 87       	std	Y+13, r26	; 0x0d
    17de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4a ef       	ldi	r20, 0xFA	; 250
    17ee:	54 e4       	ldi	r21, 0x44	; 68
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8f 83       	std	Y+7, r24	; 0x07
    17fa:	98 87       	std	Y+8, r25	; 0x08
    17fc:	a9 87       	std	Y+9, r26	; 0x09
    17fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1800:	6f 81       	ldd	r22, Y+7	; 0x07
    1802:	78 85       	ldd	r23, Y+8	; 0x08
    1804:	89 85       	ldd	r24, Y+9	; 0x09
    1806:	9a 85       	ldd	r25, Y+10	; 0x0a
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e8       	ldi	r20, 0x80	; 128
    180e:	5f e3       	ldi	r21, 0x3F	; 63
    1810:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1814:	88 23       	and	r24, r24
    1816:	2c f4       	brge	.+10     	; 0x1822 <LCD_VidSendData+0x8e>
		__ticks = 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
    1820:	3f c0       	rjmp	.+126    	; 0x18a0 <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	3f ef       	ldi	r19, 0xFF	; 255
    182e:	4f e7       	ldi	r20, 0x7F	; 127
    1830:	57 e4       	ldi	r21, 0x47	; 71
    1832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1836:	18 16       	cp	r1, r24
    1838:	4c f5       	brge	.+82     	; 0x188c <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183a:	6b 85       	ldd	r22, Y+11	; 0x0b
    183c:	7c 85       	ldd	r23, Y+12	; 0x0c
    183e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1840:	9e 85       	ldd	r25, Y+14	; 0x0e
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e2       	ldi	r20, 0x20	; 32
    1848:	51 e4       	ldi	r21, 0x41	; 65
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	9e 83       	std	Y+6, r25	; 0x06
    1860:	8d 83       	std	Y+5, r24	; 0x05
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <LCD_VidSendData+0xee>
    1864:	88 ec       	ldi	r24, 0xC8	; 200
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9c 83       	std	Y+4, r25	; 0x04
    186a:	8b 83       	std	Y+3, r24	; 0x03
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <LCD_VidSendData+0xdc>
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	69 f7       	brne	.-38     	; 0x1864 <LCD_VidSendData+0xd0>
    188a:	14 c0       	rjmp	.+40     	; 0x18b4 <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188c:	6f 81       	ldd	r22, Y+7	; 0x07
    188e:	78 85       	ldd	r23, Y+8	; 0x08
    1890:	89 85       	ldd	r24, Y+9	; 0x09
    1892:	9a 85       	ldd	r25, Y+10	; 0x0a
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_VidSendData+0x118>
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(1);
	
	DIO_VidSetPinValue(LCD_CMD_PORT,EN,0);
    18b4:	83 e0       	ldi	r24, 0x03	; 3
    18b6:	67 e0       	ldi	r22, 0x07	; 7
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
}
    18be:	2f 96       	adiw	r28, 0x0f	; 15
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <LCD_VidSendString>:

}*/


void LCD_VidSendString(u8 *Copy_U8String)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <LCD_VidSendString+0x6>
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	9b 83       	std	Y+3, r25	; 0x03
    18de:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter = 0 ;
    18e0:	19 82       	std	Y+1, r1	; 0x01
    18e2:	0e c0       	rjmp	.+28     	; 0x1900 <LCD_VidSendString+0x30>
	while(Copy_U8String[counter] !='\0')
	{
		LCD_VidSendData(Copy_U8String[counter]);
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	9b 81       	ldd	r25, Y+3	; 0x03
    18ee:	fc 01       	movw	r30, r24
    18f0:	e2 0f       	add	r30, r18
    18f2:	f3 1f       	adc	r31, r19
    18f4:	80 81       	ld	r24, Z
    18f6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_VidSendData>
		counter++;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	89 83       	std	Y+1, r24	; 0x01


void LCD_VidSendString(u8 *Copy_U8String)
{
	u8 counter = 0 ;
	while(Copy_U8String[counter] !='\0')
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	9b 81       	ldd	r25, Y+3	; 0x03
    190a:	fc 01       	movw	r30, r24
    190c:	e2 0f       	add	r30, r18
    190e:	f3 1f       	adc	r31, r19
    1910:	80 81       	ld	r24, Z
    1912:	88 23       	and	r24, r24
    1914:	39 f7       	brne	.-50     	; 0x18e4 <LCD_VidSendString+0x14>
	{
		LCD_VidSendData(Copy_U8String[counter]);
		counter++;
	}
}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <LCD_VidInit>:




void LCD_VidInit(void)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	e8 97       	sbiw	r28, 0x38	; 56
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_DATA_PORT,0xff);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	6f ef       	ldi	r22, 0xFF	; 255
    193a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <DIO_VidSetPortDirection>

	DIO_VidSetPinDirection(LCD_CMD_PORT,RS,DIO_OUTPUT);
    193e:	83 e0       	ldi	r24, 0x03	; 3
    1940:	65 e0       	ldi	r22, 0x05	; 5
    1942:	41 e0       	ldi	r20, 0x01	; 1
    1944:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CMD_PORT,RW,DIO_OUTPUT);
    1948:	83 e0       	ldi	r24, 0x03	; 3
    194a:	66 e0       	ldi	r22, 0x06	; 6
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CMD_PORT,EN,DIO_OUTPUT);
    1952:	83 e0       	ldi	r24, 0x03	; 3
    1954:	67 e0       	ldi	r22, 0x07	; 7
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_VidSetPinDirection>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	ac e0       	ldi	r26, 0x0C	; 12
    1962:	b2 e4       	ldi	r27, 0x42	; 66
    1964:	8d ab       	std	Y+53, r24	; 0x35
    1966:	9e ab       	std	Y+54, r25	; 0x36
    1968:	af ab       	std	Y+55, r26	; 0x37
    196a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	6d a9       	ldd	r22, Y+53	; 0x35
    196e:	7e a9       	ldd	r23, Y+54	; 0x36
    1970:	8f a9       	ldd	r24, Y+55	; 0x37
    1972:	98 ad       	ldd	r25, Y+56	; 0x38
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a ef       	ldi	r20, 0xFA	; 250
    197a:	54 e4       	ldi	r21, 0x44	; 68
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	89 ab       	std	Y+49, r24	; 0x31
    1986:	9a ab       	std	Y+50, r25	; 0x32
    1988:	ab ab       	std	Y+51, r26	; 0x33
    198a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    198c:	69 a9       	ldd	r22, Y+49	; 0x31
    198e:	7a a9       	ldd	r23, Y+50	; 0x32
    1990:	8b a9       	ldd	r24, Y+51	; 0x33
    1992:	9c a9       	ldd	r25, Y+52	; 0x34
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <LCD_VidInit+0x8c>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	98 ab       	std	Y+48, r25	; 0x30
    19aa:	8f a7       	std	Y+47, r24	; 0x2f
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <LCD_VidInit+0x10a>
	else if (__tmp > 65535)
    19ae:	69 a9       	ldd	r22, Y+49	; 0x31
    19b0:	7a a9       	ldd	r23, Y+50	; 0x32
    19b2:	8b a9       	ldd	r24, Y+51	; 0x33
    19b4:	9c a9       	ldd	r25, Y+52	; 0x34
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <LCD_VidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	6d a9       	ldd	r22, Y+53	; 0x35
    19c8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ca:	8f a9       	ldd	r24, Y+55	; 0x37
    19cc:	98 ad       	ldd	r25, Y+56	; 0x38
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	98 ab       	std	Y+48, r25	; 0x30
    19ec:	8f a7       	std	Y+47, r24	; 0x2f
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <LCD_VidInit+0xec>
    19f0:	88 ec       	ldi	r24, 0xC8	; 200
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9e a7       	std	Y+46, r25	; 0x2e
    19f6:	8d a7       	std	Y+45, r24	; 0x2d
    19f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    19fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_VidInit+0xda>
    1a00:	9e a7       	std	Y+46, r25	; 0x2e
    1a02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a06:	98 a9       	ldd	r25, Y+48	; 0x30
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a10:	98 a9       	ldd	r25, Y+48	; 0x30
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <LCD_VidInit+0xce>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <LCD_VidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	69 a9       	ldd	r22, Y+49	; 0x31
    1a1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	98 ab       	std	Y+48, r25	; 0x30
    1a2a:	8f a7       	std	Y+47, r24	; 0x2f
    1a2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a30:	9c a7       	std	Y+44, r25	; 0x2c
    1a32:	8b a7       	std	Y+43, r24	; 0x2b
    1a34:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a36:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <LCD_VidInit+0x116>
    1a3c:	9c a7       	std	Y+44, r25	; 0x2c
    1a3e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);
	LCD_VidSendCMD(LCD_FUNC_SET);
    1a40:	88 e3       	ldi	r24, 0x38	; 56
    1a42:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_VidSendCMD>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a0 e8       	ldi	r26, 0x80	; 128
    1a4c:	bf e3       	ldi	r27, 0x3F	; 63
    1a4e:	8f a3       	std	Y+39, r24	; 0x27
    1a50:	98 a7       	std	Y+40, r25	; 0x28
    1a52:	a9 a7       	std	Y+41, r26	; 0x29
    1a54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a56:	6f a1       	ldd	r22, Y+39	; 0x27
    1a58:	78 a5       	ldd	r23, Y+40	; 0x28
    1a5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a ef       	ldi	r20, 0xFA	; 250
    1a64:	54 e4       	ldi	r21, 0x44	; 68
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8b a3       	std	Y+35, r24	; 0x23
    1a70:	9c a3       	std	Y+36, r25	; 0x24
    1a72:	ad a3       	std	Y+37, r26	; 0x25
    1a74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a76:	6b a1       	ldd	r22, Y+35	; 0x23
    1a78:	7c a1       	ldd	r23, Y+36	; 0x24
    1a7a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a7c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <LCD_VidInit+0x176>
		__ticks = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9a a3       	std	Y+34, r25	; 0x22
    1a94:	89 a3       	std	Y+33, r24	; 0x21
    1a96:	3f c0       	rjmp	.+126    	; 0x1b16 <LCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    1a98:	6b a1       	ldd	r22, Y+35	; 0x23
    1a9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	4f e7       	ldi	r20, 0x7F	; 127
    1aa6:	57 e4       	ldi	r21, 0x47	; 71
    1aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aac:	18 16       	cp	r1, r24
    1aae:	4c f5       	brge	.+82     	; 0x1b02 <LCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ab2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ab4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ab6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9a a3       	std	Y+34, r25	; 0x22
    1ad6:	89 a3       	std	Y+33, r24	; 0x21
    1ad8:	0f c0       	rjmp	.+30     	; 0x1af8 <LCD_VidInit+0x1d6>
    1ada:	88 ec       	ldi	r24, 0xC8	; 200
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	98 a3       	std	Y+32, r25	; 0x20
    1ae0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ae2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ae4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <LCD_VidInit+0x1c4>
    1aea:	98 a3       	std	Y+32, r25	; 0x20
    1aec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	89 a1       	ldd	r24, Y+33	; 0x21
    1af0:	9a a1       	ldd	r25, Y+34	; 0x22
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	9a a3       	std	Y+34, r25	; 0x22
    1af6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	89 a1       	ldd	r24, Y+33	; 0x21
    1afa:	9a a1       	ldd	r25, Y+34	; 0x22
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	69 f7       	brne	.-38     	; 0x1ada <LCD_VidInit+0x1b8>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <LCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	6b a1       	ldd	r22, Y+35	; 0x23
    1b04:	7c a1       	ldd	r23, Y+36	; 0x24
    1b06:	8d a1       	ldd	r24, Y+37	; 0x25
    1b08:	9e a1       	ldd	r25, Y+38	; 0x26
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9a a3       	std	Y+34, r25	; 0x22
    1b14:	89 a3       	std	Y+33, r24	; 0x21
    1b16:	89 a1       	ldd	r24, Y+33	; 0x21
    1b18:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b1c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <LCD_VidInit+0x200>
    1b26:	9e 8f       	std	Y+30, r25	; 0x1e
    1b28:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VidSendCMD(LCD_ONOF);
    1b2a:	8f e0       	ldi	r24, 0x0F	; 15
    1b2c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_VidSendCMD>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a0 e8       	ldi	r26, 0x80	; 128
    1b36:	bf e3       	ldi	r27, 0x3F	; 63
    1b38:	89 8f       	std	Y+25, r24	; 0x19
    1b3a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b3c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b40:	69 8d       	ldd	r22, Y+25	; 0x19
    1b42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	4a ef       	ldi	r20, 0xFA	; 250
    1b4e:	54 e4       	ldi	r21, 0x44	; 68
    1b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	8d 8b       	std	Y+21, r24	; 0x15
    1b5a:	9e 8b       	std	Y+22, r25	; 0x16
    1b5c:	af 8b       	std	Y+23, r26	; 0x17
    1b5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b60:	6d 89       	ldd	r22, Y+21	; 0x15
    1b62:	7e 89       	ldd	r23, Y+22	; 0x16
    1b64:	8f 89       	ldd	r24, Y+23	; 0x17
    1b66:	98 8d       	ldd	r25, Y+24	; 0x18
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <LCD_VidInit+0x260>
		__ticks = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9c 8b       	std	Y+20, r25	; 0x14
    1b7e:	8b 8b       	std	Y+19, r24	; 0x13
    1b80:	3f c0       	rjmp	.+126    	; 0x1c00 <LCD_VidInit+0x2de>
	else if (__tmp > 65535)
    1b82:	6d 89       	ldd	r22, Y+21	; 0x15
    1b84:	7e 89       	ldd	r23, Y+22	; 0x16
    1b86:	8f 89       	ldd	r24, Y+23	; 0x17
    1b88:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	4c f5       	brge	.+82     	; 0x1bec <LCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9c 8b       	std	Y+20, r25	; 0x14
    1bc0:	8b 8b       	std	Y+19, r24	; 0x13
    1bc2:	0f c0       	rjmp	.+30     	; 0x1be2 <LCD_VidInit+0x2c0>
    1bc4:	88 ec       	ldi	r24, 0xC8	; 200
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9a 8b       	std	Y+18, r25	; 0x12
    1bca:	89 8b       	std	Y+17, r24	; 0x11
    1bcc:	89 89       	ldd	r24, Y+17	; 0x11
    1bce:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <LCD_VidInit+0x2ae>
    1bd4:	9a 8b       	std	Y+18, r25	; 0x12
    1bd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bda:	9c 89       	ldd	r25, Y+20	; 0x14
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	9c 8b       	std	Y+20, r25	; 0x14
    1be0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be2:	8b 89       	ldd	r24, Y+19	; 0x13
    1be4:	9c 89       	ldd	r25, Y+20	; 0x14
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	69 f7       	brne	.-38     	; 0x1bc4 <LCD_VidInit+0x2a2>
    1bea:	14 c0       	rjmp	.+40     	; 0x1c14 <LCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bec:	6d 89       	ldd	r22, Y+21	; 0x15
    1bee:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9c 8b       	std	Y+20, r25	; 0x14
    1bfe:	8b 8b       	std	Y+19, r24	; 0x13
    1c00:	8b 89       	ldd	r24, Y+19	; 0x13
    1c02:	9c 89       	ldd	r25, Y+20	; 0x14
    1c04:	98 8b       	std	Y+16, r25	; 0x10
    1c06:	8f 87       	std	Y+15, r24	; 0x0f
    1c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0a:	98 89       	ldd	r25, Y+16	; 0x10
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <LCD_VidInit+0x2ea>
    1c10:	98 8b       	std	Y+16, r25	; 0x10
    1c12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidSendCMD(LCD_CLEAR);
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_VidSendCMD>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 e8       	ldi	r26, 0x80	; 128
    1c20:	bf e3       	ldi	r27, 0x3F	; 63
    1c22:	8b 87       	std	Y+11, r24	; 0x0b
    1c24:	9c 87       	std	Y+12, r25	; 0x0c
    1c26:	ad 87       	std	Y+13, r26	; 0x0d
    1c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	4a ef       	ldi	r20, 0xFA	; 250
    1c38:	54 e4       	ldi	r21, 0x44	; 68
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8f 83       	std	Y+7, r24	; 0x07
    1c44:	98 87       	std	Y+8, r25	; 0x08
    1c46:	a9 87       	std	Y+9, r26	; 0x09
    1c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4c:	78 85       	ldd	r23, Y+8	; 0x08
    1c4e:	89 85       	ldd	r24, Y+9	; 0x09
    1c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <LCD_VidInit+0x34a>
		__ticks = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9e 83       	std	Y+6, r25	; 0x06
    1c68:	8d 83       	std	Y+5, r24	; 0x05
    1c6a:	3f c0       	rjmp	.+126    	; 0x1cea <LCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    1c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6e:	78 85       	ldd	r23, Y+8	; 0x08
    1c70:	89 85       	ldd	r24, Y+9	; 0x09
    1c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	57 e4       	ldi	r21, 0x47	; 71
    1c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	4c f5       	brge	.+82     	; 0x1cd6 <LCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e2       	ldi	r20, 0x20	; 32
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <LCD_VidInit+0x3aa>
    1cae:	88 ec       	ldi	r24, 0xC8	; 200
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9c 83       	std	Y+4, r25	; 0x04
    1cb4:	8b 83       	std	Y+3, r24	; 0x03
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_VidInit+0x398>
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	69 f7       	brne	.-38     	; 0x1cae <LCD_VidInit+0x38c>
    1cd4:	14 c0       	rjmp	.+40     	; 0x1cfe <LCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd8:	78 85       	ldd	r23, Y+8	; 0x08
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_VidInit+0x3d4>
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1cfe:	e8 96       	adiw	r28, 0x38	; 56
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <LCD_VidCLR>:

void LCD_VidCLR(void)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	2e 97       	sbiw	r28, 0x0e	; 14
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61

	LCD_VidSendCMD(0x01);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_VidSendCMD>
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a0 e0       	ldi	r26, 0x00	; 0
    1d30:	b0 e4       	ldi	r27, 0x40	; 64
    1d32:	8b 87       	std	Y+11, r24	; 0x0b
    1d34:	9c 87       	std	Y+12, r25	; 0x0c
    1d36:	ad 87       	std	Y+13, r26	; 0x0d
    1d38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	4a ef       	ldi	r20, 0xFA	; 250
    1d48:	54 e4       	ldi	r21, 0x44	; 68
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	8f 83       	std	Y+7, r24	; 0x07
    1d54:	98 87       	std	Y+8, r25	; 0x08
    1d56:	a9 87       	std	Y+9, r26	; 0x09
    1d58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5c:	78 85       	ldd	r23, Y+8	; 0x08
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <LCD_VidCLR+0x6c>
		__ticks = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	3f c0       	rjmp	.+126    	; 0x1dfa <LCD_VidCLR+0xea>
	else if (__tmp > 65535)
    1d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7e:	78 85       	ldd	r23, Y+8	; 0x08
    1d80:	89 85       	ldd	r24, Y+9	; 0x09
    1d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	57 e4       	ldi	r21, 0x47	; 71
    1d8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	4c f5       	brge	.+82     	; 0x1de6 <LCD_VidCLR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e2       	ldi	r20, 0x20	; 32
    1da2:	51 e4       	ldi	r21, 0x41	; 65
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
    1dbc:	0f c0       	rjmp	.+30     	; 0x1ddc <LCD_VidCLR+0xcc>
    1dbe:	88 ec       	ldi	r24, 0xC8	; 200
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9c 83       	std	Y+4, r25	; 0x04
    1dc4:	8b 83       	std	Y+3, r24	; 0x03
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <LCD_VidCLR+0xba>
    1dce:	9c 83       	std	Y+4, r25	; 0x04
    1dd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	69 f7       	brne	.-38     	; 0x1dbe <LCD_VidCLR+0xae>
    1de4:	14 c0       	rjmp	.+40     	; 0x1e0e <LCD_VidCLR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de6:	6f 81       	ldd	r22, Y+7	; 0x07
    1de8:	78 85       	ldd	r23, Y+8	; 0x08
    1dea:	89 85       	ldd	r24, Y+9	; 0x09
    1dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfe:	9a 83       	std	Y+2, r25	; 0x02
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	9a 81       	ldd	r25, Y+2	; 0x02
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <LCD_VidCLR+0xf6>
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1e0e:	2e 96       	adiw	r28, 0x0e	; 14
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <LCD_VidSendNumber>:



void LCD_VidSendNumber(u32 Copy_u32Number)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	2c 97       	sbiw	r28, 0x0c	; 12
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	69 87       	std	Y+9, r22	; 0x09
    1e36:	7a 87       	std	Y+10, r23	; 0x0a
    1e38:	8b 87       	std	Y+11, r24	; 0x0b
    1e3a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_u32Counter=1 , Local_u32Digit=0;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 e0       	ldi	r26, 0x00	; 0
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	8d 83       	std	Y+5, r24	; 0x05
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	af 83       	std	Y+7, r26	; 0x07
    1e4a:	b8 87       	std	Y+8, r27	; 0x08
    1e4c:	19 82       	std	Y+1, r1	; 0x01
    1e4e:	1a 82       	std	Y+2, r1	; 0x02
    1e50:	1b 82       	std	Y+3, r1	; 0x03
    1e52:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_u32Number == 0)
    1e54:	89 85       	ldd	r24, Y+9	; 0x09
    1e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e58:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e5a:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	a1 05       	cpc	r26, r1
    1e60:	b1 05       	cpc	r27, r1
    1e62:	b1 f4       	brne	.+44     	; 0x1e90 <LCD_VidSendNumber+0x70>
		LCD_VidSendData('0');
    1e64:	80 e3       	ldi	r24, 0x30	; 48
    1e66:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_VidSendData>
    1e6a:	7a c0       	rjmp	.+244    	; 0x1f60 <LCD_VidSendNumber+0x140>
	else
	{
		while (Copy_u32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	af 81       	ldd	r26, Y+7	; 0x07
    1e72:	b8 85       	ldd	r27, Y+8	; 0x08
    1e74:	2a e0       	ldi	r18, 0x0A	; 10
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 b2 11 	call	0x2364	; 0x2364 <__mulsi3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	af 83       	std	Y+7, r26	; 0x07
    1e8e:	b8 87       	std	Y+8, r27	; 0x08

	if (Copy_u32Number == 0)
		LCD_VidSendData('0');
	else
	{
		while (Copy_u32Number/Local_u32Counter != 0)
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e94:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e96:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e98:	2d 81       	ldd	r18, Y+5	; 0x05
    1e9a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e9c:	4f 81       	ldd	r20, Y+7	; 0x07
    1e9e:	58 85       	ldd	r21, Y+8	; 0x08
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodsi4>
    1ea8:	da 01       	movw	r26, r20
    1eaa:	c9 01       	movw	r24, r18
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	a1 05       	cpc	r26, r1
    1eb0:	b1 05       	cpc	r27, r1
    1eb2:	e1 f6       	brne	.-72     	; 0x1e6c <LCD_VidSendNumber+0x4c>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	af 81       	ldd	r26, Y+7	; 0x07
    1eba:	b8 85       	ldd	r27, Y+8	; 0x08
    1ebc:	2a e0       	ldi	r18, 0x0A	; 10
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	cd 01       	movw	r24, r26
    1ec8:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodsi4>
    1ecc:	da 01       	movw	r26, r20
    1ece:	c9 01       	movw	r24, r18
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	af 83       	std	Y+7, r26	; 0x07
    1ed6:	b8 87       	std	Y+8, r27	; 0x08
    1ed8:	3a c0       	rjmp	.+116    	; 0x1f4e <LCD_VidSendNumber+0x12e>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_u32Number/Local_u32Counter;
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ee0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ee2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ee4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ee6:	4f 81       	ldd	r20, Y+7	; 0x07
    1ee8:	58 85       	ldd	r21, Y+8	; 0x08
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodsi4>
    1ef2:	da 01       	movw	r26, r20
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	ab 83       	std	Y+3, r26	; 0x03
    1efc:	bc 83       	std	Y+4, r27	; 0x04

			LCD_VidSendData(Local_u32Digit + '0');
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	80 5d       	subi	r24, 0xD0	; 208
    1f02:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_VidSendData>

			Copy_u32Number = Copy_u32Number%Local_u32Counter;
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f0c:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f10:	3e 81       	ldd	r19, Y+6	; 0x06
    1f12:	4f 81       	ldd	r20, Y+7	; 0x07
    1f14:	58 85       	ldd	r21, Y+8	; 0x08
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodsi4>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	89 87       	std	Y+9, r24	; 0x09
    1f24:	9a 87       	std	Y+10, r25	; 0x0a
    1f26:	ab 87       	std	Y+11, r26	; 0x0b
    1f28:	bc 87       	std	Y+12, r27	; 0x0c

			Local_u32Counter /= 10;
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	af 81       	ldd	r26, Y+7	; 0x07
    1f30:	b8 85       	ldd	r27, Y+8	; 0x08
    1f32:	2a e0       	ldi	r18, 0x0A	; 10
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodsi4>
    1f42:	da 01       	movw	r26, r20
    1f44:	c9 01       	movw	r24, r18
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	af 83       	std	Y+7, r26	; 0x07
    1f4c:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	af 81       	ldd	r26, Y+7	; 0x07
    1f54:	b8 85       	ldd	r27, Y+8	; 0x08
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	a1 05       	cpc	r26, r1
    1f5a:	b1 05       	cpc	r27, r1
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <LCD_VidSendNumber+0x140>
    1f5e:	bd cf       	rjmp	.-134    	; 0x1eda <LCD_VidSendNumber+0xba>
			Copy_u32Number = Copy_u32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    1f60:	2c 96       	adiw	r28, 0x0c	; 12
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <LCD_VidSendNumberPos>:

void LCD_VidSendNumberPos(u32 Copy_u32Number,u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <LCD_VidSendNumberPos+0x6>
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <LCD_VidSendNumberPos+0x8>
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <LCD_VidSendNumberPos+0xa>
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	69 83       	std	Y+1, r22	; 0x01
    1f82:	7a 83       	std	Y+2, r23	; 0x02
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	9c 83       	std	Y+4, r25	; 0x04
    1f88:	4d 83       	std	Y+5, r20	; 0x05
    1f8a:	2e 83       	std	Y+6, r18	; 0x06
	LCD_VidSetCursorPos(Copy_U8Row,Copy_U8Coulmn);
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	6e 81       	ldd	r22, Y+6	; 0x06
    1f90:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_VidSetCursorPos>
	LCD_VidSendNumber(Copy_u32Number);
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	ab 81       	ldd	r26, Y+3	; 0x03
    1f9a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <LCD_VidSendNumber>
}
    1fa4:	26 96       	adiw	r28, 0x06	; 6
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <LCD_VidSetCursorPos>:


void LCD_VidSetCursorPos(u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <LCD_VidSetCursorPos+0x6>
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <LCD_VidSetCursorPos+0x8>
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	6a 83       	std	Y+2, r22	; 0x02
	Copy_U8Coulmn -- ;
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	81 50       	subi	r24, 0x01	; 1
    1fca:	8a 83       	std	Y+2, r24	; 0x02
	switch (Copy_U8Row)
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	3c 83       	std	Y+4, r19	; 0x04
    1fd4:	2b 83       	std	Y+3, r18	; 0x03
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	91 05       	cpc	r25, r1
    1fde:	31 f0       	breq	.+12     	; 0x1fec <LCD_VidSetCursorPos+0x36>
    1fe0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe4:	22 30       	cpi	r18, 0x02	; 2
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	31 f0       	breq	.+12     	; 0x1ff6 <LCD_VidSetCursorPos+0x40>
    1fea:	09 c0       	rjmp	.+18     	; 0x1ffe <LCD_VidSetCursorPos+0x48>
	{
	case ROW1 :LCD_VidSendCMD((0x80 + Copy_U8Coulmn)); break;
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	80 58       	subi	r24, 0x80	; 128
    1ff0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_VidSendCMD>
    1ff4:	04 c0       	rjmp	.+8      	; 0x1ffe <LCD_VidSetCursorPos+0x48>
	case ROW2 :LCD_VidSendCMD((0xc0 + Copy_U8Coulmn)); break;
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	80 54       	subi	r24, 0x40	; 64
    1ffa:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_VidSendCMD>
	default : ;
	}


}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <LCD_VidSendCharPos>:

void LCD_VidSendCharPos(u8 Copy_U8Char,u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	00 d0       	rcall	.+0      	; 0x2012 <LCD_VidSendCharPos+0x6>
    2012:	0f 92       	push	r0
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	6a 83       	std	Y+2, r22	; 0x02
    201c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_VidSetCursorPos(Copy_U8Row,Copy_U8Coulmn);
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	6b 81       	ldd	r22, Y+3	; 0x03
    2022:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_VidSetCursorPos>
	LCD_VidSendData(Copy_U8Char);
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_VidSendData>
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <LCD_VidSendStringPos>:


void LCD_VidSendStringPos(u8 *Copy_U8String,u8 Copy_U8Row,u8 Copy_U8Coulmn)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <LCD_VidSendStringPos+0x6>
    203e:	00 d0       	rcall	.+0      	; 0x2040 <LCD_VidSendStringPos+0x8>
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	6b 83       	std	Y+3, r22	; 0x03
    204a:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidSetCursorPos(Copy_U8Row,Copy_U8Coulmn);
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	6c 81       	ldd	r22, Y+4	; 0x04
    2050:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_VidSetCursorPos>
	LCD_VidSendString(Copy_U8String);
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <LCD_VidSendString>
}
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <UART_VidInit>:
#include <avr/io.h>
#include "UART.h"


void UART_VidInit(void)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	00 d0       	rcall	.+0      	; 0x2070 <UART_VidInit+0x6>
    2070:	00 d0       	rcall	.+0      	; 0x2072 <UART_VidInit+0x8>
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16USCRC=0b10000000;
    2076:	80 e8       	ldi	r24, 0x80	; 128
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9c 83       	std	Y+4, r25	; 0x04
    207c:	8b 83       	std	Y+3, r24	; 0x03
	/*Baud rate*/
	u16 LocalU16BaudRate=51;
    207e:	83 e3       	ldi	r24, 0x33	; 51
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01

	UBRRL=(u8)LocalU16BaudRate;
    2086:	e9 e2       	ldi	r30, 0x29	; 41
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	80 83       	st	Z, r24
	UBRRH=(u8)(LocalU16BaudRate>>8);
    208e:	e0 e4       	ldi	r30, 0x40	; 64
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	89 2f       	mov	r24, r25
    2098:	99 27       	eor	r25, r25
    209a:	80 83       	st	Z, r24

	/*normal speed*/
	CLR_BIT(UCSRA,U2X);
    209c:	ab e2       	ldi	r26, 0x2B	; 43
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	eb e2       	ldi	r30, 0x2B	; 43
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	8d 7f       	andi	r24, 0xFD	; 253
    20a8:	8c 93       	st	X, r24

	/*multiprocessor disable*/
	CLR_BIT(UCSRA,MPCM);
    20aa:	ab e2       	ldi	r26, 0x2B	; 43
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	eb e2       	ldi	r30, 0x2B	; 43
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	8e 7f       	andi	r24, 0xFE	; 254
    20b6:	8c 93       	st	X, r24

	/*enable tx   rx*/
	SET_BIT(UCSRB,RXEN);
    20b8:	aa e2       	ldi	r26, 0x2A	; 42
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	ea e2       	ldi	r30, 0x2A	; 42
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	80 61       	ori	r24, 0x10	; 16
    20c4:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    20c6:	aa e2       	ldi	r26, 0x2A	; 42
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	ea e2       	ldi	r30, 0x2A	; 42
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	88 60       	ori	r24, 0x08	; 8
    20d2:	8c 93       	st	X, r24


	/*Select 8 bit mode*/
	SET_BIT(Local_u16USCRC,UCSZ0);
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	82 60       	ori	r24, 0x02	; 2
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u16USCRC,UCSZ1);
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	84 60       	ori	r24, 0x04	; 4
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRB,UCSZ2);
    20e8:	aa e2       	ldi	r26, 0x2A	; 42
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	ea e2       	ldi	r30, 0x2A	; 42
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	8b 7f       	andi	r24, 0xFB	; 251
    20f4:	8c 93       	st	X, r24

	/*Asynchronos*/
	CLR_BIT(Local_u16USCRC,UMSEL);
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	8f 7b       	andi	r24, 0xBF	; 191
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03

	/*PARITY MODE DISABLE*/
	CLR_BIT(Local_u16USCRC,UPM0);
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	8f 7e       	andi	r24, 0xEF	; 239
    2106:	9c 83       	std	Y+4, r25	; 0x04
    2108:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u16USCRC,UPM1);
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	8f 7d       	andi	r24, 0xDF	; 223
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	8b 83       	std	Y+3, r24	; 0x03

	/*STOP*/
	SET_BIT(Local_u16USCRC,USBS);
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	88 60       	ori	r24, 0x08	; 8
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03

	UCSRC=Local_u16USCRC;
    211e:	e0 e4       	ldi	r30, 0x40	; 64
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	80 83       	st	Z, r24





}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <UART_VidSendData>:




void UART_VidSendData(u16 Copy_U16Data)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <UART_VidSendData+0x6>
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	89 83       	std	Y+1, r24	; 0x01
	/*wait to empty shift register ---- datasheet*/
	while(GET_BIT(UCSRA,UDRE)==0);
    2142:	eb e2       	ldi	r30, 0x2B	; 43
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	82 95       	swap	r24
    214a:	86 95       	lsr	r24
    214c:	87 70       	andi	r24, 0x07	; 7
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	81 70       	andi	r24, 0x01	; 1
    2154:	90 70       	andi	r25, 0x00	; 0
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	a1 f3       	breq	.-24     	; 0x2142 <UART_VidSendData+0xe>
	UDR=(u8)Copy_U16Data;
    215a:	ec e2       	ldi	r30, 0x2C	; 44
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	80 83       	st	Z, r24
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <UART_VidReciveData>:



u8 UART_VidReciveData(void)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
	/*wait TILL RECIEVE COMPLETE ---- datasheet*/
	while(GET_BIT(UCSRA,RXC)==0);
    2174:	eb e2       	ldi	r30, 0x2B	; 43
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	88 23       	and	r24, r24
    217c:	dc f7       	brge	.-10     	; 0x2174 <UART_VidReciveData+0x8>
	return UDR;
    217e:	ec e2       	ldi	r30, 0x2C	; 44
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
}
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <UART_VidSend_String>:




void UART_VidSend_String(u8 *Copy_U8ptr)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <UART_VidSend_String+0x6>
    2190:	0f 92       	push	r0
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9b 83       	std	Y+3, r25	; 0x03
    2198:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8Counter=0;
    219a:	19 82       	std	Y+1, r1	; 0x01
    219c:	10 c0       	rjmp	.+32     	; 0x21be <UART_VidSend_String+0x34>
	for	(Local_u8Counter;Copy_U8ptr[Local_u8Counter] !='\0' ;Local_u8Counter++)
	{
		UART_VidSendData(Copy_U8ptr[Local_u8Counter]);
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	fc 01       	movw	r30, r24
    21aa:	e2 0f       	add	r30, r18
    21ac:	f3 1f       	adc	r31, r19
    21ae:	80 81       	ld	r24, Z
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 9a 10 	call	0x2134	; 0x2134 <UART_VidSendData>


void UART_VidSend_String(u8 *Copy_U8ptr)
{
	 u8 Local_u8Counter=0;
	for	(Local_u8Counter;Copy_U8ptr[Local_u8Counter] !='\0' ;Local_u8Counter++)
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	8f 5f       	subi	r24, 0xFF	; 255
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	9b 81       	ldd	r25, Y+3	; 0x03
    21c8:	fc 01       	movw	r30, r24
    21ca:	e2 0f       	add	r30, r18
    21cc:	f3 1f       	adc	r31, r19
    21ce:	80 81       	ld	r24, Z
    21d0:	88 23       	and	r24, r24
    21d2:	29 f7       	brne	.-54     	; 0x219e <UART_VidSend_String+0x14>
	{
		UART_VidSendData(Copy_U8ptr[Local_u8Counter]);
	}

}
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <__vector_13>:

u8 Local_Data_UART =9;



ISR(USART_RXC_vect){
    21e0:	1f 92       	push	r1
    21e2:	0f 92       	push	r0
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	0f 92       	push	r0
    21e8:	11 24       	eor	r1, r1
    21ea:	2f 93       	push	r18
    21ec:	3f 93       	push	r19
    21ee:	4f 93       	push	r20
    21f0:	5f 93       	push	r21
    21f2:	6f 93       	push	r22
    21f4:	7f 93       	push	r23
    21f6:	8f 93       	push	r24
    21f8:	9f 93       	push	r25
    21fa:	af 93       	push	r26
    21fc:	bf 93       	push	r27
    21fe:	ef 93       	push	r30
    2200:	ff 93       	push	r31
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
		Local_Data_UART = UDR;
    220a:	ec e2       	ldi	r30, 0x2C	; 44
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	80 93 8c 00 	sts	0x008C, r24
	DIO_VidSetPortDirection(PORT_C,0b00001111);
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	6f e0       	ldi	r22, 0x0F	; 15
    2218:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <DIO_VidSetPortDirection>

	if(Local_Data_UART != 9)
    221c:	80 91 8c 00 	lds	r24, 0x008C
    2220:	89 30       	cpi	r24, 0x09	; 9
    2222:	09 f4       	brne	.+2      	; 0x2226 <__vector_13+0x46>
    2224:	66 c0       	rjmp	.+204    	; 0x22f2 <__vector_13+0x112>
		{
		if(Local_Data_UART == 'F')
    2226:	80 91 8c 00 	lds	r24, 0x008C
    222a:	86 34       	cpi	r24, 0x46	; 70
    222c:	51 f4       	brne	.+20     	; 0x2242 <__vector_13+0x62>
		{
			DIO_VidSetPinValue(PORT_C,PIN_0,DIO_HIGH);
    222e:	82 e0       	ldi	r24, 0x02	; 2
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	41 e0       	ldi	r20, 0x01	; 1
    2234:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
			UART_VidSend_String("Fan ON");
    2238:	85 e7       	ldi	r24, 0x75	; 117
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	0e 94 c5 10 	call	0x218a	; 0x218a <UART_VidSend_String>
    2240:	5c c0       	rjmp	.+184    	; 0x22fa <__vector_13+0x11a>
		}
		else if(Local_Data_UART == 'f')
    2242:	80 91 8c 00 	lds	r24, 0x008C
    2246:	86 36       	cpi	r24, 0x66	; 102
    2248:	51 f4       	brne	.+20     	; 0x225e <__vector_13+0x7e>
		{
			DIO_VidSetPinValue(PORT_C,PIN_0,DIO_LOW);
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
			UART_VidSend_String("Fan OFF");
    2254:	8c e7       	ldi	r24, 0x7C	; 124
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 c5 10 	call	0x218a	; 0x218a <UART_VidSend_String>
    225c:	4e c0       	rjmp	.+156    	; 0x22fa <__vector_13+0x11a>
		}

		else if(Local_Data_UART == '1')
    225e:	80 91 8c 00 	lds	r24, 0x008C
    2262:	81 33       	cpi	r24, 0x31	; 49
    2264:	81 f4       	brne	.+32     	; 0x2286 <__vector_13+0xa6>
		{
			DIO_VidSetPinValue(PORT_C,PIN_1,DIO_HIGH);
    2266:	82 e0       	ldi	r24, 0x02	; 2
    2268:	61 e0       	ldi	r22, 0x01	; 1
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(PORT_C,PIN_2,DIO_LOW);
    2270:	82 e0       	ldi	r24, 0x02	; 2
    2272:	62 e0       	ldi	r22, 0x02	; 2
    2274:	40 e0       	ldi	r20, 0x00	; 0
    2276:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(PORT_C,PIN_3,DIO_LOW);
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	63 e0       	ldi	r22, 0x03	; 3
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
    2284:	3a c0       	rjmp	.+116    	; 0x22fa <__vector_13+0x11a>
		}
		else if(Local_Data_UART == '2')
    2286:	80 91 8c 00 	lds	r24, 0x008C
    228a:	82 33       	cpi	r24, 0x32	; 50
    228c:	81 f4       	brne	.+32     	; 0x22ae <__vector_13+0xce>
		{
			DIO_VidSetPinValue(PORT_C,PIN_1,DIO_HIGH);
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	61 e0       	ldi	r22, 0x01	; 1
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(PORT_C,PIN_2,DIO_HIGH);
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	62 e0       	ldi	r22, 0x02	; 2
    229c:	41 e0       	ldi	r20, 0x01	; 1
    229e:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(PORT_C,PIN_3,DIO_LOW);
    22a2:	82 e0       	ldi	r24, 0x02	; 2
    22a4:	63 e0       	ldi	r22, 0x03	; 3
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
    22ac:	26 c0       	rjmp	.+76     	; 0x22fa <__vector_13+0x11a>
		}
		else if(Local_Data_UART == '3')
    22ae:	80 91 8c 00 	lds	r24, 0x008C
    22b2:	83 33       	cpi	r24, 0x33	; 51
    22b4:	81 f4       	brne	.+32     	; 0x22d6 <__vector_13+0xf6>
		{
			DIO_VidSetPinValue(PORT_C,PIN_1,DIO_HIGH);
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	61 e0       	ldi	r22, 0x01	; 1
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(PORT_C,PIN_2,DIO_HIGH);
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	62 e0       	ldi	r22, 0x02	; 2
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(PORT_C,PIN_3,DIO_HIGH);
    22ca:	82 e0       	ldi	r24, 0x02	; 2
    22cc:	63 e0       	ldi	r22, 0x03	; 3
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 b3 08 	call	0x1166	; 0x1166 <DIO_VidSetPinValue>
    22d4:	12 c0       	rjmp	.+36     	; 0x22fa <__vector_13+0x11a>

		}

		else if(Local_Data_UART == '0')
    22d6:	80 91 8c 00 	lds	r24, 0x008C
    22da:	80 33       	cpi	r24, 0x30	; 48
    22dc:	29 f4       	brne	.+10     	; 0x22e8 <__vector_13+0x108>
		{
			DIO_VidSetPortValue(PORT_C,0b00000000);
    22de:	82 e0       	ldi	r24, 0x02	; 2
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	0e 94 2d 0a 	call	0x145a	; 0x145a <DIO_VidSetPortValue>
    22e6:	09 c0       	rjmp	.+18     	; 0x22fa <__vector_13+0x11a>
		}

		else
		{
			DIO_VidSetPortValue(PORT_C,0b00000000);
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	0e 94 2d 0a 	call	0x145a	; 0x145a <DIO_VidSetPortValue>
    22f0:	04 c0       	rjmp	.+8      	; 0x22fa <__vector_13+0x11a>
		}

		}
		else
		{
			DIO_VidSetPortValue(PORT_C,0b00000000);
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	0e 94 2d 0a 	call	0x145a	; 0x145a <DIO_VidSetPortValue>
		}



}
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	ff 91       	pop	r31
    2300:	ef 91       	pop	r30
    2302:	bf 91       	pop	r27
    2304:	af 91       	pop	r26
    2306:	9f 91       	pop	r25
    2308:	8f 91       	pop	r24
    230a:	7f 91       	pop	r23
    230c:	6f 91       	pop	r22
    230e:	5f 91       	pop	r21
    2310:	4f 91       	pop	r20
    2312:	3f 91       	pop	r19
    2314:	2f 91       	pop	r18
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	0f 90       	pop	r0
    231c:	1f 90       	pop	r1
    231e:	18 95       	reti

00002320 <main>:
#include "avr/delay.h"
#include "AC_TempSens.h"
#include "UART.h"
#include "UART_PROJ.h"

void main(void) {
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PORT_D,PIN4,DIO_OUTPUT);
    2328:	83 e0       	ldi	r24, 0x03	; 3
    232a:	64 e0       	ldi	r22, 0x04	; 4
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_VidSetPinDirection>
	SET_BIT(SREG,7);
    2332:	af e5       	ldi	r26, 0x5F	; 95
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	ef e5       	ldi	r30, 0x5F	; 95
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	80 68       	ori	r24, 0x80	; 128
    233e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXCIE);
    2340:	aa e2       	ldi	r26, 0x2A	; 42
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	ea e2       	ldi	r30, 0x2A	; 42
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	80 68       	ori	r24, 0x80	; 128
    234c:	8c 93       	st	X, r24
	UART_VidInit();
    234e:	0e 94 35 10 	call	0x206a	; 0x206a <UART_VidInit>
	LCD_VidInit();
    2352:	0e 94 91 0c 	call	0x1922	; 0x1922 <LCD_VidInit>
	ADC_VidInit();
    2356:	0e 94 3e 07 	call	0xe7c	; 0xe7c <ADC_VidInit>
	while (1) {
		Ac_Control();
    235a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Ac_Control>
		Ldr_Control();
    235e:	0e 94 8b 06 	call	0xd16	; 0xd16 <Ldr_Control>
    2362:	fb cf       	rjmp	.-10     	; 0x235a <main+0x3a>

00002364 <__mulsi3>:
    2364:	62 9f       	mul	r22, r18
    2366:	d0 01       	movw	r26, r0
    2368:	73 9f       	mul	r23, r19
    236a:	f0 01       	movw	r30, r0
    236c:	82 9f       	mul	r24, r18
    236e:	e0 0d       	add	r30, r0
    2370:	f1 1d       	adc	r31, r1
    2372:	64 9f       	mul	r22, r20
    2374:	e0 0d       	add	r30, r0
    2376:	f1 1d       	adc	r31, r1
    2378:	92 9f       	mul	r25, r18
    237a:	f0 0d       	add	r31, r0
    237c:	83 9f       	mul	r24, r19
    237e:	f0 0d       	add	r31, r0
    2380:	74 9f       	mul	r23, r20
    2382:	f0 0d       	add	r31, r0
    2384:	65 9f       	mul	r22, r21
    2386:	f0 0d       	add	r31, r0
    2388:	99 27       	eor	r25, r25
    238a:	72 9f       	mul	r23, r18
    238c:	b0 0d       	add	r27, r0
    238e:	e1 1d       	adc	r30, r1
    2390:	f9 1f       	adc	r31, r25
    2392:	63 9f       	mul	r22, r19
    2394:	b0 0d       	add	r27, r0
    2396:	e1 1d       	adc	r30, r1
    2398:	f9 1f       	adc	r31, r25
    239a:	bd 01       	movw	r22, r26
    239c:	cf 01       	movw	r24, r30
    239e:	11 24       	eor	r1, r1
    23a0:	08 95       	ret

000023a2 <__udivmodhi4>:
    23a2:	aa 1b       	sub	r26, r26
    23a4:	bb 1b       	sub	r27, r27
    23a6:	51 e1       	ldi	r21, 0x11	; 17
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <__udivmodhi4_ep>

000023aa <__udivmodhi4_loop>:
    23aa:	aa 1f       	adc	r26, r26
    23ac:	bb 1f       	adc	r27, r27
    23ae:	a6 17       	cp	r26, r22
    23b0:	b7 07       	cpc	r27, r23
    23b2:	10 f0       	brcs	.+4      	; 0x23b8 <__udivmodhi4_ep>
    23b4:	a6 1b       	sub	r26, r22
    23b6:	b7 0b       	sbc	r27, r23

000023b8 <__udivmodhi4_ep>:
    23b8:	88 1f       	adc	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	5a 95       	dec	r21
    23be:	a9 f7       	brne	.-22     	; 0x23aa <__udivmodhi4_loop>
    23c0:	80 95       	com	r24
    23c2:	90 95       	com	r25
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	08 95       	ret

000023ca <__udivmodsi4>:
    23ca:	a1 e2       	ldi	r26, 0x21	; 33
    23cc:	1a 2e       	mov	r1, r26
    23ce:	aa 1b       	sub	r26, r26
    23d0:	bb 1b       	sub	r27, r27
    23d2:	fd 01       	movw	r30, r26
    23d4:	0d c0       	rjmp	.+26     	; 0x23f0 <__udivmodsi4_ep>

000023d6 <__udivmodsi4_loop>:
    23d6:	aa 1f       	adc	r26, r26
    23d8:	bb 1f       	adc	r27, r27
    23da:	ee 1f       	adc	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	a2 17       	cp	r26, r18
    23e0:	b3 07       	cpc	r27, r19
    23e2:	e4 07       	cpc	r30, r20
    23e4:	f5 07       	cpc	r31, r21
    23e6:	20 f0       	brcs	.+8      	; 0x23f0 <__udivmodsi4_ep>
    23e8:	a2 1b       	sub	r26, r18
    23ea:	b3 0b       	sbc	r27, r19
    23ec:	e4 0b       	sbc	r30, r20
    23ee:	f5 0b       	sbc	r31, r21

000023f0 <__udivmodsi4_ep>:
    23f0:	66 1f       	adc	r22, r22
    23f2:	77 1f       	adc	r23, r23
    23f4:	88 1f       	adc	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	1a 94       	dec	r1
    23fa:	69 f7       	brne	.-38     	; 0x23d6 <__udivmodsi4_loop>
    23fc:	60 95       	com	r22
    23fe:	70 95       	com	r23
    2400:	80 95       	com	r24
    2402:	90 95       	com	r25
    2404:	9b 01       	movw	r18, r22
    2406:	ac 01       	movw	r20, r24
    2408:	bd 01       	movw	r22, r26
    240a:	cf 01       	movw	r24, r30
    240c:	08 95       	ret

0000240e <__prologue_saves__>:
    240e:	2f 92       	push	r2
    2410:	3f 92       	push	r3
    2412:	4f 92       	push	r4
    2414:	5f 92       	push	r5
    2416:	6f 92       	push	r6
    2418:	7f 92       	push	r7
    241a:	8f 92       	push	r8
    241c:	9f 92       	push	r9
    241e:	af 92       	push	r10
    2420:	bf 92       	push	r11
    2422:	cf 92       	push	r12
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	ca 1b       	sub	r28, r26
    2438:	db 0b       	sbc	r29, r27
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	09 94       	ijmp

00002446 <__epilogue_restores__>:
    2446:	2a 88       	ldd	r2, Y+18	; 0x12
    2448:	39 88       	ldd	r3, Y+17	; 0x11
    244a:	48 88       	ldd	r4, Y+16	; 0x10
    244c:	5f 84       	ldd	r5, Y+15	; 0x0f
    244e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2450:	7d 84       	ldd	r7, Y+13	; 0x0d
    2452:	8c 84       	ldd	r8, Y+12	; 0x0c
    2454:	9b 84       	ldd	r9, Y+11	; 0x0b
    2456:	aa 84       	ldd	r10, Y+10	; 0x0a
    2458:	b9 84       	ldd	r11, Y+9	; 0x09
    245a:	c8 84       	ldd	r12, Y+8	; 0x08
    245c:	df 80       	ldd	r13, Y+7	; 0x07
    245e:	ee 80       	ldd	r14, Y+6	; 0x06
    2460:	fd 80       	ldd	r15, Y+5	; 0x05
    2462:	0c 81       	ldd	r16, Y+4	; 0x04
    2464:	1b 81       	ldd	r17, Y+3	; 0x03
    2466:	aa 81       	ldd	r26, Y+2	; 0x02
    2468:	b9 81       	ldd	r27, Y+1	; 0x01
    246a:	ce 0f       	add	r28, r30
    246c:	d1 1d       	adc	r29, r1
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	ed 01       	movw	r28, r26
    247a:	08 95       	ret

0000247c <_exit>:
    247c:	f8 94       	cli

0000247e <__stop_program>:
    247e:	ff cf       	rjmp	.-2      	; 0x247e <__stop_program>
